// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [3:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;
output  [3:0] Key_address1;
output   Key_ce1;
input  [7:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[3:0] Key_address0;
reg Key_ce0;
reg[3:0] Key_address1;
reg Key_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire   [2:0] i_fu_330_p2;
reg   [2:0] i_reg_618;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_340_p3;
reg   [3:0] shl_ln_reg_623;
wire   [0:0] icmp_ln179_fu_324_p2;
wire   [63:0] zext_ln180_fu_348_p1;
reg   [63:0] zext_ln180_reg_629;
wire   [63:0] zext_ln181_fu_359_p1;
reg   [63:0] zext_ln181_reg_639;
wire   [63:0] zext_ln182_fu_369_p1;
reg   [63:0] zext_ln182_reg_649;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln183_fu_379_p1;
reg   [63:0] zext_ln183_reg_659;
wire   [7:0] j_fu_390_p3;
reg   [7:0] j_reg_672;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln187_fu_384_p2;
wire   [0:0] icmp_ln196_fu_424_p2;
reg   [0:0] icmp_ln196_reg_696;
reg   [3:0] lshr_ln_reg_704;
wire   [5:0] i_3_fu_440_p2;
reg   [5:0] i_3_reg_709;
reg   [7:0] tempa_0_3_reg_714;
wire    ap_CS_fsm_state6;
reg   [7:0] tempa_1_reg_720;
reg   [7:0] tempa_2_reg_736;
wire    ap_CS_fsm_state7;
reg   [7:0] tempa_3_reg_741;
wire    ap_CS_fsm_state8;
wire   [7:0] xor_ln235_fu_525_p2;
reg   [7:0] xor_ln235_reg_782;
wire   [7:0] xor_ln236_fu_531_p2;
reg   [7:0] xor_ln236_reg_787;
wire   [7:0] xor_ln237_fu_583_p2;
reg   [7:0] xor_ln237_reg_802;
wire    ap_CS_fsm_state9;
wire   [7:0] xor_ln238_fu_589_p2;
reg   [7:0] xor_ln238_reg_807;
reg   [2:0] i_0_reg_302;
wire    ap_CS_fsm_state4;
reg   [5:0] i_1_reg_313;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln190_fu_404_p1;
wire   [63:0] zext_ln191_fu_415_p1;
wire   [63:0] zext_ln192_fu_451_p1;
wire   [63:0] zext_ln193_fu_461_p1;
wire   [63:0] zext_ln214_fu_466_p1;
wire   [63:0] zext_ln215_fu_470_p1;
wire   [63:0] zext_ln220_fu_475_p1;
wire   [63:0] zext_ln235_fu_484_p1;
wire   [63:0] zext_ln236_fu_494_p1;
wire   [63:0] zext_ln216_fu_499_p1;
wire   [63:0] zext_ln217_fu_503_p1;
wire   [63:0] zext_ln237_fu_542_p1;
wire   [63:0] zext_ln238_fu_552_p1;
wire   [63:0] zext_ln235_1_fu_569_p1;
wire   [63:0] zext_ln236_1_fu_578_p1;
wire   [63:0] zext_ln237_1_fu_600_p1;
wire   [63:0] zext_ln238_1_fu_610_p1;
wire   [1:0] trunc_ln180_fu_336_p1;
wire   [3:0] or_ln181_fu_353_p2;
wire   [3:0] or_ln182_fu_364_p2;
wire   [3:0] or_ln183_fu_374_p2;
wire   [7:0] add_ln190_fu_398_p2;
wire   [7:0] add_ln191_fu_409_p2;
wire   [1:0] trunc_ln187_fu_420_p1;
wire   [7:0] add_ln192_fu_446_p2;
wire   [7:0] add_ln193_fu_456_p2;
wire   [7:0] add_ln235_fu_479_p2;
wire   [7:0] add_ln236_fu_489_p2;
wire   [7:0] tempa_0_fu_507_p2;
wire   [7:0] tempa_0_2_fu_519_p3;
wire   [7:0] tempa_1_2_fu_513_p3;
wire   [7:0] add_ln237_fu_537_p2;
wire   [7:0] add_ln238_fu_547_p2;
wire   [7:0] or_ln236_fu_573_p2;
wire   [7:0] tempa_2_2_fu_563_p3;
wire   [7:0] tempa_3_2_fu_557_p3;
wire   [7:0] or_ln237_fu_595_p2;
wire   [7:0] or_ln238_fu_605_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_302 <= i_reg_618;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_302 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_313 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_313 <= i_3_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln187_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_3_reg_709 <= i_3_fu_440_p2;
        icmp_ln196_reg_696 <= icmp_ln196_fu_424_p2;
        j_reg_672[7 : 2] <= j_fu_390_p3[7 : 2];
        lshr_ln_reg_704 <= {{i_1_reg_313[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_618 <= i_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln179_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_623[3 : 2] <= shl_ln_fu_340_p3[3 : 2];
        zext_ln180_reg_629[3 : 2] <= zext_ln180_fu_348_p1[3 : 2];
        zext_ln181_reg_639[3 : 2] <= zext_ln181_fu_359_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tempa_0_3_reg_714 <= RoundKey_q0;
        tempa_1_reg_720 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tempa_2_reg_736 <= RoundKey_q0;
        tempa_3_reg_741 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        xor_ln235_reg_782 <= xor_ln235_fu_525_p2;
        xor_ln236_reg_787 <= xor_ln236_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        xor_ln237_reg_802 <= xor_ln237_fu_583_p2;
        xor_ln238_reg_807 <= xor_ln238_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln182_reg_649[3 : 2] <= zext_ln182_fu_369_p1[3 : 2];
        zext_ln183_reg_659[3 : 2] <= zext_ln183_fu_379_p1[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = zext_ln182_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address0 = zext_ln180_fu_348_p1;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address1 = zext_ln183_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address1 = zext_ln181_fu_359_p1;
    end else begin
        Key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        Key_ce1 = 1'b1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = zext_ln237_1_fu_600_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = zext_ln235_1_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln237_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address0 = zext_ln235_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address0 = zext_ln192_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address0 = zext_ln190_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = zext_ln182_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = zext_ln180_reg_629;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = zext_ln238_1_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = zext_ln236_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln238_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address1 = zext_ln236_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = zext_ln193_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address1 = zext_ln191_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = zext_ln183_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = zext_ln181_reg_639;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d0 = xor_ln237_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d0 = xor_ln235_reg_782;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_d0 = Key_q0;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d1 = xor_ln238_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d1 = xor_ln236_reg_787;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_d1 = Key_q1;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln187_fu_384_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln187_fu_384_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address0 = zext_ln216_fu_499_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address0 = zext_ln214_fu_466_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sbox_address1 = zext_ln217_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sbox_address1 = zext_ln215_fu_470_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln179_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln187_fu_384_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln220_fu_475_p1;

assign add_ln190_fu_398_p2 = ($signed(8'd252) + $signed(j_fu_390_p3));

assign add_ln191_fu_409_p2 = ($signed(8'd253) + $signed(j_fu_390_p3));

assign add_ln192_fu_446_p2 = ($signed(8'd254) + $signed(j_reg_672));

assign add_ln193_fu_456_p2 = ($signed(8'd255) + $signed(j_reg_672));

assign add_ln235_fu_479_p2 = ($signed(8'd240) + $signed(j_reg_672));

assign add_ln236_fu_489_p2 = ($signed(8'd241) + $signed(j_reg_672));

assign add_ln237_fu_537_p2 = ($signed(8'd242) + $signed(j_reg_672));

assign add_ln238_fu_547_p2 = ($signed(8'd243) + $signed(j_reg_672));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_3_fu_440_p2 = (6'd1 + i_1_reg_313);

assign i_fu_330_p2 = (i_0_reg_302 + 3'd1);

assign icmp_ln179_fu_324_p2 = ((i_0_reg_302 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_384_p2 = ((i_1_reg_313 == 6'd44) ? 1'b1 : 1'b0);

assign icmp_ln196_fu_424_p2 = ((trunc_ln187_fu_420_p1 == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_390_p3 = {{i_1_reg_313}, {2'd0}};

assign or_ln181_fu_353_p2 = (shl_ln_fu_340_p3 | 4'd1);

assign or_ln182_fu_364_p2 = (shl_ln_reg_623 | 4'd2);

assign or_ln183_fu_374_p2 = (shl_ln_reg_623 | 4'd3);

assign or_ln236_fu_573_p2 = (j_reg_672 | 8'd1);

assign or_ln237_fu_595_p2 = (j_reg_672 | 8'd2);

assign or_ln238_fu_605_p2 = (j_reg_672 | 8'd3);

assign shl_ln_fu_340_p3 = {{trunc_ln180_fu_336_p1}, {2'd0}};

assign tempa_0_2_fu_519_p3 = ((icmp_ln196_reg_696[0:0] === 1'b1) ? tempa_0_fu_507_p2 : tempa_0_3_reg_714);

assign tempa_0_fu_507_p2 = (sbox_q0 ^ Rcon_q0);

assign tempa_1_2_fu_513_p3 = ((icmp_ln196_reg_696[0:0] === 1'b1) ? sbox_q1 : tempa_1_reg_720);

assign tempa_2_2_fu_563_p3 = ((icmp_ln196_reg_696[0:0] === 1'b1) ? sbox_q0 : tempa_2_reg_736);

assign tempa_3_2_fu_557_p3 = ((icmp_ln196_reg_696[0:0] === 1'b1) ? sbox_q1 : tempa_3_reg_741);

assign trunc_ln180_fu_336_p1 = i_0_reg_302[1:0];

assign trunc_ln187_fu_420_p1 = i_1_reg_313[1:0];

assign xor_ln235_fu_525_p2 = (tempa_0_2_fu_519_p3 ^ RoundKey_q0);

assign xor_ln236_fu_531_p2 = (tempa_1_2_fu_513_p3 ^ RoundKey_q1);

assign xor_ln237_fu_583_p2 = (tempa_2_2_fu_563_p3 ^ RoundKey_q0);

assign xor_ln238_fu_589_p2 = (tempa_3_2_fu_557_p3 ^ RoundKey_q1);

assign zext_ln180_fu_348_p1 = shl_ln_fu_340_p3;

assign zext_ln181_fu_359_p1 = or_ln181_fu_353_p2;

assign zext_ln182_fu_369_p1 = or_ln182_fu_364_p2;

assign zext_ln183_fu_379_p1 = or_ln183_fu_374_p2;

assign zext_ln190_fu_404_p1 = add_ln190_fu_398_p2;

assign zext_ln191_fu_415_p1 = add_ln191_fu_409_p2;

assign zext_ln192_fu_451_p1 = add_ln192_fu_446_p2;

assign zext_ln193_fu_461_p1 = add_ln193_fu_456_p2;

assign zext_ln214_fu_466_p1 = tempa_1_reg_720;

assign zext_ln215_fu_470_p1 = RoundKey_q0;

assign zext_ln216_fu_499_p1 = tempa_3_reg_741;

assign zext_ln217_fu_503_p1 = tempa_0_3_reg_714;

assign zext_ln220_fu_475_p1 = lshr_ln_reg_704;

assign zext_ln235_1_fu_569_p1 = j_reg_672;

assign zext_ln235_fu_484_p1 = add_ln235_fu_479_p2;

assign zext_ln236_1_fu_578_p1 = or_ln236_fu_573_p2;

assign zext_ln236_fu_494_p1 = add_ln236_fu_489_p2;

assign zext_ln237_1_fu_600_p1 = or_ln237_fu_595_p2;

assign zext_ln237_fu_542_p1 = add_ln237_fu_537_p2;

assign zext_ln238_1_fu_610_p1 = or_ln238_fu_605_p2;

assign zext_ln238_fu_552_p1 = add_ln238_fu_547_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_623[1:0] <= 2'b00;
    zext_ln180_reg_629[1:0] <= 2'b00;
    zext_ln180_reg_629[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln181_reg_639[1:0] <= 2'b01;
    zext_ln181_reg_639[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln182_reg_649[1:0] <= 2'b10;
    zext_ln182_reg_649[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln183_reg_659[1:0] <= 2'b11;
    zext_ln183_reg_659[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_reg_672[1:0] <= 2'b00;
end

endmodule //KeyExpansion
