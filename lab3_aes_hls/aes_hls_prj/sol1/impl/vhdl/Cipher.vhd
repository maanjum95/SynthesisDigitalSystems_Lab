-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_AddRoundKey_fu_274_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_274_ap_done : STD_LOGIC;
    signal i_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_695 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln275_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln275_reg_700 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln274_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_327_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_708 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_addr_12_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln275_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_load_2_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal state_load_4_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal state_load_6_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal state_load_8_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_fu_372_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_765 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_6_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_770 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln317_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_13_reg_776 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_14_reg_781 : STD_LOGIC_VECTOR (3 downto 0);
    signal round_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal round_reg_786 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_15_reg_791 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_16_reg_796 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln328_1_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln328_1_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal xor_ln331_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln331_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_274_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_274_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_274_round : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_274_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_274_state_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_274_state_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_274_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_274_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AddRoundKey_fu_274_RoundKey_ce0 : STD_LOGIC;
    signal round_0_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_0_i_reg_241 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_i_reg_252 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i3_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln435_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AddRoundKey_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln276_1_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_2_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln318_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_397_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_417_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal xor_ln322_1_fu_492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln325_1_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_333_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln276_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln276_fu_345_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln319_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln319_1_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln319_2_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Tm_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln319_1_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln311_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tmp_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln322_2_fu_486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln322_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_1_fu_499_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_1_fu_519_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln311_1_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln325_2_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln325_fu_527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_2_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_2_fu_566_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln311_2_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln328_2_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln328_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Tm_3_fu_592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_604_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln311_3_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln331_1_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_3_fu_612_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        round : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Cipher_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component Cipher_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    grp_AddRoundKey_fu_274 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_274_ap_start,
        ap_done => grp_AddRoundKey_fu_274_ap_done,
        ap_idle => grp_AddRoundKey_fu_274_ap_idle,
        ap_ready => grp_AddRoundKey_fu_274_ap_ready,
        round => grp_AddRoundKey_fu_274_round,
        state_address0 => grp_AddRoundKey_fu_274_state_address0,
        state_ce0 => grp_AddRoundKey_fu_274_state_ce0,
        state_we0 => grp_AddRoundKey_fu_274_state_we0,
        state_d0 => grp_AddRoundKey_fu_274_state_d0,
        state_q0 => state_q0,
        RoundKey_address0 => grp_AddRoundKey_fu_274_RoundKey_address0,
        RoundKey_ce0 => grp_AddRoundKey_fu_274_RoundKey_ce0,
        RoundKey_q0 => RoundKey_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_1)))) then 
                    grp_AddRoundKey_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i3_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln435_fu_360_p2 = ap_const_lv1_0))) then 
                i_0_i3_reg_263 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_0_i3_reg_263 <= i_4_reg_765;
            end if; 
        end if;
    end process;

    i_0_i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln275_fu_321_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_241 <= i_reg_695;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_i_reg_241 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln274_fu_305_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_252 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_i_reg_252 <= j_reg_708;
            end if; 
        end if;
    end process;

    reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_291 <= state_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_291 <= state_q1;
            end if; 
        end if;
    end process;

    reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_298 <= state_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_298 <= state_q0;
            end if; 
        end if;
    end process;

    round_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    round_0_reg_229 <= round_reg_786;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    round_0_reg_229 <= ap_const_lv8_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_4_reg_765 <= i_4_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_695 <= i_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_708 <= j_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_286 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_1))) then
                round_reg_786 <= round_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln275_fu_321_p2 = ap_const_lv1_0))) then
                state_addr_12_reg_713 <= zext_ln276_1_fu_350_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_0))) then
                    state_addr_13_reg_776(3 downto 2) <= zext_ln318_fu_386_p1(4 - 1 downto 0)(3 downto 2);
                    state_addr_14_reg_781(3 downto 2) <= tmp_7_fu_397_p3(4 - 1 downto 0)(3 downto 2);
                    tmp_6_reg_770(4 downto 2) <= tmp_6_fu_378_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    state_addr_15_reg_791(3 downto 2) <= tmp_8_fu_417_p3(4 - 1 downto 0)(3 downto 2);
                    state_addr_16_reg_796(3 downto 2) <= tmp_9_fu_431_p3(4 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                state_load_2_reg_724 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                state_load_4_reg_734 <= state_q1;
                temp_1_reg_729 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                state_load_6_reg_744 <= state_q1;
                temp_2_reg_739 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                state_load_8_reg_754 <= state_q1;
                temp_3_reg_749 <= state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                xor_ln328_1_reg_801 <= xor_ln328_1_fu_586_p2;
                xor_ln331_reg_806 <= xor_ln331_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln274_fu_305_p2 = ap_const_lv1_0))) then
                    zext_ln275_reg_700(2 downto 0) <= zext_ln275_fu_317_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln275_reg_700(5 downto 3) <= "000";
    tmp_6_reg_770(1 downto 0) <= "00";
    state_addr_13_reg_776(1 downto 0) <= "00";
    state_addr_14_reg_781(1 downto 0) <= "01";
    state_addr_15_reg_791(1 downto 0) <= "10";
    state_addr_16_reg_796(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_AddRoundKey_fu_274_ap_done, ap_CS_fsm_state4, icmp_ln274_fu_305_p2, ap_CS_fsm_state5, icmp_ln275_fu_321_p2, ap_CS_fsm_state19, icmp_ln317_fu_366_p2, ap_CS_fsm_state23, ap_CS_fsm_state18, icmp_ln435_fu_360_p2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln274_fu_305_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln275_fu_321_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln435_fu_360_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    RoundKey_address0 <= grp_AddRoundKey_fu_274_RoundKey_address0;

    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state2, grp_AddRoundKey_fu_274_RoundKey_ce0, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            RoundKey_ce0 <= grp_AddRoundKey_fu_274_RoundKey_ce0;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Tm_1_fu_499_p2 <= (state_q0 xor reg_291);
    Tm_2_fu_546_p2 <= (state_q1 xor state_q0);
    Tm_3_fu_592_p2 <= (state_q1 xor reg_286);
    Tm_fu_440_p2 <= (reg_291 xor reg_286);
    Tmp_fu_452_p2 <= (xor_ln319_1_fu_446_p2 xor state_q1);
    add_ln276_fu_345_p2 <= std_logic_vector(unsigned(zext_ln275_reg_700) + unsigned(zext_ln276_fu_341_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AddRoundKey_fu_274_ap_done, ap_CS_fsm_state25)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AddRoundKey_fu_274_ap_done, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_AddRoundKey_fu_274_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddRoundKey_fu_274_ap_start <= grp_AddRoundKey_fu_274_ap_start_reg;

    grp_AddRoundKey_fu_274_round_assign_proc : process(ap_CS_fsm_state2, round_0_reg_229, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_AddRoundKey_fu_274_round <= ap_const_lv8_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_AddRoundKey_fu_274_round <= round_0_reg_229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_AddRoundKey_fu_274_round <= ap_const_lv8_0;
        else 
            grp_AddRoundKey_fu_274_round <= "XXXXXXXX";
        end if; 
    end process;

    i_4_fu_372_p2 <= std_logic_vector(unsigned(i_0_i3_reg_263) + unsigned(ap_const_lv3_1));
    i_fu_311_p2 <= std_logic_vector(unsigned(i_0_i_reg_241) + unsigned(ap_const_lv3_1));
    icmp_ln274_fu_305_p2 <= "1" when (i_0_i_reg_241 = ap_const_lv3_4) else "0";
    icmp_ln275_fu_321_p2 <= "1" when (j_0_i_reg_252 = ap_const_lv3_4) else "0";
    icmp_ln317_fu_366_p2 <= "1" when (i_0_i3_reg_263 = ap_const_lv3_4) else "0";
    icmp_ln435_fu_360_p2 <= "1" when (round_0_reg_229 = ap_const_lv8_A) else "0";
    j_fu_327_p2 <= std_logic_vector(unsigned(j_0_i_reg_252) + unsigned(ap_const_lv3_1));
    or_ln319_1_fu_412_p2 <= (tmp_6_reg_770 or ap_const_lv5_2);
    or_ln319_2_fu_426_p2 <= (tmp_6_reg_770 or ap_const_lv5_3);
    or_ln319_fu_391_p2 <= (tmp_6_fu_378_p3 or ap_const_lv5_1);
    round_fu_406_p2 <= std_logic_vector(unsigned(round_0_reg_229) + unsigned(ap_const_lv8_1));
    sbox_address0 <= zext_ln276_2_fu_355_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln311_1_fu_519_p3 <= 
        ap_const_lv8_1B when (tmp_2_fu_511_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln311_2_fu_566_p3 <= 
        ap_const_lv8_1B when (tmp_3_fu_558_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln311_3_fu_612_p3 <= 
        ap_const_lv8_1B when (tmp_4_fu_604_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln311_fu_472_p3 <= 
        ap_const_lv8_1B when (tmp_1_fu_464_p3(0) = '1') else 
        ap_const_lv8_0;
    shl_ln311_1_fu_505_p2 <= std_logic_vector(shift_left(unsigned(Tm_1_fu_499_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln311_2_fu_552_p2 <= std_logic_vector(shift_left(unsigned(Tm_2_fu_546_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln311_3_fu_598_p2 <= std_logic_vector(shift_left(unsigned(Tm_3_fu_592_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln311_fu_458_p2 <= std_logic_vector(shift_left(unsigned(Tm_fu_440_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));

    state_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state20, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, icmp_ln317_fu_366_p2, state_addr_13_reg_776, state_addr_15_reg_791, ap_CS_fsm_state21, grp_AddRoundKey_fu_274_state_address0, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state25, zext_ln276_1_fu_350_p1, zext_ln318_fu_386_p1, tmp_8_fu_417_p3, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address0 <= state_addr_15_reg_791;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address0 <= state_addr_13_reg_776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address0 <= tmp_8_fu_417_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_0))) then 
            state_address0 <= zext_ln318_fu_386_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= zext_ln276_1_fu_350_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_address0 <= grp_AddRoundKey_fu_274_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state20, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state4, state_addr_12_reg_713, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, icmp_ln317_fu_366_p2, state_addr_14_reg_781, state_addr_16_reg_796, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state22, ap_CS_fsm_state18, tmp_7_fu_397_p3, tmp_9_fu_431_p3, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address1 <= state_addr_16_reg_796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_address1 <= state_addr_14_reg_781;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            state_address1 <= tmp_9_fu_431_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_0))) then 
            state_address1 <= tmp_7_fu_397_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            state_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= state_addr_12_reg_713;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state20, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, icmp_ln317_fu_366_p2, ap_CS_fsm_state21, grp_AddRoundKey_fu_274_state_ce0, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_0)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_ce0 <= grp_AddRoundKey_fu_274_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state20, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, icmp_ln317_fu_366_p2, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln317_fu_366_p2 = ap_const_lv1_0)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(reg_291, ap_CS_fsm_state13, reg_298, ap_CS_fsm_state2, state_load_2_reg_724, state_load_4_reg_734, state_load_6_reg_744, state_load_8_reg_754, xor_ln328_1_reg_801, ap_CS_fsm_state21, grp_AddRoundKey_fu_274_state_d0, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, xor_ln322_1_fu_492_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d0 <= xor_ln328_1_reg_801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d0 <= xor_ln322_1_fu_492_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d0 <= reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d0 <= state_load_8_reg_754;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d0 <= state_load_6_reg_744;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= state_load_4_reg_734;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= state_load_2_reg_724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= reg_291;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_d0 <= grp_AddRoundKey_fu_274_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(sbox_q0, reg_286, reg_291, ap_CS_fsm_state13, reg_298, temp_1_reg_729, temp_2_reg_739, temp_3_reg_749, ap_CS_fsm_state21, xor_ln331_reg_806, ap_CS_fsm_state7, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, xor_ln325_1_fu_539_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d1 <= xor_ln331_reg_806;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            state_d1 <= xor_ln325_1_fu_539_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_d1 <= temp_3_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_d1 <= reg_291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_d1 <= temp_2_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= temp_1_reg_729;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d1 <= sbox_q0;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state21, grp_AddRoundKey_fu_274_state_we0, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_we0 <= grp_AddRoundKey_fu_274_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_464_p3 <= Tm_fu_440_p2(7 downto 7);
    tmp_2_fu_511_p3 <= Tm_1_fu_499_p2(7 downto 7);
    tmp_3_fu_558_p3 <= Tm_2_fu_546_p2(7 downto 7);
    tmp_4_fu_604_p3 <= Tm_3_fu_592_p2(7 downto 7);
    tmp_6_fu_378_p3 <= (i_0_i3_reg_263 & ap_const_lv2_0);
    tmp_7_fu_397_p3 <= (ap_const_lv59_0 & or_ln319_fu_391_p2);
    tmp_8_fu_417_p3 <= (ap_const_lv59_0 & or_ln319_1_fu_412_p2);
    tmp_9_fu_431_p3 <= (ap_const_lv59_0 & or_ln319_2_fu_426_p2);
    tmp_fu_333_p3 <= (j_0_i_reg_252 & ap_const_lv2_0);
    xor_ln319_1_fu_446_p2 <= (state_q0 xor Tm_fu_440_p2);
    xor_ln322_1_fu_492_p2 <= (xor_ln322_fu_480_p2 xor xor_ln322_2_fu_486_p2);
    xor_ln322_2_fu_486_p2 <= (shl_ln311_fu_458_p2 xor Tmp_fu_452_p2);
    xor_ln322_fu_480_p2 <= (select_ln311_fu_472_p3 xor reg_286);
    xor_ln325_1_fu_539_p2 <= (xor_ln325_fu_527_p2 xor xor_ln325_2_fu_533_p2);
    xor_ln325_2_fu_533_p2 <= (shl_ln311_1_fu_505_p2 xor Tmp_fu_452_p2);
    xor_ln325_fu_527_p2 <= (select_ln311_1_fu_519_p3 xor reg_291);
    xor_ln328_1_fu_586_p2 <= (xor_ln328_fu_574_p2 xor xor_ln328_2_fu_580_p2);
    xor_ln328_2_fu_580_p2 <= (shl_ln311_2_fu_552_p2 xor Tmp_fu_452_p2);
    xor_ln328_fu_574_p2 <= (state_q0 xor select_ln311_2_fu_566_p3);
    xor_ln331_1_fu_620_p2 <= (xor_ln319_1_fu_446_p2 xor shl_ln311_3_fu_598_p2);
    xor_ln331_fu_626_p2 <= (xor_ln331_1_fu_620_p2 xor select_ln311_3_fu_612_p3);
    zext_ln275_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_241),6));
    zext_ln276_1_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln276_fu_345_p2),64));
    zext_ln276_2_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln276_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_333_p3),6));
    zext_ln318_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_378_p3),64));
end behav;
