// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > round;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<8> > RoundKey_address0;
    sc_out< sc_logic > RoundKey_ce0;
    sc_in< sc_lv<8> > RoundKey_q0;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_88_p2;
    sc_signal< sc_lv<3> > i_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > shl_ln_fu_98_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_185;
    sc_signal< sc_lv<1> > icmp_ln263_fu_82_p2;
    sc_signal< sc_lv<6> > zext_ln264_fu_114_p1;
    sc_signal< sc_lv<6> > zext_ln264_reg_190;
    sc_signal< sc_lv<3> > j_fu_124_p2;
    sc_signal< sc_lv<3> > j_reg_198;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln264_fu_118_p2;
    sc_signal< sc_lv<4> > state_addr_reg_208;
    sc_signal< sc_lv<3> > i_0_reg_60;
    sc_signal< sc_lv<3> > j_0_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln265_1_fu_146_p1;
    sc_signal< sc_lv<64> > zext_ln265_3_fu_160_p1;
    sc_signal< sc_lv<2> > trunc_ln265_fu_94_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_106_p3;
    sc_signal< sc_lv<4> > zext_ln265_fu_130_p1;
    sc_signal< sc_lv<4> > add_ln265_fu_134_p2;
    sc_signal< sc_lv<12> > add_ln265_1_fu_139_p3;
    sc_signal< sc_lv<6> > zext_ln265_2_fu_151_p1;
    sc_signal< sc_lv<6> > add_ln265_2_fu_155_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_address0();
    void thread_RoundKey_ce0();
    void thread_add_ln265_1_fu_139_p3();
    void thread_add_ln265_2_fu_155_p2();
    void thread_add_ln265_fu_134_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_88_p2();
    void thread_icmp_ln263_fu_82_p2();
    void thread_icmp_ln264_fu_118_p2();
    void thread_j_fu_124_p2();
    void thread_shl_ln_fu_98_p3();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_tmp_s_fu_106_p3();
    void thread_trunc_ln265_fu_94_p1();
    void thread_zext_ln264_fu_114_p1();
    void thread_zext_ln265_1_fu_146_p1();
    void thread_zext_ln265_2_fu_151_p1();
    void thread_zext_ln265_3_fu_160_p1();
    void thread_zext_ln265_fu_130_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
