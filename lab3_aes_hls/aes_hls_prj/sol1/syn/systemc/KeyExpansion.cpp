// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "KeyExpansion.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic KeyExpansion::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic KeyExpansion::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> KeyExpansion::ap_ST_fsm_state1 = "1";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state2 = "10";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state3 = "100";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state4 = "1000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state5 = "10000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state6 = "100000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_1 = "1";
const sc_lv<1> KeyExpansion::ap_const_lv1_0 = "0";
const sc_lv<32> KeyExpansion::ap_const_lv32_2 = "10";
const sc_lv<32> KeyExpansion::ap_const_lv32_4 = "100";
const sc_lv<32> KeyExpansion::ap_const_lv32_5 = "101";
const sc_lv<32> KeyExpansion::ap_const_lv32_6 = "110";
const sc_lv<1> KeyExpansion::ap_const_lv1_1 = "1";
const sc_lv<32> KeyExpansion::ap_const_lv32_7 = "111";
const sc_lv<32> KeyExpansion::ap_const_lv32_8 = "1000";
const sc_lv<3> KeyExpansion::ap_const_lv3_0 = "000";
const sc_lv<32> KeyExpansion::ap_const_lv32_3 = "11";
const sc_lv<32> KeyExpansion::ap_const_lv32_9 = "1001";
const sc_lv<6> KeyExpansion::ap_const_lv6_4 = "100";
const sc_lv<3> KeyExpansion::ap_const_lv3_4 = "100";
const sc_lv<3> KeyExpansion::ap_const_lv3_1 = "1";
const sc_lv<2> KeyExpansion::ap_const_lv2_0 = "00";
const sc_lv<4> KeyExpansion::ap_const_lv4_1 = "1";
const sc_lv<4> KeyExpansion::ap_const_lv4_2 = "10";
const sc_lv<4> KeyExpansion::ap_const_lv4_3 = "11";
const sc_lv<6> KeyExpansion::ap_const_lv6_2C = "101100";
const sc_lv<8> KeyExpansion::ap_const_lv8_FC = "11111100";
const sc_lv<8> KeyExpansion::ap_const_lv8_FD = "11111101";
const sc_lv<6> KeyExpansion::ap_const_lv6_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_FE = "11111110";
const sc_lv<8> KeyExpansion::ap_const_lv8_FF = "11111111";
const sc_lv<8> KeyExpansion::ap_const_lv8_F0 = "11110000";
const sc_lv<8> KeyExpansion::ap_const_lv8_F1 = "11110001";
const sc_lv<8> KeyExpansion::ap_const_lv8_F2 = "11110010";
const sc_lv<8> KeyExpansion::ap_const_lv8_F3 = "11110011";
const sc_lv<8> KeyExpansion::ap_const_lv8_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_2 = "10";
const sc_lv<8> KeyExpansion::ap_const_lv8_3 = "11";
const bool KeyExpansion::ap_const_boolean_1 = true;

KeyExpansion::KeyExpansion(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new KeyExpansion_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    Rcon_U = new KeyExpansion_Rcon("Rcon_U");
    Rcon_U->clk(ap_clk);
    Rcon_U->reset(ap_rst);
    Rcon_U->address0(Rcon_address0);
    Rcon_U->ce0(Rcon_ce0);
    Rcon_U->q0(Rcon_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln180_fu_348_p1 );
    sensitive << ( zext_ln182_fu_369_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln181_fu_359_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln183_fu_379_p1 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Rcon_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln220_fu_475_p1 );

    SC_METHOD(thread_Rcon_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( zext_ln180_reg_629 );
    sensitive << ( zext_ln182_reg_649 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln190_fu_404_p1 );
    sensitive << ( zext_ln192_fu_451_p1 );
    sensitive << ( zext_ln235_fu_484_p1 );
    sensitive << ( zext_ln237_fu_542_p1 );
    sensitive << ( zext_ln235_1_fu_569_p1 );
    sensitive << ( zext_ln237_1_fu_600_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( zext_ln181_reg_639 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln183_reg_659 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln191_fu_415_p1 );
    sensitive << ( zext_ln193_fu_461_p1 );
    sensitive << ( zext_ln236_fu_494_p1 );
    sensitive << ( zext_ln238_fu_552_p1 );
    sensitive << ( zext_ln236_1_fu_578_p1 );
    sensitive << ( zext_ln238_1_fu_610_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_d0);
    sensitive << ( Key_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln235_reg_782 );
    sensitive << ( xor_ln237_reg_802 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_d1);
    sensitive << ( Key_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( xor_ln236_reg_787 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln238_reg_807 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_add_ln190_fu_398_p2);
    sensitive << ( j_fu_390_p3 );

    SC_METHOD(thread_add_ln191_fu_409_p2);
    sensitive << ( j_fu_390_p3 );

    SC_METHOD(thread_add_ln192_fu_446_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_add_ln193_fu_456_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_add_ln235_fu_479_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_add_ln236_fu_489_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_add_ln237_fu_537_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_add_ln238_fu_547_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln187_fu_384_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln187_fu_384_p2 );

    SC_METHOD(thread_i_3_fu_440_p2);
    sensitive << ( i_1_reg_313 );

    SC_METHOD(thread_i_fu_330_p2);
    sensitive << ( i_0_reg_302 );

    SC_METHOD(thread_icmp_ln179_fu_324_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_302 );

    SC_METHOD(thread_icmp_ln187_fu_384_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_1_reg_313 );

    SC_METHOD(thread_icmp_ln196_fu_424_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln187_fu_384_p2 );
    sensitive << ( trunc_ln187_fu_420_p1 );

    SC_METHOD(thread_j_fu_390_p3);
    sensitive << ( i_1_reg_313 );

    SC_METHOD(thread_or_ln181_fu_353_p2);
    sensitive << ( shl_ln_fu_340_p3 );

    SC_METHOD(thread_or_ln182_fu_364_p2);
    sensitive << ( shl_ln_reg_623 );

    SC_METHOD(thread_or_ln183_fu_374_p2);
    sensitive << ( shl_ln_reg_623 );

    SC_METHOD(thread_or_ln236_fu_573_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_or_ln237_fu_595_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_or_ln238_fu_605_p2);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln214_fu_466_p1 );
    sensitive << ( zext_ln216_fu_499_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln215_fu_470_p1 );
    sensitive << ( zext_ln217_fu_503_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_shl_ln_fu_340_p3);
    sensitive << ( trunc_ln180_fu_336_p1 );

    SC_METHOD(thread_tempa_0_2_fu_519_p3);
    sensitive << ( icmp_ln196_reg_696 );
    sensitive << ( tempa_0_3_reg_714 );
    sensitive << ( tempa_0_fu_507_p2 );

    SC_METHOD(thread_tempa_0_fu_507_p2);
    sensitive << ( sbox_q0 );
    sensitive << ( Rcon_q0 );

    SC_METHOD(thread_tempa_1_2_fu_513_p3);
    sensitive << ( sbox_q1 );
    sensitive << ( icmp_ln196_reg_696 );
    sensitive << ( tempa_1_reg_720 );

    SC_METHOD(thread_tempa_2_2_fu_563_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( icmp_ln196_reg_696 );
    sensitive << ( tempa_2_reg_736 );

    SC_METHOD(thread_tempa_3_2_fu_557_p3);
    sensitive << ( sbox_q1 );
    sensitive << ( icmp_ln196_reg_696 );
    sensitive << ( tempa_3_reg_741 );

    SC_METHOD(thread_trunc_ln180_fu_336_p1);
    sensitive << ( i_0_reg_302 );

    SC_METHOD(thread_trunc_ln187_fu_420_p1);
    sensitive << ( i_1_reg_313 );

    SC_METHOD(thread_xor_ln235_fu_525_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tempa_0_2_fu_519_p3 );

    SC_METHOD(thread_xor_ln236_fu_531_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( tempa_1_2_fu_513_p3 );

    SC_METHOD(thread_xor_ln237_fu_583_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tempa_2_2_fu_563_p3 );

    SC_METHOD(thread_xor_ln238_fu_589_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( tempa_3_2_fu_557_p3 );

    SC_METHOD(thread_zext_ln180_fu_348_p1);
    sensitive << ( shl_ln_fu_340_p3 );

    SC_METHOD(thread_zext_ln181_fu_359_p1);
    sensitive << ( or_ln181_fu_353_p2 );

    SC_METHOD(thread_zext_ln182_fu_369_p1);
    sensitive << ( or_ln182_fu_364_p2 );

    SC_METHOD(thread_zext_ln183_fu_379_p1);
    sensitive << ( or_ln183_fu_374_p2 );

    SC_METHOD(thread_zext_ln190_fu_404_p1);
    sensitive << ( add_ln190_fu_398_p2 );

    SC_METHOD(thread_zext_ln191_fu_415_p1);
    sensitive << ( add_ln191_fu_409_p2 );

    SC_METHOD(thread_zext_ln192_fu_451_p1);
    sensitive << ( add_ln192_fu_446_p2 );

    SC_METHOD(thread_zext_ln193_fu_461_p1);
    sensitive << ( add_ln193_fu_456_p2 );

    SC_METHOD(thread_zext_ln214_fu_466_p1);
    sensitive << ( tempa_1_reg_720 );

    SC_METHOD(thread_zext_ln215_fu_470_p1);
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_zext_ln216_fu_499_p1);
    sensitive << ( tempa_3_reg_741 );

    SC_METHOD(thread_zext_ln217_fu_503_p1);
    sensitive << ( tempa_0_3_reg_714 );

    SC_METHOD(thread_zext_ln220_fu_475_p1);
    sensitive << ( lshr_ln_reg_704 );

    SC_METHOD(thread_zext_ln235_1_fu_569_p1);
    sensitive << ( j_reg_672 );

    SC_METHOD(thread_zext_ln235_fu_484_p1);
    sensitive << ( add_ln235_fu_479_p2 );

    SC_METHOD(thread_zext_ln236_1_fu_578_p1);
    sensitive << ( or_ln236_fu_573_p2 );

    SC_METHOD(thread_zext_ln236_fu_494_p1);
    sensitive << ( add_ln236_fu_489_p2 );

    SC_METHOD(thread_zext_ln237_1_fu_600_p1);
    sensitive << ( or_ln237_fu_595_p2 );

    SC_METHOD(thread_zext_ln237_fu_542_p1);
    sensitive << ( add_ln237_fu_537_p2 );

    SC_METHOD(thread_zext_ln238_1_fu_610_p1);
    sensitive << ( or_ln238_fu_605_p2 );

    SC_METHOD(thread_zext_ln238_fu_552_p1);
    sensitive << ( add_ln238_fu_547_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln179_fu_324_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln187_fu_384_p2 );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "KeyExpansion_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "(port)RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_d0, "(port)RoundKey_d0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "(port)RoundKey_we1");
    sc_trace(mVcdFile, RoundKey_d1, "(port)RoundKey_d1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, Rcon_address0, "Rcon_address0");
    sc_trace(mVcdFile, Rcon_ce0, "Rcon_ce0");
    sc_trace(mVcdFile, Rcon_q0, "Rcon_q0");
    sc_trace(mVcdFile, i_fu_330_p2, "i_fu_330_p2");
    sc_trace(mVcdFile, i_reg_618, "i_reg_618");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, shl_ln_fu_340_p3, "shl_ln_fu_340_p3");
    sc_trace(mVcdFile, shl_ln_reg_623, "shl_ln_reg_623");
    sc_trace(mVcdFile, icmp_ln179_fu_324_p2, "icmp_ln179_fu_324_p2");
    sc_trace(mVcdFile, zext_ln180_fu_348_p1, "zext_ln180_fu_348_p1");
    sc_trace(mVcdFile, zext_ln180_reg_629, "zext_ln180_reg_629");
    sc_trace(mVcdFile, zext_ln181_fu_359_p1, "zext_ln181_fu_359_p1");
    sc_trace(mVcdFile, zext_ln181_reg_639, "zext_ln181_reg_639");
    sc_trace(mVcdFile, zext_ln182_fu_369_p1, "zext_ln182_fu_369_p1");
    sc_trace(mVcdFile, zext_ln182_reg_649, "zext_ln182_reg_649");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln183_fu_379_p1, "zext_ln183_fu_379_p1");
    sc_trace(mVcdFile, zext_ln183_reg_659, "zext_ln183_reg_659");
    sc_trace(mVcdFile, j_fu_390_p3, "j_fu_390_p3");
    sc_trace(mVcdFile, j_reg_672, "j_reg_672");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln187_fu_384_p2, "icmp_ln187_fu_384_p2");
    sc_trace(mVcdFile, icmp_ln196_fu_424_p2, "icmp_ln196_fu_424_p2");
    sc_trace(mVcdFile, icmp_ln196_reg_696, "icmp_ln196_reg_696");
    sc_trace(mVcdFile, lshr_ln_reg_704, "lshr_ln_reg_704");
    sc_trace(mVcdFile, i_3_fu_440_p2, "i_3_fu_440_p2");
    sc_trace(mVcdFile, i_3_reg_709, "i_3_reg_709");
    sc_trace(mVcdFile, tempa_0_3_reg_714, "tempa_0_3_reg_714");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tempa_1_reg_720, "tempa_1_reg_720");
    sc_trace(mVcdFile, tempa_2_reg_736, "tempa_2_reg_736");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tempa_3_reg_741, "tempa_3_reg_741");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, xor_ln235_fu_525_p2, "xor_ln235_fu_525_p2");
    sc_trace(mVcdFile, xor_ln235_reg_782, "xor_ln235_reg_782");
    sc_trace(mVcdFile, xor_ln236_fu_531_p2, "xor_ln236_fu_531_p2");
    sc_trace(mVcdFile, xor_ln236_reg_787, "xor_ln236_reg_787");
    sc_trace(mVcdFile, xor_ln237_fu_583_p2, "xor_ln237_fu_583_p2");
    sc_trace(mVcdFile, xor_ln237_reg_802, "xor_ln237_reg_802");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, xor_ln238_fu_589_p2, "xor_ln238_fu_589_p2");
    sc_trace(mVcdFile, xor_ln238_reg_807, "xor_ln238_reg_807");
    sc_trace(mVcdFile, i_0_reg_302, "i_0_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_313, "i_1_reg_313");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln190_fu_404_p1, "zext_ln190_fu_404_p1");
    sc_trace(mVcdFile, zext_ln191_fu_415_p1, "zext_ln191_fu_415_p1");
    sc_trace(mVcdFile, zext_ln192_fu_451_p1, "zext_ln192_fu_451_p1");
    sc_trace(mVcdFile, zext_ln193_fu_461_p1, "zext_ln193_fu_461_p1");
    sc_trace(mVcdFile, zext_ln214_fu_466_p1, "zext_ln214_fu_466_p1");
    sc_trace(mVcdFile, zext_ln215_fu_470_p1, "zext_ln215_fu_470_p1");
    sc_trace(mVcdFile, zext_ln220_fu_475_p1, "zext_ln220_fu_475_p1");
    sc_trace(mVcdFile, zext_ln235_fu_484_p1, "zext_ln235_fu_484_p1");
    sc_trace(mVcdFile, zext_ln236_fu_494_p1, "zext_ln236_fu_494_p1");
    sc_trace(mVcdFile, zext_ln216_fu_499_p1, "zext_ln216_fu_499_p1");
    sc_trace(mVcdFile, zext_ln217_fu_503_p1, "zext_ln217_fu_503_p1");
    sc_trace(mVcdFile, zext_ln237_fu_542_p1, "zext_ln237_fu_542_p1");
    sc_trace(mVcdFile, zext_ln238_fu_552_p1, "zext_ln238_fu_552_p1");
    sc_trace(mVcdFile, zext_ln235_1_fu_569_p1, "zext_ln235_1_fu_569_p1");
    sc_trace(mVcdFile, zext_ln236_1_fu_578_p1, "zext_ln236_1_fu_578_p1");
    sc_trace(mVcdFile, zext_ln237_1_fu_600_p1, "zext_ln237_1_fu_600_p1");
    sc_trace(mVcdFile, zext_ln238_1_fu_610_p1, "zext_ln238_1_fu_610_p1");
    sc_trace(mVcdFile, trunc_ln180_fu_336_p1, "trunc_ln180_fu_336_p1");
    sc_trace(mVcdFile, or_ln181_fu_353_p2, "or_ln181_fu_353_p2");
    sc_trace(mVcdFile, or_ln182_fu_364_p2, "or_ln182_fu_364_p2");
    sc_trace(mVcdFile, or_ln183_fu_374_p2, "or_ln183_fu_374_p2");
    sc_trace(mVcdFile, add_ln190_fu_398_p2, "add_ln190_fu_398_p2");
    sc_trace(mVcdFile, add_ln191_fu_409_p2, "add_ln191_fu_409_p2");
    sc_trace(mVcdFile, trunc_ln187_fu_420_p1, "trunc_ln187_fu_420_p1");
    sc_trace(mVcdFile, add_ln192_fu_446_p2, "add_ln192_fu_446_p2");
    sc_trace(mVcdFile, add_ln193_fu_456_p2, "add_ln193_fu_456_p2");
    sc_trace(mVcdFile, add_ln235_fu_479_p2, "add_ln235_fu_479_p2");
    sc_trace(mVcdFile, add_ln236_fu_489_p2, "add_ln236_fu_489_p2");
    sc_trace(mVcdFile, tempa_0_fu_507_p2, "tempa_0_fu_507_p2");
    sc_trace(mVcdFile, tempa_0_2_fu_519_p3, "tempa_0_2_fu_519_p3");
    sc_trace(mVcdFile, tempa_1_2_fu_513_p3, "tempa_1_2_fu_513_p3");
    sc_trace(mVcdFile, add_ln237_fu_537_p2, "add_ln237_fu_537_p2");
    sc_trace(mVcdFile, add_ln238_fu_547_p2, "add_ln238_fu_547_p2");
    sc_trace(mVcdFile, or_ln236_fu_573_p2, "or_ln236_fu_573_p2");
    sc_trace(mVcdFile, tempa_2_2_fu_563_p3, "tempa_2_2_fu_563_p3");
    sc_trace(mVcdFile, tempa_3_2_fu_557_p3, "tempa_3_2_fu_557_p3");
    sc_trace(mVcdFile, or_ln237_fu_595_p2, "or_ln237_fu_595_p2");
    sc_trace(mVcdFile, or_ln238_fu_605_p2, "or_ln238_fu_605_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

KeyExpansion::~KeyExpansion() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete Rcon_U;
}

void KeyExpansion::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_reg_302 = i_reg_618.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_302 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln179_fu_324_p2.read(), ap_const_lv1_1))) {
        i_1_reg_313 = ap_const_lv6_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_1_reg_313 = i_3_reg_709.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln187_fu_384_p2.read()))) {
        i_3_reg_709 = i_3_fu_440_p2.read();
        icmp_ln196_reg_696 = icmp_ln196_fu_424_p2.read();
        j_reg_672 = j_fu_390_p3.read();
        lshr_ln_reg_704 = i_1_reg_313.read().range(5, 2);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_618 = i_fu_330_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln179_fu_324_p2.read(), ap_const_lv1_0))) {
        shl_ln_reg_623 = shl_ln_fu_340_p3.read();
        zext_ln180_reg_629 = zext_ln180_fu_348_p1.read();
        zext_ln181_reg_639 = zext_ln181_fu_359_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tempa_0_3_reg_714 = RoundKey_q0.read();
        tempa_1_reg_720 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tempa_2_reg_736 = RoundKey_q0.read();
        tempa_3_reg_741 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        xor_ln235_reg_782 = xor_ln235_fu_525_p2.read();
        xor_ln236_reg_787 = xor_ln236_fu_531_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        xor_ln237_reg_802 = xor_ln237_fu_583_p2.read();
        xor_ln238_reg_807 = xor_ln238_fu_589_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        zext_ln182_reg_649 = zext_ln182_fu_369_p1.read();
        zext_ln183_reg_659 = zext_ln183_fu_379_p1.read();
    }
}

void KeyExpansion::thread_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address0 =  (sc_lv<4>) (zext_ln182_fu_369_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address0 =  (sc_lv<4>) (zext_ln180_fu_348_p1.read());
    } else {
        Key_address0 = "XXXX";
    }
}

void KeyExpansion::thread_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address1 =  (sc_lv<4>) (zext_ln183_fu_379_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address1 =  (sc_lv<4>) (zext_ln181_fu_359_p1.read());
    } else {
        Key_address1 = "XXXX";
    }
}

void KeyExpansion::thread_Key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce0 = ap_const_logic_1;
    } else {
        Key_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce1 = ap_const_logic_1;
    } else {
        Key_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Rcon_address0() {
    Rcon_address0 =  (sc_lv<4>) (zext_ln220_fu_475_p1.read());
}

void KeyExpansion::thread_Rcon_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Rcon_ce0 = ap_const_logic_1;
    } else {
        Rcon_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln237_1_fu_600_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln235_1_fu_569_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln237_fu_542_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln235_fu_484_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln192_fu_451_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln190_fu_404_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln182_reg_649.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln180_reg_629.read());
    } else {
        RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln238_1_fu_610_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln236_1_fu_578_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln238_fu_552_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln236_fu_494_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln193_fu_461_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln191_fu_415_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln183_reg_659.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln181_reg_639.read());
    } else {
        RoundKey_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d0 = xor_ln237_reg_802.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d0 = xor_ln235_reg_782.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_d0 = Key_q0.read();
    } else {
        RoundKey_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d1 = xor_ln238_reg_807.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d1 = xor_ln236_reg_787.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_d1 = Key_q1.read();
    } else {
        RoundKey_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we0 = ap_const_logic_1;
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we1 = ap_const_logic_1;
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_add_ln190_fu_398_p2() {
    add_ln190_fu_398_p2 = (!ap_const_lv8_FC.is_01() || !j_fu_390_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FC) + sc_biguint<8>(j_fu_390_p3.read()));
}

void KeyExpansion::thread_add_ln191_fu_409_p2() {
    add_ln191_fu_409_p2 = (!ap_const_lv8_FD.is_01() || !j_fu_390_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FD) + sc_biguint<8>(j_fu_390_p3.read()));
}

void KeyExpansion::thread_add_ln192_fu_446_p2() {
    add_ln192_fu_446_p2 = (!ap_const_lv8_FE.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FE) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_add_ln193_fu_456_p2() {
    add_ln193_fu_456_p2 = (!ap_const_lv8_FF.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_add_ln235_fu_479_p2() {
    add_ln235_fu_479_p2 = (!ap_const_lv8_F0.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F0) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_add_ln236_fu_489_p2() {
    add_ln236_fu_489_p2 = (!ap_const_lv8_F1.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F1) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_add_ln237_fu_537_p2() {
    add_ln237_fu_537_p2 = (!ap_const_lv8_F2.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F2) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_add_ln238_fu_547_p2() {
    add_ln238_fu_547_p2 = (!ap_const_lv8_F3.is_01() || !j_reg_672.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F3) + sc_biguint<8>(j_reg_672.read()));
}

void KeyExpansion::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void KeyExpansion::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void KeyExpansion::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void KeyExpansion::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void KeyExpansion::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void KeyExpansion::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void KeyExpansion::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void KeyExpansion::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void KeyExpansion::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void KeyExpansion::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void KeyExpansion::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln187_fu_384_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln187_fu_384_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void KeyExpansion::thread_i_3_fu_440_p2() {
    i_3_fu_440_p2 = (!ap_const_lv6_1.is_01() || !i_1_reg_313.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(i_1_reg_313.read()));
}

void KeyExpansion::thread_i_fu_330_p2() {
    i_fu_330_p2 = (!i_0_reg_302.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_302.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void KeyExpansion::thread_icmp_ln179_fu_324_p2() {
    icmp_ln179_fu_324_p2 = (!i_0_reg_302.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_302.read() == ap_const_lv3_4);
}

void KeyExpansion::thread_icmp_ln187_fu_384_p2() {
    icmp_ln187_fu_384_p2 = (!i_1_reg_313.read().is_01() || !ap_const_lv6_2C.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_313.read() == ap_const_lv6_2C);
}

void KeyExpansion::thread_icmp_ln196_fu_424_p2() {
    icmp_ln196_fu_424_p2 = (!trunc_ln187_fu_420_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln187_fu_420_p1.read() == ap_const_lv2_0);
}

void KeyExpansion::thread_j_fu_390_p3() {
    j_fu_390_p3 = esl_concat<6,2>(i_1_reg_313.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_or_ln181_fu_353_p2() {
    or_ln181_fu_353_p2 = (shl_ln_fu_340_p3.read() | ap_const_lv4_1);
}

void KeyExpansion::thread_or_ln182_fu_364_p2() {
    or_ln182_fu_364_p2 = (shl_ln_reg_623.read() | ap_const_lv4_2);
}

void KeyExpansion::thread_or_ln183_fu_374_p2() {
    or_ln183_fu_374_p2 = (shl_ln_reg_623.read() | ap_const_lv4_3);
}

void KeyExpansion::thread_or_ln236_fu_573_p2() {
    or_ln236_fu_573_p2 = (j_reg_672.read() | ap_const_lv8_1);
}

void KeyExpansion::thread_or_ln237_fu_595_p2() {
    or_ln237_fu_595_p2 = (j_reg_672.read() | ap_const_lv8_2);
}

void KeyExpansion::thread_or_ln238_fu_605_p2() {
    or_ln238_fu_605_p2 = (j_reg_672.read() | ap_const_lv8_3);
}

void KeyExpansion::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln216_fu_499_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address0 =  (sc_lv<8>) (zext_ln214_fu_466_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address1 =  (sc_lv<8>) (zext_ln217_fu_503_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address1 =  (sc_lv<8>) (zext_ln215_fu_470_p1.read());
    } else {
        sbox_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_shl_ln_fu_340_p3() {
    shl_ln_fu_340_p3 = esl_concat<2,2>(trunc_ln180_fu_336_p1.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_tempa_0_2_fu_519_p3() {
    tempa_0_2_fu_519_p3 = (!icmp_ln196_reg_696.read()[0].is_01())? sc_lv<8>(): ((icmp_ln196_reg_696.read()[0].to_bool())? tempa_0_fu_507_p2.read(): tempa_0_3_reg_714.read());
}

void KeyExpansion::thread_tempa_0_fu_507_p2() {
    tempa_0_fu_507_p2 = (Rcon_q0.read() ^ sbox_q0.read());
}

void KeyExpansion::thread_tempa_1_2_fu_513_p3() {
    tempa_1_2_fu_513_p3 = (!icmp_ln196_reg_696.read()[0].is_01())? sc_lv<8>(): ((icmp_ln196_reg_696.read()[0].to_bool())? sbox_q1.read(): tempa_1_reg_720.read());
}

void KeyExpansion::thread_tempa_2_2_fu_563_p3() {
    tempa_2_2_fu_563_p3 = (!icmp_ln196_reg_696.read()[0].is_01())? sc_lv<8>(): ((icmp_ln196_reg_696.read()[0].to_bool())? sbox_q0.read(): tempa_2_reg_736.read());
}

void KeyExpansion::thread_tempa_3_2_fu_557_p3() {
    tempa_3_2_fu_557_p3 = (!icmp_ln196_reg_696.read()[0].is_01())? sc_lv<8>(): ((icmp_ln196_reg_696.read()[0].to_bool())? sbox_q1.read(): tempa_3_reg_741.read());
}

void KeyExpansion::thread_trunc_ln180_fu_336_p1() {
    trunc_ln180_fu_336_p1 = i_0_reg_302.read().range(2-1, 0);
}

void KeyExpansion::thread_trunc_ln187_fu_420_p1() {
    trunc_ln187_fu_420_p1 = i_1_reg_313.read().range(2-1, 0);
}

void KeyExpansion::thread_xor_ln235_fu_525_p2() {
    xor_ln235_fu_525_p2 = (RoundKey_q0.read() ^ tempa_0_2_fu_519_p3.read());
}

void KeyExpansion::thread_xor_ln236_fu_531_p2() {
    xor_ln236_fu_531_p2 = (RoundKey_q1.read() ^ tempa_1_2_fu_513_p3.read());
}

void KeyExpansion::thread_xor_ln237_fu_583_p2() {
    xor_ln237_fu_583_p2 = (RoundKey_q0.read() ^ tempa_2_2_fu_563_p3.read());
}

void KeyExpansion::thread_xor_ln238_fu_589_p2() {
    xor_ln238_fu_589_p2 = (RoundKey_q1.read() ^ tempa_3_2_fu_557_p3.read());
}

void KeyExpansion::thread_zext_ln180_fu_348_p1() {
    zext_ln180_fu_348_p1 = esl_zext<64,4>(shl_ln_fu_340_p3.read());
}

void KeyExpansion::thread_zext_ln181_fu_359_p1() {
    zext_ln181_fu_359_p1 = esl_zext<64,4>(or_ln181_fu_353_p2.read());
}

void KeyExpansion::thread_zext_ln182_fu_369_p1() {
    zext_ln182_fu_369_p1 = esl_zext<64,4>(or_ln182_fu_364_p2.read());
}

void KeyExpansion::thread_zext_ln183_fu_379_p1() {
    zext_ln183_fu_379_p1 = esl_zext<64,4>(or_ln183_fu_374_p2.read());
}

void KeyExpansion::thread_zext_ln190_fu_404_p1() {
    zext_ln190_fu_404_p1 = esl_zext<64,8>(add_ln190_fu_398_p2.read());
}

void KeyExpansion::thread_zext_ln191_fu_415_p1() {
    zext_ln191_fu_415_p1 = esl_zext<64,8>(add_ln191_fu_409_p2.read());
}

void KeyExpansion::thread_zext_ln192_fu_451_p1() {
    zext_ln192_fu_451_p1 = esl_zext<64,8>(add_ln192_fu_446_p2.read());
}

void KeyExpansion::thread_zext_ln193_fu_461_p1() {
    zext_ln193_fu_461_p1 = esl_zext<64,8>(add_ln193_fu_456_p2.read());
}

void KeyExpansion::thread_zext_ln214_fu_466_p1() {
    zext_ln214_fu_466_p1 = esl_zext<64,8>(tempa_1_reg_720.read());
}

void KeyExpansion::thread_zext_ln215_fu_470_p1() {
    zext_ln215_fu_470_p1 = esl_zext<64,8>(RoundKey_q0.read());
}

void KeyExpansion::thread_zext_ln216_fu_499_p1() {
    zext_ln216_fu_499_p1 = esl_zext<64,8>(tempa_3_reg_741.read());
}

void KeyExpansion::thread_zext_ln217_fu_503_p1() {
    zext_ln217_fu_503_p1 = esl_zext<64,8>(tempa_0_3_reg_714.read());
}

void KeyExpansion::thread_zext_ln220_fu_475_p1() {
    zext_ln220_fu_475_p1 = esl_zext<64,4>(lshr_ln_reg_704.read());
}

void KeyExpansion::thread_zext_ln235_1_fu_569_p1() {
    zext_ln235_1_fu_569_p1 = esl_zext<64,8>(j_reg_672.read());
}

void KeyExpansion::thread_zext_ln235_fu_484_p1() {
    zext_ln235_fu_484_p1 = esl_zext<64,8>(add_ln235_fu_479_p2.read());
}

void KeyExpansion::thread_zext_ln236_1_fu_578_p1() {
    zext_ln236_1_fu_578_p1 = esl_zext<64,8>(or_ln236_fu_573_p2.read());
}

void KeyExpansion::thread_zext_ln236_fu_494_p1() {
    zext_ln236_fu_494_p1 = esl_zext<64,8>(add_ln236_fu_489_p2.read());
}

void KeyExpansion::thread_zext_ln237_1_fu_600_p1() {
    zext_ln237_1_fu_600_p1 = esl_zext<64,8>(or_ln237_fu_595_p2.read());
}

void KeyExpansion::thread_zext_ln237_fu_542_p1() {
    zext_ln237_fu_542_p1 = esl_zext<64,8>(add_ln237_fu_537_p2.read());
}

void KeyExpansion::thread_zext_ln238_1_fu_610_p1() {
    zext_ln238_1_fu_610_p1 = esl_zext<64,8>(or_ln238_fu_605_p2.read());
}

void KeyExpansion::thread_zext_ln238_fu_552_p1() {
    zext_ln238_fu_552_p1 = esl_zext<64,8>(add_ln238_fu_547_p2.read());
}

void KeyExpansion::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln179_fu_324_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln187_fu_384_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

