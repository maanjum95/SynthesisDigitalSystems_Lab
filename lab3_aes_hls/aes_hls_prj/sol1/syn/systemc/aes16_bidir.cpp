// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes16_bidir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes16_bidir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes16_bidir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> aes16_bidir::ap_ST_fsm_state1 = "1";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state2 = "10";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state3 = "100";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state4 = "1000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state5 = "10000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state6 = "100000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> aes16_bidir::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> aes16_bidir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes16_bidir::ap_const_lv32_1 = "1";
const sc_lv<1> aes16_bidir::ap_const_lv1_0 = "0";
const sc_lv<32> aes16_bidir::ap_const_lv32_2 = "10";
const sc_lv<32> aes16_bidir::ap_const_lv32_4 = "100";
const sc_lv<32> aes16_bidir::ap_const_lv32_7 = "111";
const sc_lv<32> aes16_bidir::ap_const_lv32_8 = "1000";
const sc_lv<3> aes16_bidir::ap_const_lv3_0 = "000";
const sc_lv<1> aes16_bidir::ap_const_lv1_1 = "1";
const sc_lv<5> aes16_bidir::ap_const_lv5_0 = "00000";
const sc_lv<32> aes16_bidir::ap_const_lv32_3 = "11";
const sc_lv<32> aes16_bidir::ap_const_lv32_5 = "101";
const sc_lv<32> aes16_bidir::ap_const_lv32_6 = "110";
const sc_lv<32> aes16_bidir::ap_const_lv32_9 = "1001";
const sc_lv<2> aes16_bidir::ap_const_lv2_2 = "10";
const sc_lv<2> aes16_bidir::ap_const_lv2_1 = "1";
const sc_lv<2> aes16_bidir::ap_const_lv2_0 = "00";
const sc_lv<2> aes16_bidir::ap_const_lv2_3 = "11";
const sc_lv<3> aes16_bidir::ap_const_lv3_4 = "100";
const sc_lv<3> aes16_bidir::ap_const_lv3_1 = "1";
const sc_lv<5> aes16_bidir::ap_const_lv5_10 = "10000";
const sc_lv<5> aes16_bidir::ap_const_lv5_1 = "1";
const sc_lv<4> aes16_bidir::ap_const_lv4_3 = "11";
const sc_lv<4> aes16_bidir::ap_const_lv4_2 = "10";
const sc_lv<4> aes16_bidir::ap_const_lv4_1 = "1";
const bool aes16_bidir::ap_const_boolean_1 = true;

aes16_bidir::aes16_bidir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    p_key_U = new aes16_bidir_p_key("p_key_U");
    p_key_U->clk(ap_clk);
    p_key_U->reset(ap_rst);
    p_key_U->address0(p_key_address0);
    p_key_U->ce0(p_key_ce0);
    p_key_U->we0(p_key_we0);
    p_key_U->d0(p_key_d0);
    p_key_U->q0(p_key_q0);
    p_key_U->address1(grp_KeyExpansion_fu_405_Key_address1);
    p_key_U->ce1(p_key_ce1);
    p_key_U->q1(p_key_q1);
    p_text_U = new aes16_bidir_p_key("p_text_U");
    p_text_U->clk(ap_clk);
    p_text_U->reset(ap_rst);
    p_text_U->address0(p_text_address0);
    p_text_U->ce0(p_text_ce0);
    p_text_U->we0(p_text_we0);
    p_text_U->d0(p_text_d0);
    p_text_U->q0(p_text_q0);
    p_text_U->address1(p_text_address1);
    p_text_U->ce1(p_text_ce1);
    p_text_U->q1(p_text_q1);
    p_iv_U = new AES_CTR_xcrypt_buffe_buffer("p_iv_U");
    p_iv_U->clk(ap_clk);
    p_iv_U->reset(ap_rst);
    p_iv_U->address0(p_iv_address0);
    p_iv_U->ce0(p_iv_ce0);
    p_iv_U->we0(p_iv_we0);
    p_iv_U->d0(p_iv_d0);
    p_iv_U->q0(p_iv_q0);
    ctx_RoundKey_U = new aes16_bidir_ctx_RoundKey("ctx_RoundKey_U");
    ctx_RoundKey_U->clk(ap_clk);
    ctx_RoundKey_U->reset(ap_rst);
    ctx_RoundKey_U->address0(ctx_RoundKey_address0);
    ctx_RoundKey_U->ce0(ctx_RoundKey_ce0);
    ctx_RoundKey_U->we0(ctx_RoundKey_we0);
    ctx_RoundKey_U->d0(grp_KeyExpansion_fu_405_RoundKey_d0);
    ctx_RoundKey_U->q0(ctx_RoundKey_q0);
    ctx_RoundKey_U->address1(grp_KeyExpansion_fu_405_RoundKey_address1);
    ctx_RoundKey_U->ce1(ctx_RoundKey_ce1);
    ctx_RoundKey_U->we1(ctx_RoundKey_we1);
    ctx_RoundKey_U->d1(grp_KeyExpansion_fu_405_RoundKey_d1);
    ctx_RoundKey_U->q1(ctx_RoundKey_q1);
    ctx_Iv_U = new aes16_bidir_p_key("ctx_Iv_U");
    ctx_Iv_U->clk(ap_clk);
    ctx_Iv_U->reset(ap_rst);
    ctx_Iv_U->address0(ctx_Iv_address0);
    ctx_Iv_U->ce0(ctx_Iv_ce0);
    ctx_Iv_U->we0(ctx_Iv_we0);
    ctx_Iv_U->d0(ctx_Iv_d0);
    ctx_Iv_U->q0(ctx_Iv_q0);
    ctx_Iv_U->address1(ctx_Iv_address1);
    ctx_Iv_U->ce1(ctx_Iv_ce1);
    ctx_Iv_U->q1(ctx_Iv_q1);
    grp_AES_CTR_xcrypt_buffe_fu_396 = new AES_CTR_xcrypt_buffe("grp_AES_CTR_xcrypt_buffe_fu_396");
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_clk(ap_clk);
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_rst(ap_rst);
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_start(grp_AES_CTR_xcrypt_buffe_fu_396_ap_start);
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_done(grp_AES_CTR_xcrypt_buffe_fu_396_ap_done);
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_idle(grp_AES_CTR_xcrypt_buffe_fu_396_ap_idle);
    grp_AES_CTR_xcrypt_buffe_fu_396->ap_ready(grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_RoundKey_q0(ctx_RoundKey_q0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0);
    grp_AES_CTR_xcrypt_buffe_fu_396->ctx_Iv_q0(ctx_Iv_q0);
    grp_AES_CTR_xcrypt_buffe_fu_396->buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0);
    grp_AES_CTR_xcrypt_buffe_fu_396->buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_396->buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0);
    grp_AES_CTR_xcrypt_buffe_fu_396->buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0);
    grp_AES_CTR_xcrypt_buffe_fu_396->buf_r_q0(p_text_q0);
    grp_KeyExpansion_fu_405 = new KeyExpansion("grp_KeyExpansion_fu_405");
    grp_KeyExpansion_fu_405->ap_clk(ap_clk);
    grp_KeyExpansion_fu_405->ap_rst(ap_rst);
    grp_KeyExpansion_fu_405->ap_start(grp_KeyExpansion_fu_405_ap_start);
    grp_KeyExpansion_fu_405->ap_done(grp_KeyExpansion_fu_405_ap_done);
    grp_KeyExpansion_fu_405->ap_idle(grp_KeyExpansion_fu_405_ap_idle);
    grp_KeyExpansion_fu_405->ap_ready(grp_KeyExpansion_fu_405_ap_ready);
    grp_KeyExpansion_fu_405->RoundKey_address0(grp_KeyExpansion_fu_405_RoundKey_address0);
    grp_KeyExpansion_fu_405->RoundKey_ce0(grp_KeyExpansion_fu_405_RoundKey_ce0);
    grp_KeyExpansion_fu_405->RoundKey_we0(grp_KeyExpansion_fu_405_RoundKey_we0);
    grp_KeyExpansion_fu_405->RoundKey_d0(grp_KeyExpansion_fu_405_RoundKey_d0);
    grp_KeyExpansion_fu_405->RoundKey_q0(ctx_RoundKey_q0);
    grp_KeyExpansion_fu_405->RoundKey_address1(grp_KeyExpansion_fu_405_RoundKey_address1);
    grp_KeyExpansion_fu_405->RoundKey_ce1(grp_KeyExpansion_fu_405_RoundKey_ce1);
    grp_KeyExpansion_fu_405->RoundKey_we1(grp_KeyExpansion_fu_405_RoundKey_we1);
    grp_KeyExpansion_fu_405->RoundKey_d1(grp_KeyExpansion_fu_405_RoundKey_d1);
    grp_KeyExpansion_fu_405->RoundKey_q1(ctx_RoundKey_q1);
    grp_KeyExpansion_fu_405->Key_address0(grp_KeyExpansion_fu_405_Key_address0);
    grp_KeyExpansion_fu_405->Key_ce0(grp_KeyExpansion_fu_405_Key_ce0);
    grp_KeyExpansion_fu_405->Key_q0(p_key_q0);
    grp_KeyExpansion_fu_405->Key_address1(grp_KeyExpansion_fu_405_Key_address1);
    grp_KeyExpansion_fu_405->Key_ce1(grp_KeyExpansion_fu_405_Key_ce1);
    grp_KeyExpansion_fu_405->Key_q1(p_key_q1);
    aes16_bidir_mux_42_32_1_1_U16 = new aes16_bidir_mux_42_32_1_1<1,1,32,32,32,32,2,32>("aes16_bidir_mux_42_32_1_1_U16");
    aes16_bidir_mux_42_32_1_1_U16->din0(key_0);
    aes16_bidir_mux_42_32_1_1_U16->din1(key_1);
    aes16_bidir_mux_42_32_1_1_U16->din2(key_2);
    aes16_bidir_mux_42_32_1_1_U16->din3(key_3);
    aes16_bidir_mux_42_32_1_1_U16->din4(trunc_ln25_fu_427_p1);
    aes16_bidir_mux_42_32_1_1_U16->dout(tmp_fu_431_p6);
    aes16_bidir_mux_42_32_1_1_U17 = new aes16_bidir_mux_42_32_1_1<1,1,32,32,32,32,2,32>("aes16_bidir_mux_42_32_1_1_U17");
    aes16_bidir_mux_42_32_1_1_U17->din0(inout_0_i);
    aes16_bidir_mux_42_32_1_1_U17->din1(inout_1_i);
    aes16_bidir_mux_42_32_1_1_U17->din2(inout_2_i);
    aes16_bidir_mux_42_32_1_1_U17->din3(inout_3_i);
    aes16_bidir_mux_42_32_1_1_U17->din4(trunc_ln25_fu_427_p1);
    aes16_bidir_mux_42_32_1_1_U17->dout(tmp_1_fu_453_p6);
    aes16_bidir_mux_42_32_1_1_U18 = new aes16_bidir_mux_42_32_1_1<1,1,32,32,32,32,2,32>("aes16_bidir_mux_42_32_1_1_U18");
    aes16_bidir_mux_42_32_1_1_U18->din0(iv_0_i);
    aes16_bidir_mux_42_32_1_1_U18->din1(iv_1_i);
    aes16_bidir_mux_42_32_1_1_U18->din2(iv_2_i);
    aes16_bidir_mux_42_32_1_1_U18->din3(iv_3_i);
    aes16_bidir_mux_42_32_1_1_U18->din4(trunc_ln25_fu_427_p1);
    aes16_bidir_mux_42_32_1_1_U18->dout(tmp_2_fu_467_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln25_fu_523_p2);
    sensitive << ( shl_ln25_1_reg_677 );
    sensitive << ( zext_ln24_fu_481_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln54_fu_572_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln54_fu_572_p2 );

    SC_METHOD(thread_ctx_Iv_address0);
    sensitive << ( zext_ln249_reg_708 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln55_fu_602_p1 );
    sensitive << ( zext_ln55_3_fu_631_p1 );

    SC_METHOD(thread_ctx_Iv_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln55_1_fu_614_p1 );
    sensitive << ( zext_ln55_2_fu_625_p1 );

    SC_METHOD(thread_ctx_Iv_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_Iv_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ctx_Iv_d0);
    sensitive << ( p_iv_q0 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_Iv_we0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0 );
    sensitive << ( grp_KeyExpansion_fu_405_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0 );
    sensitive << ( grp_KeyExpansion_fu_405_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( grp_KeyExpansion_fu_405_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_RoundKey_we0);
    sensitive << ( grp_KeyExpansion_fu_405_RoundKey_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_RoundKey_we1);
    sensitive << ( grp_KeyExpansion_fu_405_RoundKey_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_AES_CTR_xcrypt_buffe_fu_396_ap_start);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg );

    SC_METHOD(thread_grp_KeyExpansion_fu_405_ap_start);
    sensitive << ( grp_KeyExpansion_fu_405_ap_start_reg );

    SC_METHOD(thread_i_2_fu_421_p2);
    sensitive << ( i_0_reg_352 );

    SC_METHOD(thread_i_fu_578_p2);
    sensitive << ( i_1_reg_385 );

    SC_METHOD(thread_icmp_ln23_fu_415_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_352 );

    SC_METHOD(thread_icmp_ln249_fu_555_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k_0_i_reg_374 );

    SC_METHOD(thread_icmp_ln24_fu_485_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_363 );

    SC_METHOD(thread_icmp_ln54_fu_572_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_1_reg_385 );

    SC_METHOD(thread_inout_0_o);
    sensitive << ( inout_0_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln55_5_fu_636_p5 );

    SC_METHOD(thread_inout_0_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_inout_1_o);
    sensitive << ( inout_1_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln55_5_fu_636_p5 );

    SC_METHOD(thread_inout_1_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_inout_2_o);
    sensitive << ( inout_2_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln55_5_fu_636_p5 );

    SC_METHOD(thread_inout_2_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_inout_3_o);
    sensitive << ( inout_3_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln55_5_fu_636_p5 );

    SC_METHOD(thread_inout_3_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_iv_0_o);
    sensitive << ( iv_0_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln59_2_fu_650_p5 );

    SC_METHOD(thread_iv_0_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_iv_1_o);
    sensitive << ( iv_1_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln59_2_fu_650_p5 );

    SC_METHOD(thread_iv_1_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_iv_2_o);
    sensitive << ( iv_2_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln59_2_fu_650_p5 );

    SC_METHOD(thread_iv_2_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_iv_3_o);
    sensitive << ( iv_3_i );
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( or_ln59_2_fu_650_p5 );

    SC_METHOD(thread_iv_3_o_ap_vld);
    sensitive << ( trunc_ln55_reg_726 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_k_1_fu_491_p2);
    sensitive << ( k_0_reg_363 );

    SC_METHOD(thread_k_fu_561_p2);
    sensitive << ( k_0_i_reg_374 );

    SC_METHOD(thread_lshr_ln25_fu_513_p2);
    sensitive << ( tmp_reg_672 );
    sensitive << ( zext_ln25_1_fu_509_p1 );

    SC_METHOD(thread_lshr_ln26_fu_535_p2);
    sensitive << ( tmp_1_reg_682 );
    sensitive << ( zext_ln25_1_fu_509_p1 );

    SC_METHOD(thread_lshr_ln27_fu_545_p2);
    sensitive << ( tmp_2_reg_687 );
    sensitive << ( zext_ln25_1_fu_509_p1 );

    SC_METHOD(thread_or_ln55_1_fu_608_p2);
    sensitive << ( shl_ln1_fu_588_p3 );

    SC_METHOD(thread_or_ln55_2_fu_620_p2);
    sensitive << ( shl_ln1_reg_730 );

    SC_METHOD(thread_or_ln55_5_fu_636_p5);
    sensitive << ( p_text_q0 );
    sensitive << ( p_text_load_reg_756 );
    sensitive << ( p_text_q1 );
    sensitive << ( p_text_load_1_reg_761 );

    SC_METHOD(thread_or_ln55_fu_596_p2);
    sensitive << ( shl_ln1_fu_588_p3 );

    SC_METHOD(thread_or_ln59_2_fu_650_p5);
    sensitive << ( ctx_Iv_q0 );
    sensitive << ( ctx_Iv_load_reg_776 );
    sensitive << ( ctx_Iv_q1 );
    sensitive << ( ctx_Iv_load_1_reg_781 );

    SC_METHOD(thread_p_iv_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln249_fu_567_p1 );
    sensitive << ( zext_ln25_fu_528_p1 );

    SC_METHOD(thread_p_iv_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_iv_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( lshr_ln27_fu_545_p2 );

    SC_METHOD(thread_p_iv_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln24_fu_485_p2 );

    SC_METHOD(thread_p_key_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_KeyExpansion_fu_405_Key_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln25_fu_528_p1 );

    SC_METHOD(thread_p_key_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_KeyExpansion_fu_405_Key_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_key_ce1);
    sensitive << ( grp_KeyExpansion_fu_405_Key_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_key_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( lshr_ln25_fu_513_p2 );

    SC_METHOD(thread_p_key_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln24_fu_485_p2 );

    SC_METHOD(thread_p_text_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( zext_ln25_fu_528_p1 );
    sensitive << ( zext_ln55_fu_602_p1 );
    sensitive << ( zext_ln55_3_fu_631_p1 );

    SC_METHOD(thread_p_text_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln55_1_fu_614_p1 );
    sensitive << ( zext_ln55_2_fu_625_p1 );

    SC_METHOD(thread_p_text_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_p_text_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_p_text_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( trunc_ln26_fu_540_p1 );

    SC_METHOD(thread_p_text_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0 );
    sensitive << ( icmp_ln24_fu_485_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_shl_ln1_fu_588_p3);
    sensitive << ( trunc_ln55_fu_584_p1 );

    SC_METHOD(thread_shl_ln25_1_fu_445_p3);
    sensitive << ( trunc_ln25_fu_427_p1 );

    SC_METHOD(thread_shl_ln_fu_501_p3);
    sensitive << ( trunc_ln25_1_fu_497_p1 );

    SC_METHOD(thread_trunc_ln25_1_fu_497_p1);
    sensitive << ( k_0_reg_363 );

    SC_METHOD(thread_trunc_ln25_fu_427_p1);
    sensitive << ( i_0_reg_352 );

    SC_METHOD(thread_trunc_ln26_fu_540_p1);
    sensitive << ( lshr_ln26_fu_535_p2 );

    SC_METHOD(thread_trunc_ln55_fu_584_p1);
    sensitive << ( i_1_reg_385 );

    SC_METHOD(thread_zext_ln249_fu_567_p1);
    sensitive << ( k_0_i_reg_374 );

    SC_METHOD(thread_zext_ln24_fu_481_p1);
    sensitive << ( k_0_reg_363 );

    SC_METHOD(thread_zext_ln25_1_fu_509_p1);
    sensitive << ( shl_ln_fu_501_p3 );

    SC_METHOD(thread_zext_ln25_fu_528_p1);
    sensitive << ( add_ln25_fu_523_p2 );

    SC_METHOD(thread_zext_ln55_1_fu_614_p1);
    sensitive << ( or_ln55_1_fu_608_p2 );

    SC_METHOD(thread_zext_ln55_2_fu_625_p1);
    sensitive << ( or_ln55_2_fu_620_p2 );

    SC_METHOD(thread_zext_ln55_3_fu_631_p1);
    sensitive << ( shl_ln1_reg_730 );

    SC_METHOD(thread_zext_ln55_fu_602_p1);
    sensitive << ( or_ln55_fu_596_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln23_fu_415_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln249_fu_555_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln54_fu_572_p2 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_396_ap_done );
    sensitive << ( grp_KeyExpansion_fu_405_ap_done );
    sensitive << ( icmp_ln24_fu_485_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg = SC_LOGIC_0;
    grp_KeyExpansion_fu_405_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes16_bidir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, key_0, "(port)key_0");
    sc_trace(mVcdFile, key_1, "(port)key_1");
    sc_trace(mVcdFile, key_2, "(port)key_2");
    sc_trace(mVcdFile, key_3, "(port)key_3");
    sc_trace(mVcdFile, inout_0_i, "(port)inout_0_i");
    sc_trace(mVcdFile, inout_0_o, "(port)inout_0_o");
    sc_trace(mVcdFile, inout_0_o_ap_vld, "(port)inout_0_o_ap_vld");
    sc_trace(mVcdFile, inout_1_i, "(port)inout_1_i");
    sc_trace(mVcdFile, inout_1_o, "(port)inout_1_o");
    sc_trace(mVcdFile, inout_1_o_ap_vld, "(port)inout_1_o_ap_vld");
    sc_trace(mVcdFile, inout_2_i, "(port)inout_2_i");
    sc_trace(mVcdFile, inout_2_o, "(port)inout_2_o");
    sc_trace(mVcdFile, inout_2_o_ap_vld, "(port)inout_2_o_ap_vld");
    sc_trace(mVcdFile, inout_3_i, "(port)inout_3_i");
    sc_trace(mVcdFile, inout_3_o, "(port)inout_3_o");
    sc_trace(mVcdFile, inout_3_o_ap_vld, "(port)inout_3_o_ap_vld");
    sc_trace(mVcdFile, iv_0_i, "(port)iv_0_i");
    sc_trace(mVcdFile, iv_0_o, "(port)iv_0_o");
    sc_trace(mVcdFile, iv_0_o_ap_vld, "(port)iv_0_o_ap_vld");
    sc_trace(mVcdFile, iv_1_i, "(port)iv_1_i");
    sc_trace(mVcdFile, iv_1_o, "(port)iv_1_o");
    sc_trace(mVcdFile, iv_1_o_ap_vld, "(port)iv_1_o_ap_vld");
    sc_trace(mVcdFile, iv_2_i, "(port)iv_2_i");
    sc_trace(mVcdFile, iv_2_o, "(port)iv_2_o");
    sc_trace(mVcdFile, iv_2_o_ap_vld, "(port)iv_2_o_ap_vld");
    sc_trace(mVcdFile, iv_3_i, "(port)iv_3_i");
    sc_trace(mVcdFile, iv_3_o, "(port)iv_3_o");
    sc_trace(mVcdFile, iv_3_o_ap_vld, "(port)iv_3_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_2_fu_421_p2, "i_2_fu_421_p2");
    sc_trace(mVcdFile, i_2_reg_667, "i_2_reg_667");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_431_p6, "tmp_fu_431_p6");
    sc_trace(mVcdFile, tmp_reg_672, "tmp_reg_672");
    sc_trace(mVcdFile, icmp_ln23_fu_415_p2, "icmp_ln23_fu_415_p2");
    sc_trace(mVcdFile, shl_ln25_1_fu_445_p3, "shl_ln25_1_fu_445_p3");
    sc_trace(mVcdFile, shl_ln25_1_reg_677, "shl_ln25_1_reg_677");
    sc_trace(mVcdFile, tmp_1_fu_453_p6, "tmp_1_fu_453_p6");
    sc_trace(mVcdFile, tmp_1_reg_682, "tmp_1_reg_682");
    sc_trace(mVcdFile, tmp_2_fu_467_p6, "tmp_2_fu_467_p6");
    sc_trace(mVcdFile, tmp_2_reg_687, "tmp_2_reg_687");
    sc_trace(mVcdFile, k_1_fu_491_p2, "k_1_fu_491_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, k_fu_561_p2, "k_fu_561_p2");
    sc_trace(mVcdFile, k_reg_703, "k_reg_703");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln249_fu_567_p1, "zext_ln249_fu_567_p1");
    sc_trace(mVcdFile, zext_ln249_reg_708, "zext_ln249_reg_708");
    sc_trace(mVcdFile, icmp_ln249_fu_555_p2, "icmp_ln249_fu_555_p2");
    sc_trace(mVcdFile, i_fu_578_p2, "i_fu_578_p2");
    sc_trace(mVcdFile, i_reg_721, "i_reg_721");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, trunc_ln55_fu_584_p1, "trunc_ln55_fu_584_p1");
    sc_trace(mVcdFile, trunc_ln55_reg_726, "trunc_ln55_reg_726");
    sc_trace(mVcdFile, icmp_ln54_fu_572_p2, "icmp_ln54_fu_572_p2");
    sc_trace(mVcdFile, shl_ln1_fu_588_p3, "shl_ln1_fu_588_p3");
    sc_trace(mVcdFile, shl_ln1_reg_730, "shl_ln1_reg_730");
    sc_trace(mVcdFile, p_text_q0, "p_text_q0");
    sc_trace(mVcdFile, p_text_load_reg_756, "p_text_load_reg_756");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, p_text_q1, "p_text_q1");
    sc_trace(mVcdFile, p_text_load_1_reg_761, "p_text_load_1_reg_761");
    sc_trace(mVcdFile, ctx_Iv_q0, "ctx_Iv_q0");
    sc_trace(mVcdFile, ctx_Iv_load_reg_776, "ctx_Iv_load_reg_776");
    sc_trace(mVcdFile, ctx_Iv_q1, "ctx_Iv_q1");
    sc_trace(mVcdFile, ctx_Iv_load_1_reg_781, "ctx_Iv_load_1_reg_781");
    sc_trace(mVcdFile, p_key_address0, "p_key_address0");
    sc_trace(mVcdFile, p_key_ce0, "p_key_ce0");
    sc_trace(mVcdFile, p_key_we0, "p_key_we0");
    sc_trace(mVcdFile, p_key_d0, "p_key_d0");
    sc_trace(mVcdFile, p_key_q0, "p_key_q0");
    sc_trace(mVcdFile, p_key_ce1, "p_key_ce1");
    sc_trace(mVcdFile, p_key_q1, "p_key_q1");
    sc_trace(mVcdFile, p_text_address0, "p_text_address0");
    sc_trace(mVcdFile, p_text_ce0, "p_text_ce0");
    sc_trace(mVcdFile, p_text_we0, "p_text_we0");
    sc_trace(mVcdFile, p_text_d0, "p_text_d0");
    sc_trace(mVcdFile, p_text_address1, "p_text_address1");
    sc_trace(mVcdFile, p_text_ce1, "p_text_ce1");
    sc_trace(mVcdFile, p_iv_address0, "p_iv_address0");
    sc_trace(mVcdFile, p_iv_ce0, "p_iv_ce0");
    sc_trace(mVcdFile, p_iv_we0, "p_iv_we0");
    sc_trace(mVcdFile, p_iv_d0, "p_iv_d0");
    sc_trace(mVcdFile, p_iv_q0, "p_iv_q0");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_we0, "ctx_RoundKey_we0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_we1, "ctx_RoundKey_we1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "ctx_RoundKey_q1");
    sc_trace(mVcdFile, ctx_Iv_address0, "ctx_Iv_address0");
    sc_trace(mVcdFile, ctx_Iv_ce0, "ctx_Iv_ce0");
    sc_trace(mVcdFile, ctx_Iv_we0, "ctx_Iv_we0");
    sc_trace(mVcdFile, ctx_Iv_d0, "ctx_Iv_d0");
    sc_trace(mVcdFile, ctx_Iv_address1, "ctx_Iv_address1");
    sc_trace(mVcdFile, ctx_Iv_ce1, "ctx_Iv_ce1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ap_start, "grp_AES_CTR_xcrypt_buffe_fu_396_ap_start");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ap_done, "grp_AES_CTR_xcrypt_buffe_fu_396_ap_done");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ap_idle, "grp_AES_CTR_xcrypt_buffe_fu_396_ap_idle");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready, "grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0, "grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0, "grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0, "grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0, "grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0, "grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_ap_start, "grp_KeyExpansion_fu_405_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_ap_done, "grp_KeyExpansion_fu_405_ap_done");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_ap_idle, "grp_KeyExpansion_fu_405_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_ap_ready, "grp_KeyExpansion_fu_405_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_address0, "grp_KeyExpansion_fu_405_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_ce0, "grp_KeyExpansion_fu_405_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_we0, "grp_KeyExpansion_fu_405_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_d0, "grp_KeyExpansion_fu_405_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_address1, "grp_KeyExpansion_fu_405_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_ce1, "grp_KeyExpansion_fu_405_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_we1, "grp_KeyExpansion_fu_405_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_RoundKey_d1, "grp_KeyExpansion_fu_405_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_Key_address0, "grp_KeyExpansion_fu_405_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_Key_ce0, "grp_KeyExpansion_fu_405_Key_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_Key_address1, "grp_KeyExpansion_fu_405_Key_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_Key_ce1, "grp_KeyExpansion_fu_405_Key_ce1");
    sc_trace(mVcdFile, i_0_reg_352, "i_0_reg_352");
    sc_trace(mVcdFile, icmp_ln24_fu_485_p2, "icmp_ln24_fu_485_p2");
    sc_trace(mVcdFile, k_0_reg_363, "k_0_reg_363");
    sc_trace(mVcdFile, k_0_i_reg_374, "k_0_i_reg_374");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_1_reg_385, "i_1_reg_385");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg, "grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_405_ap_start_reg, "grp_KeyExpansion_fu_405_ap_start_reg");
    sc_trace(mVcdFile, zext_ln25_fu_528_p1, "zext_ln25_fu_528_p1");
    sc_trace(mVcdFile, zext_ln55_fu_602_p1, "zext_ln55_fu_602_p1");
    sc_trace(mVcdFile, zext_ln55_1_fu_614_p1, "zext_ln55_1_fu_614_p1");
    sc_trace(mVcdFile, zext_ln55_2_fu_625_p1, "zext_ln55_2_fu_625_p1");
    sc_trace(mVcdFile, zext_ln55_3_fu_631_p1, "zext_ln55_3_fu_631_p1");
    sc_trace(mVcdFile, or_ln55_5_fu_636_p5, "or_ln55_5_fu_636_p5");
    sc_trace(mVcdFile, or_ln59_2_fu_650_p5, "or_ln59_2_fu_650_p5");
    sc_trace(mVcdFile, trunc_ln26_fu_540_p1, "trunc_ln26_fu_540_p1");
    sc_trace(mVcdFile, trunc_ln25_fu_427_p1, "trunc_ln25_fu_427_p1");
    sc_trace(mVcdFile, trunc_ln25_1_fu_497_p1, "trunc_ln25_1_fu_497_p1");
    sc_trace(mVcdFile, shl_ln_fu_501_p3, "shl_ln_fu_501_p3");
    sc_trace(mVcdFile, zext_ln25_1_fu_509_p1, "zext_ln25_1_fu_509_p1");
    sc_trace(mVcdFile, lshr_ln25_fu_513_p2, "lshr_ln25_fu_513_p2");
    sc_trace(mVcdFile, zext_ln24_fu_481_p1, "zext_ln24_fu_481_p1");
    sc_trace(mVcdFile, add_ln25_fu_523_p2, "add_ln25_fu_523_p2");
    sc_trace(mVcdFile, lshr_ln26_fu_535_p2, "lshr_ln26_fu_535_p2");
    sc_trace(mVcdFile, lshr_ln27_fu_545_p2, "lshr_ln27_fu_545_p2");
    sc_trace(mVcdFile, or_ln55_fu_596_p2, "or_ln55_fu_596_p2");
    sc_trace(mVcdFile, or_ln55_1_fu_608_p2, "or_ln55_1_fu_608_p2");
    sc_trace(mVcdFile, or_ln55_2_fu_620_p2, "or_ln55_2_fu_620_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes16_bidir.hdltvin.dat");
    mHdltvoutHandle.open("aes16_bidir.hdltvout.dat");
}

aes16_bidir::~aes16_bidir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete p_key_U;
    delete p_text_U;
    delete p_iv_U;
    delete ctx_RoundKey_U;
    delete ctx_Iv_U;
    delete grp_AES_CTR_xcrypt_buffe_fu_396;
    delete grp_KeyExpansion_fu_405;
    delete aes16_bidir_mux_42_32_1_1_U16;
    delete aes16_bidir_mux_42_32_1_1_U17;
    delete aes16_bidir_mux_42_32_1_1_U18;
}

void aes16_bidir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(icmp_ln249_fu_555_p2.read(), ap_const_lv1_1))) {
            grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready.read())) {
            grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_KeyExpansion_fu_405_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(icmp_ln23_fu_415_p2.read(), ap_const_lv1_1))) {
            grp_KeyExpansion_fu_405_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_405_ap_ready.read())) {
            grp_KeyExpansion_fu_405_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln24_fu_485_p2.read(), ap_const_lv1_1))) {
        i_0_reg_352 = i_2_reg_667.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_352 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_1_reg_385 = i_reg_721.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(grp_AES_CTR_xcrypt_buffe_fu_396_ap_done.read(), ap_const_logic_1))) {
        i_1_reg_385 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_0_i_reg_374 = k_reg_703.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_KeyExpansion_fu_405_ap_done.read(), ap_const_logic_1))) {
        k_0_i_reg_374 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_415_p2.read(), ap_const_lv1_0))) {
        k_0_reg_363 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln24_fu_485_p2.read()))) {
        k_0_reg_363 = k_1_fu_491_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_Iv_load_1_reg_781 = ctx_Iv_q1.read();
        ctx_Iv_load_reg_776 = ctx_Iv_q0.read();
        p_text_load_1_reg_761 = p_text_q1.read();
        p_text_load_reg_756 = p_text_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_667 = i_2_fu_421_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_reg_721 = i_fu_578_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_703 = k_fu_561_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_fu_572_p2.read()))) {
        shl_ln1_reg_730 = shl_ln1_fu_588_p3.read();
        trunc_ln55_reg_726 = trunc_ln55_fu_584_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_415_p2.read(), ap_const_lv1_0))) {
        shl_ln25_1_reg_677 = shl_ln25_1_fu_445_p3.read();
        tmp_1_reg_682 = tmp_1_fu_453_p6.read();
        tmp_2_reg_687 = tmp_2_fu_467_p6.read();
        tmp_reg_672 = tmp_fu_431_p6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln249_fu_555_p2.read()))) {
        zext_ln249_reg_708 = zext_ln249_fu_567_p1.read();
    }
}

void aes16_bidir::thread_add_ln25_fu_523_p2() {
    add_ln25_fu_523_p2 = (!zext_ln24_fu_481_p1.read().is_01() || !shl_ln25_1_reg_677.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln24_fu_481_p1.read()) + sc_biguint<4>(shl_ln25_1_reg_677.read()));
}

void aes16_bidir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes16_bidir::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes16_bidir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes16_bidir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes16_bidir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes16_bidir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes16_bidir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes16_bidir::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes16_bidir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes16_bidir::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes16_bidir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_fu_572_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_fu_572_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_Iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_3_fu_631_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_fu_602_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln249_reg_708.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0.read();
    } else {
        ctx_Iv_address0 = "XXXX";
    }
}

void aes16_bidir::thread_ctx_Iv_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (zext_ln55_2_fu_625_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (zext_ln55_1_fu_614_p1.read());
    } else {
        ctx_Iv_address1 = "XXXX";
    }
}

void aes16_bidir::thread_ctx_Iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ctx_Iv_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0.read();
    } else {
        ctx_Iv_ce0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_Iv_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ctx_Iv_ce1 = ap_const_logic_1;
    } else {
        ctx_Iv_ce1 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_Iv_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_Iv_d0 = p_iv_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0.read();
    } else {
        ctx_Iv_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes16_bidir::thread_ctx_Iv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_Iv_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0.read();
    } else {
        ctx_Iv_we0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_405_RoundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0.read();
    } else {
        ctx_RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes16_bidir::thread_ctx_RoundKey_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_405_RoundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_RoundKey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_405_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_405_RoundKey_we0.read();
    } else {
        ctx_RoundKey_we0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_ctx_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_405_RoundKey_we1.read();
    } else {
        ctx_RoundKey_we1 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_grp_AES_CTR_xcrypt_buffe_fu_396_ap_start() {
    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start = grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg.read();
}

void aes16_bidir::thread_grp_KeyExpansion_fu_405_ap_start() {
    grp_KeyExpansion_fu_405_ap_start = grp_KeyExpansion_fu_405_ap_start_reg.read();
}

void aes16_bidir::thread_i_2_fu_421_p2() {
    i_2_fu_421_p2 = (!i_0_reg_352.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_352.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes16_bidir::thread_i_fu_578_p2() {
    i_fu_578_p2 = (!i_1_reg_385.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_385.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes16_bidir::thread_icmp_ln23_fu_415_p2() {
    icmp_ln23_fu_415_p2 = (!i_0_reg_352.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_352.read() == ap_const_lv3_4);
}

void aes16_bidir::thread_icmp_ln249_fu_555_p2() {
    icmp_ln249_fu_555_p2 = (!k_0_i_reg_374.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(k_0_i_reg_374.read() == ap_const_lv5_10);
}

void aes16_bidir::thread_icmp_ln24_fu_485_p2() {
    icmp_ln24_fu_485_p2 = (!k_0_reg_363.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_363.read() == ap_const_lv3_4);
}

void aes16_bidir::thread_icmp_ln54_fu_572_p2() {
    icmp_ln54_fu_572_p2 = (!i_1_reg_385.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_385.read() == ap_const_lv3_4);
}

void aes16_bidir::thread_inout_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_0))) {
        inout_0_o = or_ln55_5_fu_636_p5.read();
    } else {
        inout_0_o = inout_0_i.read();
    }
}

void aes16_bidir::thread_inout_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_0))) {
        inout_0_o_ap_vld = ap_const_logic_1;
    } else {
        inout_0_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_inout_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_1))) {
        inout_1_o = or_ln55_5_fu_636_p5.read();
    } else {
        inout_1_o = inout_1_i.read();
    }
}

void aes16_bidir::thread_inout_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_1))) {
        inout_1_o_ap_vld = ap_const_logic_1;
    } else {
        inout_1_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_inout_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_2))) {
        inout_2_o = or_ln55_5_fu_636_p5.read();
    } else {
        inout_2_o = inout_2_i.read();
    }
}

void aes16_bidir::thread_inout_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_2))) {
        inout_2_o_ap_vld = ap_const_logic_1;
    } else {
        inout_2_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_inout_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_3))) {
        inout_3_o = or_ln55_5_fu_636_p5.read();
    } else {
        inout_3_o = inout_3_i.read();
    }
}

void aes16_bidir::thread_inout_3_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_3))) {
        inout_3_o_ap_vld = ap_const_logic_1;
    } else {
        inout_3_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_iv_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_0))) {
        iv_0_o = or_ln59_2_fu_650_p5.read();
    } else {
        iv_0_o = iv_0_i.read();
    }
}

void aes16_bidir::thread_iv_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_0))) {
        iv_0_o_ap_vld = ap_const_logic_1;
    } else {
        iv_0_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_iv_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_1))) {
        iv_1_o = or_ln59_2_fu_650_p5.read();
    } else {
        iv_1_o = iv_1_i.read();
    }
}

void aes16_bidir::thread_iv_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_1))) {
        iv_1_o_ap_vld = ap_const_logic_1;
    } else {
        iv_1_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_iv_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_2))) {
        iv_2_o = or_ln59_2_fu_650_p5.read();
    } else {
        iv_2_o = iv_2_i.read();
    }
}

void aes16_bidir::thread_iv_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_2))) {
        iv_2_o_ap_vld = ap_const_logic_1;
    } else {
        iv_2_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_iv_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_3))) {
        iv_3_o = or_ln59_2_fu_650_p5.read();
    } else {
        iv_3_o = iv_3_i.read();
    }
}

void aes16_bidir::thread_iv_3_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,2,2>(trunc_ln55_reg_726.read(), ap_const_lv2_3))) {
        iv_3_o_ap_vld = ap_const_logic_1;
    } else {
        iv_3_o_ap_vld = ap_const_logic_0;
    }
}

void aes16_bidir::thread_k_1_fu_491_p2() {
    k_1_fu_491_p2 = (!k_0_reg_363.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_363.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aes16_bidir::thread_k_fu_561_p2() {
    k_fu_561_p2 = (!k_0_i_reg_374.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_0_i_reg_374.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes16_bidir::thread_lshr_ln25_fu_513_p2() {
    lshr_ln25_fu_513_p2 = (!zext_ln25_1_fu_509_p1.read().is_01())? sc_lv<32>(): tmp_reg_672.read() >> (unsigned short)zext_ln25_1_fu_509_p1.read().to_uint();
}

void aes16_bidir::thread_lshr_ln26_fu_535_p2() {
    lshr_ln26_fu_535_p2 = (!zext_ln25_1_fu_509_p1.read().is_01())? sc_lv<32>(): tmp_1_reg_682.read() >> (unsigned short)zext_ln25_1_fu_509_p1.read().to_uint();
}

void aes16_bidir::thread_lshr_ln27_fu_545_p2() {
    lshr_ln27_fu_545_p2 = (!zext_ln25_1_fu_509_p1.read().is_01())? sc_lv<32>(): tmp_2_reg_687.read() >> (unsigned short)zext_ln25_1_fu_509_p1.read().to_uint();
}

void aes16_bidir::thread_or_ln55_1_fu_608_p2() {
    or_ln55_1_fu_608_p2 = (shl_ln1_fu_588_p3.read() | ap_const_lv4_2);
}

void aes16_bidir::thread_or_ln55_2_fu_620_p2() {
    or_ln55_2_fu_620_p2 = (shl_ln1_reg_730.read() | ap_const_lv4_1);
}

void aes16_bidir::thread_or_ln55_5_fu_636_p5() {
    or_ln55_5_fu_636_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(p_text_load_reg_756.read(), p_text_load_1_reg_761.read()), p_text_q1.read()), p_text_q0.read());
}

void aes16_bidir::thread_or_ln55_fu_596_p2() {
    or_ln55_fu_596_p2 = (shl_ln1_fu_588_p3.read() | ap_const_lv4_3);
}

void aes16_bidir::thread_or_ln59_2_fu_650_p5() {
    or_ln59_2_fu_650_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ctx_Iv_load_reg_776.read(), ctx_Iv_load_1_reg_781.read()), ctx_Iv_q1.read()), ctx_Iv_q0.read());
}

void aes16_bidir::thread_p_iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_iv_address0 =  (sc_lv<4>) (zext_ln249_fu_567_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_iv_address0 =  (sc_lv<4>) (zext_ln25_fu_528_p1.read());
    } else {
        p_iv_address0 = "XXXX";
    }
}

void aes16_bidir::thread_p_iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        p_iv_ce0 = ap_const_logic_1;
    } else {
        p_iv_ce0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_iv_d0() {
    p_iv_d0 = lshr_ln27_fu_545_p2.read().range(8-1, 0);
}

void aes16_bidir::thread_p_iv_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln24_fu_485_p2.read()))) {
        p_iv_we0 = ap_const_logic_1;
    } else {
        p_iv_we0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_key_address0 =  (sc_lv<4>) (zext_ln25_fu_528_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_key_address0 = grp_KeyExpansion_fu_405_Key_address0.read();
    } else {
        p_key_address0 = "XXXX";
    }
}

void aes16_bidir::thread_p_key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_key_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_key_ce0 = grp_KeyExpansion_fu_405_Key_ce0.read();
    } else {
        p_key_ce0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_key_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_key_ce1 = grp_KeyExpansion_fu_405_Key_ce1.read();
    } else {
        p_key_ce1 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_key_d0() {
    p_key_d0 = lshr_ln25_fu_513_p2.read().range(8-1, 0);
}

void aes16_bidir::thread_p_key_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln24_fu_485_p2.read()))) {
        p_key_we0 = ap_const_logic_1;
    } else {
        p_key_we0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_text_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_text_address0 =  (sc_lv<4>) (zext_ln55_3_fu_631_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_text_address0 =  (sc_lv<4>) (zext_ln55_fu_602_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_text_address0 =  (sc_lv<4>) (zext_ln25_fu_528_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_text_address0 = grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0.read();
    } else {
        p_text_address0 = "XXXX";
    }
}

void aes16_bidir::thread_p_text_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_text_address1 =  (sc_lv<4>) (zext_ln55_2_fu_625_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_text_address1 =  (sc_lv<4>) (zext_ln55_1_fu_614_p1.read());
    } else {
        p_text_address1 = "XXXX";
    }
}

void aes16_bidir::thread_p_text_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        p_text_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0.read();
    } else {
        p_text_ce0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_text_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        p_text_ce1 = ap_const_logic_1;
    } else {
        p_text_ce1 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_p_text_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_text_d0 = trunc_ln26_fu_540_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_text_d0 = grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0.read();
    } else {
        p_text_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes16_bidir::thread_p_text_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln24_fu_485_p2.read()))) {
        p_text_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_text_we0 = grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0.read();
    } else {
        p_text_we0 = ap_const_logic_0;
    }
}

void aes16_bidir::thread_shl_ln1_fu_588_p3() {
    shl_ln1_fu_588_p3 = esl_concat<2,2>(trunc_ln55_fu_584_p1.read(), ap_const_lv2_0);
}

void aes16_bidir::thread_shl_ln25_1_fu_445_p3() {
    shl_ln25_1_fu_445_p3 = esl_concat<2,2>(trunc_ln25_fu_427_p1.read(), ap_const_lv2_0);
}

void aes16_bidir::thread_shl_ln_fu_501_p3() {
    shl_ln_fu_501_p3 = esl_concat<2,3>(trunc_ln25_1_fu_497_p1.read(), ap_const_lv3_0);
}

void aes16_bidir::thread_trunc_ln25_1_fu_497_p1() {
    trunc_ln25_1_fu_497_p1 = k_0_reg_363.read().range(2-1, 0);
}

void aes16_bidir::thread_trunc_ln25_fu_427_p1() {
    trunc_ln25_fu_427_p1 = i_0_reg_352.read().range(2-1, 0);
}

void aes16_bidir::thread_trunc_ln26_fu_540_p1() {
    trunc_ln26_fu_540_p1 = lshr_ln26_fu_535_p2.read().range(8-1, 0);
}

void aes16_bidir::thread_trunc_ln55_fu_584_p1() {
    trunc_ln55_fu_584_p1 = i_1_reg_385.read().range(2-1, 0);
}

void aes16_bidir::thread_zext_ln249_fu_567_p1() {
    zext_ln249_fu_567_p1 = esl_zext<64,5>(k_0_i_reg_374.read());
}

void aes16_bidir::thread_zext_ln24_fu_481_p1() {
    zext_ln24_fu_481_p1 = esl_zext<4,3>(k_0_reg_363.read());
}

void aes16_bidir::thread_zext_ln25_1_fu_509_p1() {
    zext_ln25_1_fu_509_p1 = esl_zext<32,5>(shl_ln_fu_501_p3.read());
}

void aes16_bidir::thread_zext_ln25_fu_528_p1() {
    zext_ln25_fu_528_p1 = esl_zext<64,4>(add_ln25_fu_523_p2.read());
}

void aes16_bidir::thread_zext_ln55_1_fu_614_p1() {
    zext_ln55_1_fu_614_p1 = esl_zext<64,4>(or_ln55_1_fu_608_p2.read());
}

void aes16_bidir::thread_zext_ln55_2_fu_625_p1() {
    zext_ln55_2_fu_625_p1 = esl_zext<64,4>(or_ln55_2_fu_620_p2.read());
}

void aes16_bidir::thread_zext_ln55_3_fu_631_p1() {
    zext_ln55_3_fu_631_p1 = esl_zext<64,4>(shl_ln1_reg_730.read());
}

void aes16_bidir::thread_zext_ln55_fu_602_p1() {
    zext_ln55_fu_602_p1 = esl_zext<64,4>(or_ln55_fu_596_p2.read());
}

void aes16_bidir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_415_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln24_fu_485_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_405_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln249_fu_555_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_AES_CTR_xcrypt_buffe_fu_396_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_572_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void aes16_bidir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_0\" :  \"" << key_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_1\" :  \"" << key_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_2\" :  \"" << key_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_3\" :  \"" << key_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inout_0_i\" :  \"" << inout_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_0_o\" :  \"" << inout_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_0_o_ap_vld\" :  \"" << inout_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inout_1_i\" :  \"" << inout_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_1_o\" :  \"" << inout_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_1_o_ap_vld\" :  \"" << inout_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inout_2_i\" :  \"" << inout_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_2_o\" :  \"" << inout_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_2_o_ap_vld\" :  \"" << inout_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inout_3_i\" :  \"" << inout_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_3_o\" :  \"" << inout_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inout_3_o_ap_vld\" :  \"" << inout_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_0_i\" :  \"" << iv_0_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_0_o\" :  \"" << iv_0_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_0_o_ap_vld\" :  \"" << iv_0_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_1_i\" :  \"" << iv_1_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_1_o\" :  \"" << iv_1_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_1_o_ap_vld\" :  \"" << iv_1_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_2_i\" :  \"" << iv_2_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_2_o\" :  \"" << iv_2_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_2_o_ap_vld\" :  \"" << iv_2_o_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"iv_3_i\" :  \"" << iv_3_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_3_o\" :  \"" << iv_3_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iv_3_o_ap_vld\" :  \"" << iv_3_o_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

