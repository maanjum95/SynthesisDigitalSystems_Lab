-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes16_bidir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    inout_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    inout_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    inout_0_o_ap_vld : OUT STD_LOGIC;
    inout_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    inout_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    inout_1_o_ap_vld : OUT STD_LOGIC;
    inout_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    inout_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    inout_2_o_ap_vld : OUT STD_LOGIC;
    inout_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    inout_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    inout_3_o_ap_vld : OUT STD_LOGIC;
    iv_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    iv_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_0_o_ap_vld : OUT STD_LOGIC;
    iv_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    iv_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_1_o_ap_vld : OUT STD_LOGIC;
    iv_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    iv_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_2_o_ap_vld : OUT STD_LOGIC;
    iv_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    iv_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    iv_3_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aes16_bidir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes16_bidir,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.100000,HLS_SYN_LAT=11448,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=769,HLS_SYN_LUT=2908,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_421_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_667 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_431_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln25_1_fu_445_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln25_1_reg_677 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_453_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_467_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_491_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_561_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln249_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln249_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln249_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_578_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_721 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln55_fu_584_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln55_reg_726 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln54_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_588_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_text_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_text_load_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_text_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_text_load_1_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_load_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_load_1_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_key_ce0 : STD_LOGIC;
    signal p_key_we0 : STD_LOGIC;
    signal p_key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_key_ce1 : STD_LOGIC;
    signal p_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_text_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_text_ce0 : STD_LOGIC;
    signal p_text_we0 : STD_LOGIC;
    signal p_text_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_text_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_text_ce1 : STD_LOGIC;
    signal p_iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_iv_ce0 : STD_LOGIC;
    signal p_iv_we0 : STD_LOGIC;
    signal p_iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce0 : STD_LOGIC;
    signal ctx_RoundKey_we0 : STD_LOGIC;
    signal ctx_RoundKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce1 : STD_LOGIC;
    signal ctx_RoundKey_we1 : STD_LOGIC;
    signal ctx_RoundKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_Iv_ce0 : STD_LOGIC;
    signal ctx_Iv_we0 : STD_LOGIC;
    signal ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_Iv_ce1 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ap_start : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ap_done : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ap_idle : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_405_ap_start : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_ap_done : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_ap_idle : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_ap_ready : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_405_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_RoundKey_we0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_RoundKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_405_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_405_RoundKey_ce1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_RoundKey_we1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_RoundKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_405_Key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeyExpansion_fu_405_Key_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_405_Key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeyExpansion_fu_405_Key_ce1 : STD_LOGIC;
    signal i_0_reg_352 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln24_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_0_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_i_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_reg_385 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeyExpansion_fu_405_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln25_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_3_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln55_5_fu_636_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln59_2_fu_650_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln26_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln25_fu_427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln25_1_fu_497_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_501_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln25_1_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln25_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_481_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln25_fu_523_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln26_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln27_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln55_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln55_1_fu_608_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln55_2_fu_620_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component AES_CTR_xcrypt_buffe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_RoundKey_ce0 : OUT STD_LOGIC;
        ctx_RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_Iv_ce0 : OUT STD_LOGIC;
        ctx_Iv_we0 : OUT STD_LOGIC;
        ctx_Iv_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_we0 : OUT STD_LOGIC;
        RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_we1 : OUT STD_LOGIC;
        RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Key_ce0 : OUT STD_LOGIC;
        Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Key_ce1 : OUT STD_LOGIC;
        Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes16_bidir_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes16_bidir_p_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_CTR_xcrypt_buffe_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes16_bidir_ctx_RoundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    p_key_U : component aes16_bidir_p_key
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_key_address0,
        ce0 => p_key_ce0,
        we0 => p_key_we0,
        d0 => p_key_d0,
        q0 => p_key_q0,
        address1 => grp_KeyExpansion_fu_405_Key_address1,
        ce1 => p_key_ce1,
        q1 => p_key_q1);

    p_text_U : component aes16_bidir_p_key
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_text_address0,
        ce0 => p_text_ce0,
        we0 => p_text_we0,
        d0 => p_text_d0,
        q0 => p_text_q0,
        address1 => p_text_address1,
        ce1 => p_text_ce1,
        q1 => p_text_q1);

    p_iv_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_iv_address0,
        ce0 => p_iv_ce0,
        we0 => p_iv_we0,
        d0 => p_iv_d0,
        q0 => p_iv_q0);

    ctx_RoundKey_U : component aes16_bidir_ctx_RoundKey
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_RoundKey_address0,
        ce0 => ctx_RoundKey_ce0,
        we0 => ctx_RoundKey_we0,
        d0 => grp_KeyExpansion_fu_405_RoundKey_d0,
        q0 => ctx_RoundKey_q0,
        address1 => grp_KeyExpansion_fu_405_RoundKey_address1,
        ce1 => ctx_RoundKey_ce1,
        we1 => ctx_RoundKey_we1,
        d1 => grp_KeyExpansion_fu_405_RoundKey_d1,
        q1 => ctx_RoundKey_q1);

    ctx_Iv_U : component aes16_bidir_p_key
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_Iv_address0,
        ce0 => ctx_Iv_ce0,
        we0 => ctx_Iv_we0,
        d0 => ctx_Iv_d0,
        q0 => ctx_Iv_q0,
        address1 => ctx_Iv_address1,
        ce1 => ctx_Iv_ce1,
        q1 => ctx_Iv_q1);

    grp_AES_CTR_xcrypt_buffe_fu_396 : component AES_CTR_xcrypt_buffe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES_CTR_xcrypt_buffe_fu_396_ap_start,
        ap_done => grp_AES_CTR_xcrypt_buffe_fu_396_ap_done,
        ap_idle => grp_AES_CTR_xcrypt_buffe_fu_396_ap_idle,
        ap_ready => grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready,
        ctx_RoundKey_address0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0,
        ctx_RoundKey_ce0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0,
        ctx_RoundKey_q0 => ctx_RoundKey_q0,
        ctx_Iv_address0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0,
        ctx_Iv_ce0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0,
        ctx_Iv_we0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0,
        ctx_Iv_d0 => grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0,
        ctx_Iv_q0 => ctx_Iv_q0,
        buf_r_address0 => grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0,
        buf_r_ce0 => grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0,
        buf_r_we0 => grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0,
        buf_r_d0 => grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0,
        buf_r_q0 => p_text_q0);

    grp_KeyExpansion_fu_405 : component KeyExpansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeyExpansion_fu_405_ap_start,
        ap_done => grp_KeyExpansion_fu_405_ap_done,
        ap_idle => grp_KeyExpansion_fu_405_ap_idle,
        ap_ready => grp_KeyExpansion_fu_405_ap_ready,
        RoundKey_address0 => grp_KeyExpansion_fu_405_RoundKey_address0,
        RoundKey_ce0 => grp_KeyExpansion_fu_405_RoundKey_ce0,
        RoundKey_we0 => grp_KeyExpansion_fu_405_RoundKey_we0,
        RoundKey_d0 => grp_KeyExpansion_fu_405_RoundKey_d0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_KeyExpansion_fu_405_RoundKey_address1,
        RoundKey_ce1 => grp_KeyExpansion_fu_405_RoundKey_ce1,
        RoundKey_we1 => grp_KeyExpansion_fu_405_RoundKey_we1,
        RoundKey_d1 => grp_KeyExpansion_fu_405_RoundKey_d1,
        RoundKey_q1 => ctx_RoundKey_q1,
        Key_address0 => grp_KeyExpansion_fu_405_Key_address0,
        Key_ce0 => grp_KeyExpansion_fu_405_Key_ce0,
        Key_q0 => p_key_q0,
        Key_address1 => grp_KeyExpansion_fu_405_Key_address1,
        Key_ce1 => grp_KeyExpansion_fu_405_Key_ce1,
        Key_q1 => p_key_q1);

    aes16_bidir_mux_42_32_1_1_U16 : component aes16_bidir_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => key_0,
        din1 => key_1,
        din2 => key_2,
        din3 => key_3,
        din4 => trunc_ln25_fu_427_p1,
        dout => tmp_fu_431_p6);

    aes16_bidir_mux_42_32_1_1_U17 : component aes16_bidir_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => inout_0_i,
        din1 => inout_1_i,
        din2 => inout_2_i,
        din3 => inout_3_i,
        din4 => trunc_ln25_fu_427_p1,
        dout => tmp_1_fu_453_p6);

    aes16_bidir_mux_42_32_1_1_U18 : component aes16_bidir_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => iv_0_i,
        din1 => iv_1_i,
        din2 => iv_2_i,
        din3 => iv_3_i,
        din4 => trunc_ln25_fu_427_p1,
        dout => tmp_2_fu_467_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln249_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_CTR_xcrypt_buffe_fu_396_ap_ready = ap_const_logic_1)) then 
                    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeyExpansion_fu_405_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeyExpansion_fu_405_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln23_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_KeyExpansion_fu_405_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeyExpansion_fu_405_ap_ready = ap_const_logic_1)) then 
                    grp_KeyExpansion_fu_405_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_352 <= i_2_reg_667;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_352 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_385 <= i_reg_721;
            elsif (((grp_AES_CTR_xcrypt_buffe_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_reg_385 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_0_i_reg_374 <= k_reg_703;
            elsif (((grp_KeyExpansion_fu_405_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_i_reg_374 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_363 <= ap_const_lv3_0;
            elsif (((icmp_ln24_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_363 <= k_1_fu_491_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ctx_Iv_load_1_reg_781 <= ctx_Iv_q1;
                ctx_Iv_load_reg_776 <= ctx_Iv_q0;
                p_text_load_1_reg_761 <= p_text_q1;
                p_text_load_reg_756 <= p_text_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_667 <= i_2_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_721 <= i_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_reg_703 <= k_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    shl_ln1_reg_730(3 downto 2) <= shl_ln1_fu_588_p3(3 downto 2);
                trunc_ln55_reg_726 <= trunc_ln55_fu_584_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln25_1_reg_677(3 downto 2) <= shl_ln25_1_fu_445_p3(3 downto 2);
                tmp_1_reg_682 <= tmp_1_fu_453_p6;
                tmp_2_reg_687 <= tmp_2_fu_467_p6;
                tmp_reg_672 <= tmp_fu_431_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln249_reg_708(4 downto 0) <= zext_ln249_fu_567_p1(4 downto 0);
            end if;
        end if;
    end process;
    shl_ln25_1_reg_677(1 downto 0) <= "00";
    zext_ln249_reg_708(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln1_reg_730(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_415_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln249_fu_555_p2, ap_CS_fsm_state8, icmp_ln54_fu_572_p2, grp_AES_CTR_xcrypt_buffe_fu_396_ap_done, grp_KeyExpansion_fu_405_ap_done, icmp_ln24_fu_485_p2, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln23_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_KeyExpansion_fu_405_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln249_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((grp_AES_CTR_xcrypt_buffe_fu_396_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_572_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_523_p2 <= std_logic_vector(unsigned(zext_ln24_fu_481_p1) + unsigned(shl_ln25_1_reg_677));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln54_fu_572_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_572_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln54_fu_572_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_572_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_address0_assign_proc : process(zext_ln249_reg_708, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln55_fu_602_p1, zext_ln55_3_fu_631_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_Iv_address0 <= zext_ln55_3_fu_631_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_Iv_address0 <= zext_ln55_fu_602_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_Iv_address0 <= zext_ln249_reg_708(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_address0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_address0;
        else 
            ctx_Iv_address0 <= "XXXX";
        end if; 
    end process;


    ctx_Iv_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln55_1_fu_614_p1, zext_ln55_2_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ctx_Iv_address1 <= zext_ln55_2_fu_625_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_Iv_address1 <= zext_ln55_1_fu_614_p1(4 - 1 downto 0);
        else 
            ctx_Iv_address1 <= "XXXX";
        end if; 
    end process;


    ctx_Iv_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_Iv_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_ce0;
        else 
            ctx_Iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ctx_Iv_ce1 <= ap_const_logic_1;
        else 
            ctx_Iv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_d0_assign_proc : process(p_iv_q0, grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_Iv_d0 <= p_iv_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_d0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_d0;
        else 
            ctx_Iv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_Iv_we0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_Iv_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_we0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_Iv_we0;
        else 
            ctx_Iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_address0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0, grp_KeyExpansion_fu_405_RoundKey_address0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_RoundKey_address0 <= grp_KeyExpansion_fu_405_RoundKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_RoundKey_address0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_address0;
        else 
            ctx_RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_ce0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0, grp_KeyExpansion_fu_405_RoundKey_ce0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_RoundKey_ce0 <= grp_KeyExpansion_fu_405_RoundKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_RoundKey_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_396_ctx_RoundKey_ce0;
        else 
            ctx_RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_ce1_assign_proc : process(grp_KeyExpansion_fu_405_RoundKey_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_RoundKey_ce1 <= grp_KeyExpansion_fu_405_RoundKey_ce1;
        else 
            ctx_RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we0_assign_proc : process(grp_KeyExpansion_fu_405_RoundKey_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_RoundKey_we0 <= grp_KeyExpansion_fu_405_RoundKey_we0;
        else 
            ctx_RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we1_assign_proc : process(grp_KeyExpansion_fu_405_RoundKey_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_RoundKey_we1 <= grp_KeyExpansion_fu_405_RoundKey_we1;
        else 
            ctx_RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES_CTR_xcrypt_buffe_fu_396_ap_start <= grp_AES_CTR_xcrypt_buffe_fu_396_ap_start_reg;
    grp_KeyExpansion_fu_405_ap_start <= grp_KeyExpansion_fu_405_ap_start_reg;
    i_2_fu_421_p2 <= std_logic_vector(unsigned(i_0_reg_352) + unsigned(ap_const_lv3_1));
    i_fu_578_p2 <= std_logic_vector(unsigned(i_1_reg_385) + unsigned(ap_const_lv3_1));
    icmp_ln23_fu_415_p2 <= "1" when (i_0_reg_352 = ap_const_lv3_4) else "0";
    icmp_ln249_fu_555_p2 <= "1" when (k_0_i_reg_374 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_485_p2 <= "1" when (k_0_reg_363 = ap_const_lv3_4) else "0";
    icmp_ln54_fu_572_p2 <= "1" when (i_1_reg_385 = ap_const_lv3_4) else "0";

    inout_0_o_assign_proc : process(inout_0_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln55_5_fu_636_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_0))) then 
            inout_0_o <= or_ln55_5_fu_636_p5;
        else 
            inout_0_o <= inout_0_i;
        end if; 
    end process;


    inout_0_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_0))) then 
            inout_0_o_ap_vld <= ap_const_logic_1;
        else 
            inout_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inout_1_o_assign_proc : process(inout_1_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln55_5_fu_636_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_1))) then 
            inout_1_o <= or_ln55_5_fu_636_p5;
        else 
            inout_1_o <= inout_1_i;
        end if; 
    end process;


    inout_1_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_1))) then 
            inout_1_o_ap_vld <= ap_const_logic_1;
        else 
            inout_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inout_2_o_assign_proc : process(inout_2_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln55_5_fu_636_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_2))) then 
            inout_2_o <= or_ln55_5_fu_636_p5;
        else 
            inout_2_o <= inout_2_i;
        end if; 
    end process;


    inout_2_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_2))) then 
            inout_2_o_ap_vld <= ap_const_logic_1;
        else 
            inout_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inout_3_o_assign_proc : process(inout_3_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln55_5_fu_636_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_3))) then 
            inout_3_o <= or_ln55_5_fu_636_p5;
        else 
            inout_3_o <= inout_3_i;
        end if; 
    end process;


    inout_3_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_3))) then 
            inout_3_o_ap_vld <= ap_const_logic_1;
        else 
            inout_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    iv_0_o_assign_proc : process(iv_0_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln59_2_fu_650_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_0))) then 
            iv_0_o <= or_ln59_2_fu_650_p5;
        else 
            iv_0_o <= iv_0_i;
        end if; 
    end process;


    iv_0_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_0))) then 
            iv_0_o_ap_vld <= ap_const_logic_1;
        else 
            iv_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    iv_1_o_assign_proc : process(iv_1_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln59_2_fu_650_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_1))) then 
            iv_1_o <= or_ln59_2_fu_650_p5;
        else 
            iv_1_o <= iv_1_i;
        end if; 
    end process;


    iv_1_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_1))) then 
            iv_1_o_ap_vld <= ap_const_logic_1;
        else 
            iv_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    iv_2_o_assign_proc : process(iv_2_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln59_2_fu_650_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_2))) then 
            iv_2_o <= or_ln59_2_fu_650_p5;
        else 
            iv_2_o <= iv_2_i;
        end if; 
    end process;


    iv_2_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_2))) then 
            iv_2_o_ap_vld <= ap_const_logic_1;
        else 
            iv_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    iv_3_o_assign_proc : process(iv_3_i, trunc_ln55_reg_726, ap_CS_fsm_state10, or_ln59_2_fu_650_p5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_3))) then 
            iv_3_o <= or_ln59_2_fu_650_p5;
        else 
            iv_3_o <= iv_3_i;
        end if; 
    end process;


    iv_3_o_ap_vld_assign_proc : process(trunc_ln55_reg_726, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln55_reg_726 = ap_const_lv2_3))) then 
            iv_3_o_ap_vld <= ap_const_logic_1;
        else 
            iv_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    k_1_fu_491_p2 <= std_logic_vector(unsigned(k_0_reg_363) + unsigned(ap_const_lv3_1));
    k_fu_561_p2 <= std_logic_vector(unsigned(k_0_i_reg_374) + unsigned(ap_const_lv5_1));
    lshr_ln25_fu_513_p2 <= std_logic_vector(shift_right(unsigned(tmp_reg_672),to_integer(unsigned('0' & zext_ln25_1_fu_509_p1(31-1 downto 0)))));
    lshr_ln26_fu_535_p2 <= std_logic_vector(shift_right(unsigned(tmp_1_reg_682),to_integer(unsigned('0' & zext_ln25_1_fu_509_p1(31-1 downto 0)))));
    lshr_ln27_fu_545_p2 <= std_logic_vector(shift_right(unsigned(tmp_2_reg_687),to_integer(unsigned('0' & zext_ln25_1_fu_509_p1(31-1 downto 0)))));
    or_ln55_1_fu_608_p2 <= (shl_ln1_fu_588_p3 or ap_const_lv4_2);
    or_ln55_2_fu_620_p2 <= (shl_ln1_reg_730 or ap_const_lv4_1);
    or_ln55_5_fu_636_p5 <= (((p_text_load_reg_756 & p_text_load_1_reg_761) & p_text_q1) & p_text_q0);
    or_ln55_fu_596_p2 <= (shl_ln1_fu_588_p3 or ap_const_lv4_3);
    or_ln59_2_fu_650_p5 <= (((ctx_Iv_load_reg_776 & ctx_Iv_load_1_reg_781) & ctx_Iv_q1) & ctx_Iv_q0);

    p_iv_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln249_fu_567_p1, zext_ln25_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_iv_address0 <= zext_ln249_fu_567_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_iv_address0 <= zext_ln25_fu_528_p1(4 - 1 downto 0);
        else 
            p_iv_address0 <= "XXXX";
        end if; 
    end process;


    p_iv_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_iv_ce0 <= ap_const_logic_1;
        else 
            p_iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_iv_d0 <= lshr_ln27_fu_545_p2(8 - 1 downto 0);

    p_iv_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln24_fu_485_p2)
    begin
        if (((icmp_ln24_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_iv_we0 <= ap_const_logic_1;
        else 
            p_iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_key_address0_assign_proc : process(ap_CS_fsm_state3, grp_KeyExpansion_fu_405_Key_address0, ap_CS_fsm_state4, zext_ln25_fu_528_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_key_address0 <= zext_ln25_fu_528_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_key_address0 <= grp_KeyExpansion_fu_405_Key_address0;
        else 
            p_key_address0 <= "XXXX";
        end if; 
    end process;


    p_key_ce0_assign_proc : process(ap_CS_fsm_state3, grp_KeyExpansion_fu_405_Key_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_key_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_key_ce0 <= grp_KeyExpansion_fu_405_Key_ce0;
        else 
            p_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_key_ce1_assign_proc : process(grp_KeyExpansion_fu_405_Key_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_key_ce1 <= grp_KeyExpansion_fu_405_Key_ce1;
        else 
            p_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_key_d0 <= lshr_ln25_fu_513_p2(8 - 1 downto 0);

    p_key_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln24_fu_485_p2)
    begin
        if (((icmp_ln24_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_key_we0 <= ap_const_logic_1;
        else 
            p_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_text_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0, ap_CS_fsm_state7, zext_ln25_fu_528_p1, zext_ln55_fu_602_p1, zext_ln55_3_fu_631_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_text_address0 <= zext_ln55_3_fu_631_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_text_address0 <= zext_ln55_fu_602_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_text_address0 <= zext_ln25_fu_528_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_text_address0 <= grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_address0;
        else 
            p_text_address0 <= "XXXX";
        end if; 
    end process;


    p_text_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln55_1_fu_614_p1, zext_ln55_2_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_text_address1 <= zext_ln55_2_fu_625_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_text_address1 <= zext_ln55_1_fu_614_p1(4 - 1 downto 0);
        else 
            p_text_address1 <= "XXXX";
        end if; 
    end process;


    p_text_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            p_text_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_text_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_ce0;
        else 
            p_text_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_text_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            p_text_ce1 <= ap_const_logic_1;
        else 
            p_text_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_text_d0_assign_proc : process(ap_CS_fsm_state3, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0, ap_CS_fsm_state7, trunc_ln26_fu_540_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_text_d0 <= trunc_ln26_fu_540_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_text_d0 <= grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_d0;
        else 
            p_text_d0 <= "XXXXXXXX";
        end if; 
    end process;


    p_text_we0_assign_proc : process(ap_CS_fsm_state3, grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0, icmp_ln24_fu_485_p2, ap_CS_fsm_state7)
    begin
        if (((icmp_ln24_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_text_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_text_we0 <= grp_AES_CTR_xcrypt_buffe_fu_396_buf_r_we0;
        else 
            p_text_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln1_fu_588_p3 <= (trunc_ln55_fu_584_p1 & ap_const_lv2_0);
    shl_ln25_1_fu_445_p3 <= (trunc_ln25_fu_427_p1 & ap_const_lv2_0);
    shl_ln_fu_501_p3 <= (trunc_ln25_1_fu_497_p1 & ap_const_lv3_0);
    trunc_ln25_1_fu_497_p1 <= k_0_reg_363(2 - 1 downto 0);
    trunc_ln25_fu_427_p1 <= i_0_reg_352(2 - 1 downto 0);
    trunc_ln26_fu_540_p1 <= lshr_ln26_fu_535_p2(8 - 1 downto 0);
    trunc_ln55_fu_584_p1 <= i_1_reg_385(2 - 1 downto 0);
    zext_ln249_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_374),64));
    zext_ln24_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_363),4));
    zext_ln25_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_501_p3),32));
    zext_ln25_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_523_p2),64));
    zext_ln55_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln55_1_fu_608_p2),64));
    zext_ln55_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln55_2_fu_620_p2),64));
    zext_ln55_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_730),64));
    zext_ln55_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln55_fu_596_p2),64));
end behav;
