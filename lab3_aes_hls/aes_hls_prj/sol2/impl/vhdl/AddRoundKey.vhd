-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (4 downto 0);
    state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal shl_ln_fu_321_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal RoundKey_load_reg_677 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal RoundKey_load_1_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal RoundKey_load_2_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal RoundKey_load_3_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal RoundKey_load_4_reg_717 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal RoundKey_load_5_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal RoundKey_load_6_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal RoundKey_load_7_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal RoundKey_load_8_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal RoundKey_load_9_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal RoundKey_load_10_reg_777 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal RoundKey_load_11_reg_782 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_3_read_4_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_2_read_3_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_1_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_1_reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_2_fu_475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_2_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_3_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_3_reg_822 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_4_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_4_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_5_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_5_reg_832 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_6_fu_495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_6_reg_837 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_7_fu_500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_7_reg_842 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_8_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_8_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_9_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_9_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_10_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_10_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_11_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_11_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_12_fu_525_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_12_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_13_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_13_reg_872 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_port_reg_state_0_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_0_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_0_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_0_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_1_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_1_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_1_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_1_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_2_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_2_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_2_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_2_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_3_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_3_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_3_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_state_3_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln265_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_1_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_2_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln265_3_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_4_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln265_5_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_6_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln265_7_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_8_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln265_9_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_10_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln265_11_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_12_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln265_13_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_14_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln265_15_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln265_fu_317_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln265_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_1_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_2_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_3_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_4_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_5_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_6_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_7_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_8_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_9_fu_425_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_10_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_11_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_12_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_13_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_14_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_14_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_15_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                RoundKey_load_10_reg_777 <= RoundKey_q0;
                RoundKey_load_11_reg_782 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                RoundKey_load_1_reg_682 <= RoundKey_q1;
                RoundKey_load_reg_677 <= RoundKey_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                RoundKey_load_2_reg_697 <= RoundKey_q0;
                RoundKey_load_3_reg_702 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                RoundKey_load_4_reg_717 <= RoundKey_q0;
                RoundKey_load_5_reg_722 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                RoundKey_load_6_reg_737 <= RoundKey_q0;
                RoundKey_load_7_reg_742 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                RoundKey_load_8_reg_757 <= RoundKey_q0;
                RoundKey_load_9_reg_762 <= RoundKey_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_port_reg_state_0_0_read <= state_0_0_read;
                ap_port_reg_state_0_1_read <= state_0_1_read;
                ap_port_reg_state_0_2_read <= state_0_2_read;
                ap_port_reg_state_0_3_read <= state_0_3_read;
                ap_port_reg_state_1_0_read <= state_1_0_read;
                ap_port_reg_state_1_1_read <= state_1_1_read;
                ap_port_reg_state_1_2_read <= state_1_2_read;
                ap_port_reg_state_1_3_read <= state_1_3_read;
                ap_port_reg_state_2_0_read <= state_2_0_read;
                ap_port_reg_state_2_1_read <= state_2_1_read;
                ap_port_reg_state_2_2_read <= state_2_2_read;
                ap_port_reg_state_2_3_read <= state_2_3_read;
                ap_port_reg_state_3_0_read <= state_3_0_read;
                ap_port_reg_state_3_1_read <= state_3_1_read;
                ap_port_reg_state_3_2_read <= state_3_2_read;
                ap_port_reg_state_3_3_read <= state_3_3_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    shl_ln_reg_649(7 downto 4) <= shl_ln_fu_321_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                state_3_2_read_3_reg_802 <= ap_port_reg_state_3_2_read;
                state_3_3_read_4_reg_797 <= ap_port_reg_state_3_3_read;
                xor_ln265_10_reg_857 <= xor_ln265_10_fu_515_p2;
                xor_ln265_11_reg_862 <= xor_ln265_11_fu_520_p2;
                xor_ln265_12_reg_867 <= xor_ln265_12_fu_525_p2;
                xor_ln265_13_reg_872 <= xor_ln265_13_fu_531_p2;
                xor_ln265_1_reg_812 <= xor_ln265_1_fu_470_p2;
                xor_ln265_2_reg_817 <= xor_ln265_2_fu_475_p2;
                xor_ln265_3_reg_822 <= xor_ln265_3_fu_480_p2;
                xor_ln265_4_reg_827 <= xor_ln265_4_fu_485_p2;
                xor_ln265_5_reg_832 <= xor_ln265_5_fu_490_p2;
                xor_ln265_6_reg_837 <= xor_ln265_6_fu_495_p2;
                xor_ln265_7_reg_842 <= xor_ln265_7_fu_500_p2;
                xor_ln265_8_reg_847 <= xor_ln265_8_fu_505_p2;
                xor_ln265_9_reg_852 <= xor_ln265_9_fu_510_p2;
                xor_ln265_reg_807 <= xor_ln265_fu_465_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_649(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_reset_idle_pp0, ap_reset_start_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_start_pp0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_start_pp0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    RoundKey_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln265_fu_329_p1, zext_ln265_2_fu_350_p1, ap_block_pp0_stage1, zext_ln265_4_fu_370_p1, ap_block_pp0_stage2, zext_ln265_6_fu_390_p1, ap_block_pp0_stage3, zext_ln265_8_fu_410_p1, ap_block_pp0_stage4, zext_ln265_10_fu_430_p1, ap_block_pp0_stage5, zext_ln265_12_fu_450_p1, ap_block_pp0_stage6, zext_ln265_14_fu_542_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                RoundKey_address0 <= zext_ln265_14_fu_542_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                RoundKey_address0 <= zext_ln265_12_fu_450_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                RoundKey_address0 <= zext_ln265_10_fu_430_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                RoundKey_address0 <= zext_ln265_8_fu_410_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                RoundKey_address0 <= zext_ln265_6_fu_390_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                RoundKey_address0 <= zext_ln265_4_fu_370_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                RoundKey_address0 <= zext_ln265_2_fu_350_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                RoundKey_address0 <= zext_ln265_fu_329_p1(8 - 1 downto 0);
            else 
                RoundKey_address0 <= "XXXXXXXX";
            end if;
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln265_1_fu_340_p1, ap_block_pp0_stage1, zext_ln265_3_fu_360_p1, ap_block_pp0_stage2, zext_ln265_5_fu_380_p1, ap_block_pp0_stage3, zext_ln265_7_fu_400_p1, ap_block_pp0_stage4, zext_ln265_9_fu_420_p1, ap_block_pp0_stage5, zext_ln265_11_fu_440_p1, ap_block_pp0_stage6, zext_ln265_13_fu_460_p1, ap_block_pp0_stage7, zext_ln265_15_fu_552_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                RoundKey_address1 <= zext_ln265_15_fu_552_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                RoundKey_address1 <= zext_ln265_13_fu_460_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                RoundKey_address1 <= zext_ln265_11_fu_440_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                RoundKey_address1 <= zext_ln265_9_fu_420_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                RoundKey_address1 <= zext_ln265_7_fu_400_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                RoundKey_address1 <= zext_ln265_5_fu_380_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                RoundKey_address1 <= zext_ln265_3_fu_360_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                RoundKey_address1 <= zext_ln265_1_fu_340_p1(8 - 1 downto 0);
            else 
                RoundKey_address1 <= "XXXXXXXX";
            end if;
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage6_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage7_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= xor_ln265_reg_807;
    ap_return_1 <= xor_ln265_1_reg_812;
    ap_return_10 <= xor_ln265_10_reg_857;
    ap_return_11 <= xor_ln265_11_reg_862;
    ap_return_12 <= xor_ln265_12_reg_867;
    ap_return_13 <= xor_ln265_13_reg_872;
    ap_return_14 <= xor_ln265_14_fu_557_p2;
    ap_return_15 <= xor_ln265_15_fu_562_p2;
    ap_return_2 <= xor_ln265_2_reg_817;
    ap_return_3 <= xor_ln265_3_reg_822;
    ap_return_4 <= xor_ln265_4_reg_827;
    ap_return_5 <= xor_ln265_5_reg_832;
    ap_return_6 <= xor_ln265_6_reg_837;
    ap_return_7 <= xor_ln265_7_reg_842;
    ap_return_8 <= xor_ln265_8_reg_847;
    ap_return_9 <= xor_ln265_9_reg_852;
    or_ln265_10_fu_435_p2 <= (shl_ln_reg_649 or ap_const_lv8_B);
    or_ln265_11_fu_445_p2 <= (shl_ln_reg_649 or ap_const_lv8_C);
    or_ln265_12_fu_455_p2 <= (shl_ln_reg_649 or ap_const_lv8_D);
    or_ln265_13_fu_537_p2 <= (shl_ln_reg_649 or ap_const_lv8_E);
    or_ln265_14_fu_547_p2 <= (shl_ln_reg_649 or ap_const_lv8_F);
    or_ln265_1_fu_345_p2 <= (shl_ln_reg_649 or ap_const_lv8_2);
    or_ln265_2_fu_355_p2 <= (shl_ln_reg_649 or ap_const_lv8_3);
    or_ln265_3_fu_365_p2 <= (shl_ln_reg_649 or ap_const_lv8_4);
    or_ln265_4_fu_375_p2 <= (shl_ln_reg_649 or ap_const_lv8_5);
    or_ln265_5_fu_385_p2 <= (shl_ln_reg_649 or ap_const_lv8_6);
    or_ln265_6_fu_395_p2 <= (shl_ln_reg_649 or ap_const_lv8_7);
    or_ln265_7_fu_405_p2 <= (shl_ln_reg_649 or ap_const_lv8_8);
    or_ln265_8_fu_415_p2 <= (shl_ln_reg_649 or ap_const_lv8_9);
    or_ln265_9_fu_425_p2 <= (shl_ln_reg_649 or ap_const_lv8_A);
    or_ln265_fu_334_p2 <= (shl_ln_fu_321_p3 or ap_const_lv8_1);
    shl_ln_fu_321_p3 <= (trunc_ln265_fu_317_p1 & ap_const_lv4_0);
    trunc_ln265_fu_317_p1 <= round(4 - 1 downto 0);
    xor_ln265_10_fu_515_p2 <= (ap_port_reg_state_2_2_read xor RoundKey_load_10_reg_777);
    xor_ln265_11_fu_520_p2 <= (ap_port_reg_state_2_3_read xor RoundKey_load_11_reg_782);
    xor_ln265_12_fu_525_p2 <= (ap_port_reg_state_3_0_read xor RoundKey_q0);
    xor_ln265_13_fu_531_p2 <= (ap_port_reg_state_3_1_read xor RoundKey_q1);
    xor_ln265_14_fu_557_p2 <= (state_3_2_read_3_reg_802 xor RoundKey_q0);
    xor_ln265_15_fu_562_p2 <= (state_3_3_read_4_reg_797 xor RoundKey_q1);
    xor_ln265_1_fu_470_p2 <= (ap_port_reg_state_0_1_read xor RoundKey_load_1_reg_682);
    xor_ln265_2_fu_475_p2 <= (ap_port_reg_state_0_2_read xor RoundKey_load_2_reg_697);
    xor_ln265_3_fu_480_p2 <= (ap_port_reg_state_0_3_read xor RoundKey_load_3_reg_702);
    xor_ln265_4_fu_485_p2 <= (ap_port_reg_state_1_0_read xor RoundKey_load_4_reg_717);
    xor_ln265_5_fu_490_p2 <= (ap_port_reg_state_1_1_read xor RoundKey_load_5_reg_722);
    xor_ln265_6_fu_495_p2 <= (ap_port_reg_state_1_2_read xor RoundKey_load_6_reg_737);
    xor_ln265_7_fu_500_p2 <= (ap_port_reg_state_1_3_read xor RoundKey_load_7_reg_742);
    xor_ln265_8_fu_505_p2 <= (ap_port_reg_state_2_0_read xor RoundKey_load_8_reg_757);
    xor_ln265_9_fu_510_p2 <= (ap_port_reg_state_2_1_read xor RoundKey_load_9_reg_762);
    xor_ln265_fu_465_p2 <= (ap_port_reg_state_0_0_read xor RoundKey_load_reg_677);
    zext_ln265_10_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_9_fu_425_p2),64));
    zext_ln265_11_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_10_fu_435_p2),64));
    zext_ln265_12_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_11_fu_445_p2),64));
    zext_ln265_13_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_12_fu_455_p2),64));
    zext_ln265_14_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_13_fu_537_p2),64));
    zext_ln265_15_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_14_fu_547_p2),64));
    zext_ln265_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_fu_334_p2),64));
    zext_ln265_2_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_1_fu_345_p2),64));
    zext_ln265_3_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_2_fu_355_p2),64));
    zext_ln265_4_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_3_fu_365_p2),64));
    zext_ln265_5_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_4_fu_375_p2),64));
    zext_ln265_6_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_5_fu_385_p2),64));
    zext_ln265_7_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_6_fu_395_p2),64));
    zext_ln265_8_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_7_fu_405_p2),64));
    zext_ln265_9_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_8_fu_415_p2),64));
    zext_ln265_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_321_p3),64));
end behav;
