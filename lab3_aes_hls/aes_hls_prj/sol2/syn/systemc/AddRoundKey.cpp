// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage3 = "1000";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage4 = "10000";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage5 = "100000";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage6 = "1000000";
const sc_lv<8> AddRoundKey::ap_ST_fsm_pp0_stage7 = "10000000";
const bool AddRoundKey::ap_const_boolean_1 = true;
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AddRoundKey::ap_const_boolean_0 = false;
const sc_lv<32> AddRoundKey::ap_const_lv32_7 = "111";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> AddRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> AddRoundKey::ap_const_lv32_6 = "110";
const sc_lv<4> AddRoundKey::ap_const_lv4_0 = "0000";
const sc_lv<8> AddRoundKey::ap_const_lv8_1 = "1";
const sc_lv<8> AddRoundKey::ap_const_lv8_2 = "10";
const sc_lv<8> AddRoundKey::ap_const_lv8_3 = "11";
const sc_lv<8> AddRoundKey::ap_const_lv8_4 = "100";
const sc_lv<8> AddRoundKey::ap_const_lv8_5 = "101";
const sc_lv<8> AddRoundKey::ap_const_lv8_6 = "110";
const sc_lv<8> AddRoundKey::ap_const_lv8_7 = "111";
const sc_lv<8> AddRoundKey::ap_const_lv8_8 = "1000";
const sc_lv<8> AddRoundKey::ap_const_lv8_9 = "1001";
const sc_lv<8> AddRoundKey::ap_const_lv8_A = "1010";
const sc_lv<8> AddRoundKey::ap_const_lv8_B = "1011";
const sc_lv<8> AddRoundKey::ap_const_lv8_C = "1100";
const sc_lv<8> AddRoundKey::ap_const_lv8_D = "1101";
const sc_lv<8> AddRoundKey::ap_const_lv8_E = "1110";
const sc_lv<8> AddRoundKey::ap_const_lv8_F = "1111";

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( zext_ln265_fu_329_p1 );
    sensitive << ( zext_ln265_2_fu_350_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln265_4_fu_370_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln265_6_fu_390_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln265_8_fu_410_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( zext_ln265_10_fu_430_p1 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( zext_ln265_12_fu_450_p1 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( zext_ln265_14_fu_542_p1 );
    sensitive << ( ap_block_pp0_stage7 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( zext_ln265_1_fu_340_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln265_3_fu_360_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln265_5_fu_380_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln265_7_fu_400_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( zext_ln265_9_fu_420_p1 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( zext_ln265_11_fu_440_p1 );
    sensitive << ( ap_block_pp0_stage6 );
    sensitive << ( zext_ln265_13_fu_460_p1 );
    sensitive << ( ap_block_pp0_stage7 );
    sensitive << ( zext_ln265_15_fu_552_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_11001);

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_11001);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_11001);

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage7_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp0_1to1);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_reset_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_reg_807 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_1_reg_812 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_10_reg_857 );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_11_reg_862 );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_12_reg_867 );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_13_reg_872 );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_14_fu_557_p2 );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_15_fu_562_p2 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_2_reg_817 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_3_reg_822 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_4_reg_827 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_5_reg_832 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_6_reg_837 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_7_reg_842 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_8_reg_847 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( xor_ln265_9_reg_852 );

    SC_METHOD(thread_or_ln265_10_fu_435_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_11_fu_445_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_12_fu_455_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_13_fu_537_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_14_fu_547_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_1_fu_345_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_2_fu_355_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_3_fu_365_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_4_fu_375_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_5_fu_385_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_6_fu_395_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_7_fu_405_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_8_fu_415_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_9_fu_425_p2);
    sensitive << ( shl_ln_reg_649 );

    SC_METHOD(thread_or_ln265_fu_334_p2);
    sensitive << ( shl_ln_fu_321_p3 );

    SC_METHOD(thread_shl_ln_fu_321_p3);
    sensitive << ( trunc_ln265_fu_317_p1 );

    SC_METHOD(thread_trunc_ln265_fu_317_p1);
    sensitive << ( round );

    SC_METHOD(thread_xor_ln265_10_fu_515_p2);
    sensitive << ( RoundKey_load_10_reg_777 );
    sensitive << ( ap_port_reg_state_2_2_read );

    SC_METHOD(thread_xor_ln265_11_fu_520_p2);
    sensitive << ( RoundKey_load_11_reg_782 );
    sensitive << ( ap_port_reg_state_2_3_read );

    SC_METHOD(thread_xor_ln265_12_fu_525_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( ap_port_reg_state_3_0_read );

    SC_METHOD(thread_xor_ln265_13_fu_531_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( ap_port_reg_state_3_1_read );

    SC_METHOD(thread_xor_ln265_14_fu_557_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_3_2_read_3_reg_802 );

    SC_METHOD(thread_xor_ln265_15_fu_562_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_3_3_read_4_reg_797 );

    SC_METHOD(thread_xor_ln265_1_fu_470_p2);
    sensitive << ( RoundKey_load_1_reg_682 );
    sensitive << ( ap_port_reg_state_0_1_read );

    SC_METHOD(thread_xor_ln265_2_fu_475_p2);
    sensitive << ( RoundKey_load_2_reg_697 );
    sensitive << ( ap_port_reg_state_0_2_read );

    SC_METHOD(thread_xor_ln265_3_fu_480_p2);
    sensitive << ( RoundKey_load_3_reg_702 );
    sensitive << ( ap_port_reg_state_0_3_read );

    SC_METHOD(thread_xor_ln265_4_fu_485_p2);
    sensitive << ( RoundKey_load_4_reg_717 );
    sensitive << ( ap_port_reg_state_1_0_read );

    SC_METHOD(thread_xor_ln265_5_fu_490_p2);
    sensitive << ( RoundKey_load_5_reg_722 );
    sensitive << ( ap_port_reg_state_1_1_read );

    SC_METHOD(thread_xor_ln265_6_fu_495_p2);
    sensitive << ( RoundKey_load_6_reg_737 );
    sensitive << ( ap_port_reg_state_1_2_read );

    SC_METHOD(thread_xor_ln265_7_fu_500_p2);
    sensitive << ( RoundKey_load_7_reg_742 );
    sensitive << ( ap_port_reg_state_1_3_read );

    SC_METHOD(thread_xor_ln265_8_fu_505_p2);
    sensitive << ( RoundKey_load_8_reg_757 );
    sensitive << ( ap_port_reg_state_2_0_read );

    SC_METHOD(thread_xor_ln265_9_fu_510_p2);
    sensitive << ( RoundKey_load_9_reg_762 );
    sensitive << ( ap_port_reg_state_2_1_read );

    SC_METHOD(thread_xor_ln265_fu_465_p2);
    sensitive << ( RoundKey_load_reg_677 );
    sensitive << ( ap_port_reg_state_0_0_read );

    SC_METHOD(thread_zext_ln265_10_fu_430_p1);
    sensitive << ( or_ln265_9_fu_425_p2 );

    SC_METHOD(thread_zext_ln265_11_fu_440_p1);
    sensitive << ( or_ln265_10_fu_435_p2 );

    SC_METHOD(thread_zext_ln265_12_fu_450_p1);
    sensitive << ( or_ln265_11_fu_445_p2 );

    SC_METHOD(thread_zext_ln265_13_fu_460_p1);
    sensitive << ( or_ln265_12_fu_455_p2 );

    SC_METHOD(thread_zext_ln265_14_fu_542_p1);
    sensitive << ( or_ln265_13_fu_537_p2 );

    SC_METHOD(thread_zext_ln265_15_fu_552_p1);
    sensitive << ( or_ln265_14_fu_547_p2 );

    SC_METHOD(thread_zext_ln265_1_fu_340_p1);
    sensitive << ( or_ln265_fu_334_p2 );

    SC_METHOD(thread_zext_ln265_2_fu_350_p1);
    sensitive << ( or_ln265_1_fu_345_p2 );

    SC_METHOD(thread_zext_ln265_3_fu_360_p1);
    sensitive << ( or_ln265_2_fu_355_p2 );

    SC_METHOD(thread_zext_ln265_4_fu_370_p1);
    sensitive << ( or_ln265_3_fu_365_p2 );

    SC_METHOD(thread_zext_ln265_5_fu_380_p1);
    sensitive << ( or_ln265_4_fu_375_p2 );

    SC_METHOD(thread_zext_ln265_6_fu_390_p1);
    sensitive << ( or_ln265_5_fu_385_p2 );

    SC_METHOD(thread_zext_ln265_7_fu_400_p1);
    sensitive << ( or_ln265_6_fu_395_p2 );

    SC_METHOD(thread_zext_ln265_8_fu_410_p1);
    sensitive << ( or_ln265_7_fu_405_p2 );

    SC_METHOD(thread_zext_ln265_9_fu_420_p1);
    sensitive << ( or_ln265_8_fu_415_p2 );

    SC_METHOD(thread_zext_ln265_fu_329_p1);
    sensitive << ( shl_ln_fu_321_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_reset_start_pp0 );
    sensitive << ( ap_idle_pp0_1to1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );

    ap_CS_fsm = "00000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, state_0_0_read, "(port)state_0_0_read");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_0_read, "(port)state_1_0_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_0_read, "(port)state_2_0_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_0_read, "(port)state_3_0_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage7_iter0, "ap_block_state8_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, shl_ln_fu_321_p3, "shl_ln_fu_321_p3");
    sc_trace(mVcdFile, shl_ln_reg_649, "shl_ln_reg_649");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter1, "ap_block_state9_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, RoundKey_load_reg_677, "RoundKey_load_reg_677");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, RoundKey_load_1_reg_682, "RoundKey_load_1_reg_682");
    sc_trace(mVcdFile, RoundKey_load_2_reg_697, "RoundKey_load_2_reg_697");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, RoundKey_load_3_reg_702, "RoundKey_load_3_reg_702");
    sc_trace(mVcdFile, RoundKey_load_4_reg_717, "RoundKey_load_4_reg_717");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage3_iter0, "ap_block_state4_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, RoundKey_load_5_reg_722, "RoundKey_load_5_reg_722");
    sc_trace(mVcdFile, RoundKey_load_6_reg_737, "RoundKey_load_6_reg_737");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage4_iter0, "ap_block_state5_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, RoundKey_load_7_reg_742, "RoundKey_load_7_reg_742");
    sc_trace(mVcdFile, RoundKey_load_8_reg_757, "RoundKey_load_8_reg_757");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage5_iter0, "ap_block_state6_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, RoundKey_load_9_reg_762, "RoundKey_load_9_reg_762");
    sc_trace(mVcdFile, RoundKey_load_10_reg_777, "RoundKey_load_10_reg_777");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage6_iter0, "ap_block_state7_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, RoundKey_load_11_reg_782, "RoundKey_load_11_reg_782");
    sc_trace(mVcdFile, state_3_3_read_4_reg_797, "state_3_3_read_4_reg_797");
    sc_trace(mVcdFile, state_3_2_read_3_reg_802, "state_3_2_read_3_reg_802");
    sc_trace(mVcdFile, xor_ln265_fu_465_p2, "xor_ln265_fu_465_p2");
    sc_trace(mVcdFile, xor_ln265_reg_807, "xor_ln265_reg_807");
    sc_trace(mVcdFile, xor_ln265_1_fu_470_p2, "xor_ln265_1_fu_470_p2");
    sc_trace(mVcdFile, xor_ln265_1_reg_812, "xor_ln265_1_reg_812");
    sc_trace(mVcdFile, xor_ln265_2_fu_475_p2, "xor_ln265_2_fu_475_p2");
    sc_trace(mVcdFile, xor_ln265_2_reg_817, "xor_ln265_2_reg_817");
    sc_trace(mVcdFile, xor_ln265_3_fu_480_p2, "xor_ln265_3_fu_480_p2");
    sc_trace(mVcdFile, xor_ln265_3_reg_822, "xor_ln265_3_reg_822");
    sc_trace(mVcdFile, xor_ln265_4_fu_485_p2, "xor_ln265_4_fu_485_p2");
    sc_trace(mVcdFile, xor_ln265_4_reg_827, "xor_ln265_4_reg_827");
    sc_trace(mVcdFile, xor_ln265_5_fu_490_p2, "xor_ln265_5_fu_490_p2");
    sc_trace(mVcdFile, xor_ln265_5_reg_832, "xor_ln265_5_reg_832");
    sc_trace(mVcdFile, xor_ln265_6_fu_495_p2, "xor_ln265_6_fu_495_p2");
    sc_trace(mVcdFile, xor_ln265_6_reg_837, "xor_ln265_6_reg_837");
    sc_trace(mVcdFile, xor_ln265_7_fu_500_p2, "xor_ln265_7_fu_500_p2");
    sc_trace(mVcdFile, xor_ln265_7_reg_842, "xor_ln265_7_reg_842");
    sc_trace(mVcdFile, xor_ln265_8_fu_505_p2, "xor_ln265_8_fu_505_p2");
    sc_trace(mVcdFile, xor_ln265_8_reg_847, "xor_ln265_8_reg_847");
    sc_trace(mVcdFile, xor_ln265_9_fu_510_p2, "xor_ln265_9_fu_510_p2");
    sc_trace(mVcdFile, xor_ln265_9_reg_852, "xor_ln265_9_reg_852");
    sc_trace(mVcdFile, xor_ln265_10_fu_515_p2, "xor_ln265_10_fu_515_p2");
    sc_trace(mVcdFile, xor_ln265_10_reg_857, "xor_ln265_10_reg_857");
    sc_trace(mVcdFile, xor_ln265_11_fu_520_p2, "xor_ln265_11_fu_520_p2");
    sc_trace(mVcdFile, xor_ln265_11_reg_862, "xor_ln265_11_reg_862");
    sc_trace(mVcdFile, xor_ln265_12_fu_525_p2, "xor_ln265_12_fu_525_p2");
    sc_trace(mVcdFile, xor_ln265_12_reg_867, "xor_ln265_12_reg_867");
    sc_trace(mVcdFile, xor_ln265_13_fu_531_p2, "xor_ln265_13_fu_531_p2");
    sc_trace(mVcdFile, xor_ln265_13_reg_872, "xor_ln265_13_reg_872");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, ap_port_reg_state_0_0_read, "ap_port_reg_state_0_0_read");
    sc_trace(mVcdFile, ap_port_reg_state_0_1_read, "ap_port_reg_state_0_1_read");
    sc_trace(mVcdFile, ap_port_reg_state_0_2_read, "ap_port_reg_state_0_2_read");
    sc_trace(mVcdFile, ap_port_reg_state_0_3_read, "ap_port_reg_state_0_3_read");
    sc_trace(mVcdFile, ap_port_reg_state_1_0_read, "ap_port_reg_state_1_0_read");
    sc_trace(mVcdFile, ap_port_reg_state_1_1_read, "ap_port_reg_state_1_1_read");
    sc_trace(mVcdFile, ap_port_reg_state_1_2_read, "ap_port_reg_state_1_2_read");
    sc_trace(mVcdFile, ap_port_reg_state_1_3_read, "ap_port_reg_state_1_3_read");
    sc_trace(mVcdFile, ap_port_reg_state_2_0_read, "ap_port_reg_state_2_0_read");
    sc_trace(mVcdFile, ap_port_reg_state_2_1_read, "ap_port_reg_state_2_1_read");
    sc_trace(mVcdFile, ap_port_reg_state_2_2_read, "ap_port_reg_state_2_2_read");
    sc_trace(mVcdFile, ap_port_reg_state_2_3_read, "ap_port_reg_state_2_3_read");
    sc_trace(mVcdFile, ap_port_reg_state_3_0_read, "ap_port_reg_state_3_0_read");
    sc_trace(mVcdFile, ap_port_reg_state_3_1_read, "ap_port_reg_state_3_1_read");
    sc_trace(mVcdFile, ap_port_reg_state_3_2_read, "ap_port_reg_state_3_2_read");
    sc_trace(mVcdFile, ap_port_reg_state_3_3_read, "ap_port_reg_state_3_3_read");
    sc_trace(mVcdFile, zext_ln265_fu_329_p1, "zext_ln265_fu_329_p1");
    sc_trace(mVcdFile, zext_ln265_1_fu_340_p1, "zext_ln265_1_fu_340_p1");
    sc_trace(mVcdFile, zext_ln265_2_fu_350_p1, "zext_ln265_2_fu_350_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, zext_ln265_3_fu_360_p1, "zext_ln265_3_fu_360_p1");
    sc_trace(mVcdFile, zext_ln265_4_fu_370_p1, "zext_ln265_4_fu_370_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, zext_ln265_5_fu_380_p1, "zext_ln265_5_fu_380_p1");
    sc_trace(mVcdFile, zext_ln265_6_fu_390_p1, "zext_ln265_6_fu_390_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, zext_ln265_7_fu_400_p1, "zext_ln265_7_fu_400_p1");
    sc_trace(mVcdFile, zext_ln265_8_fu_410_p1, "zext_ln265_8_fu_410_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, zext_ln265_9_fu_420_p1, "zext_ln265_9_fu_420_p1");
    sc_trace(mVcdFile, zext_ln265_10_fu_430_p1, "zext_ln265_10_fu_430_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, zext_ln265_11_fu_440_p1, "zext_ln265_11_fu_440_p1");
    sc_trace(mVcdFile, zext_ln265_12_fu_450_p1, "zext_ln265_12_fu_450_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, zext_ln265_13_fu_460_p1, "zext_ln265_13_fu_460_p1");
    sc_trace(mVcdFile, zext_ln265_14_fu_542_p1, "zext_ln265_14_fu_542_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, zext_ln265_15_fu_552_p1, "zext_ln265_15_fu_552_p1");
    sc_trace(mVcdFile, trunc_ln265_fu_317_p1, "trunc_ln265_fu_317_p1");
    sc_trace(mVcdFile, or_ln265_fu_334_p2, "or_ln265_fu_334_p2");
    sc_trace(mVcdFile, or_ln265_1_fu_345_p2, "or_ln265_1_fu_345_p2");
    sc_trace(mVcdFile, or_ln265_2_fu_355_p2, "or_ln265_2_fu_355_p2");
    sc_trace(mVcdFile, or_ln265_3_fu_365_p2, "or_ln265_3_fu_365_p2");
    sc_trace(mVcdFile, or_ln265_4_fu_375_p2, "or_ln265_4_fu_375_p2");
    sc_trace(mVcdFile, or_ln265_5_fu_385_p2, "or_ln265_5_fu_385_p2");
    sc_trace(mVcdFile, or_ln265_6_fu_395_p2, "or_ln265_6_fu_395_p2");
    sc_trace(mVcdFile, or_ln265_7_fu_405_p2, "or_ln265_7_fu_405_p2");
    sc_trace(mVcdFile, or_ln265_8_fu_415_p2, "or_ln265_8_fu_415_p2");
    sc_trace(mVcdFile, or_ln265_9_fu_425_p2, "or_ln265_9_fu_425_p2");
    sc_trace(mVcdFile, or_ln265_10_fu_435_p2, "or_ln265_10_fu_435_p2");
    sc_trace(mVcdFile, or_ln265_11_fu_445_p2, "or_ln265_11_fu_445_p2");
    sc_trace(mVcdFile, or_ln265_12_fu_455_p2, "or_ln265_12_fu_455_p2");
    sc_trace(mVcdFile, or_ln265_13_fu_537_p2, "or_ln265_13_fu_537_p2");
    sc_trace(mVcdFile, or_ln265_14_fu_547_p2, "or_ln265_14_fu_547_p2");
    sc_trace(mVcdFile, xor_ln265_14_fu_557_p2, "xor_ln265_14_fu_557_p2");
    sc_trace(mVcdFile, xor_ln265_15_fu_562_p2, "xor_ln265_15_fu_562_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_reset_start_pp0, "ap_reset_start_pp0");
    sc_trace(mVcdFile, ap_idle_pp0_1to1, "ap_idle_pp0_1to1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_10_reg_777 = RoundKey_q0.read();
        RoundKey_load_11_reg_782 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_1_reg_682 = RoundKey_q1.read();
        RoundKey_load_reg_677 = RoundKey_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_2_reg_697 = RoundKey_q0.read();
        RoundKey_load_3_reg_702 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_4_reg_717 = RoundKey_q0.read();
        RoundKey_load_5_reg_722 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_6_reg_737 = RoundKey_q0.read();
        RoundKey_load_7_reg_742 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        RoundKey_load_8_reg_757 = RoundKey_q0.read();
        RoundKey_load_9_reg_762 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_port_reg_state_0_0_read = state_0_0_read.read();
        ap_port_reg_state_0_1_read = state_0_1_read.read();
        ap_port_reg_state_0_2_read = state_0_2_read.read();
        ap_port_reg_state_0_3_read = state_0_3_read.read();
        ap_port_reg_state_1_0_read = state_1_0_read.read();
        ap_port_reg_state_1_1_read = state_1_1_read.read();
        ap_port_reg_state_1_2_read = state_1_2_read.read();
        ap_port_reg_state_1_3_read = state_1_3_read.read();
        ap_port_reg_state_2_0_read = state_2_0_read.read();
        ap_port_reg_state_2_1_read = state_2_1_read.read();
        ap_port_reg_state_2_2_read = state_2_2_read.read();
        ap_port_reg_state_2_3_read = state_2_3_read.read();
        ap_port_reg_state_3_0_read = state_3_0_read.read();
        ap_port_reg_state_3_1_read = state_3_1_read.read();
        ap_port_reg_state_3_2_read = state_3_2_read.read();
        ap_port_reg_state_3_3_read = state_3_3_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        shl_ln_reg_649 = shl_ln_fu_321_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        state_3_2_read_3_reg_802 = ap_port_reg_state_3_2_read.read();
        state_3_3_read_4_reg_797 = ap_port_reg_state_3_3_read.read();
        xor_ln265_10_reg_857 = xor_ln265_10_fu_515_p2.read();
        xor_ln265_11_reg_862 = xor_ln265_11_fu_520_p2.read();
        xor_ln265_12_reg_867 = xor_ln265_12_fu_525_p2.read();
        xor_ln265_13_reg_872 = xor_ln265_13_fu_531_p2.read();
        xor_ln265_1_reg_812 = xor_ln265_1_fu_470_p2.read();
        xor_ln265_2_reg_817 = xor_ln265_2_fu_475_p2.read();
        xor_ln265_3_reg_822 = xor_ln265_3_fu_480_p2.read();
        xor_ln265_4_reg_827 = xor_ln265_4_fu_485_p2.read();
        xor_ln265_5_reg_832 = xor_ln265_5_fu_490_p2.read();
        xor_ln265_6_reg_837 = xor_ln265_6_fu_495_p2.read();
        xor_ln265_7_reg_842 = xor_ln265_7_fu_500_p2.read();
        xor_ln265_8_reg_847 = xor_ln265_8_fu_505_p2.read();
        xor_ln265_9_reg_852 = xor_ln265_9_fu_510_p2.read();
        xor_ln265_reg_807 = xor_ln265_fu_465_p2.read();
    }
}

void AddRoundKey::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_14_fu_542_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_12_fu_450_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_10_fu_430_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_8_fu_410_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_6_fu_390_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_4_fu_370_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_2_fu_350_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            RoundKey_address0 =  (sc_lv<8>) (zext_ln265_fu_329_p1.read());
        } else {
            RoundKey_address0 = "XXXXXXXX";
        }
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_15_fu_552_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_13_fu_460_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_11_fu_440_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_9_fu_420_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_7_fu_400_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_5_fu_380_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_3_fu_360_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            RoundKey_address1 =  (sc_lv<8>) (zext_ln265_1_fu_340_p1.read());
        } else {
            RoundKey_address1 = "XXXXXXXX";
        }
    } else {
        RoundKey_address1 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[5];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[6];
}

void AddRoundKey::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[7];
}

void AddRoundKey::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void AddRoundKey::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())));
}

void AddRoundKey::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0);
}

void AddRoundKey::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void AddRoundKey::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state4_pp0_stage3_iter0() {
    ap_block_state4_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state5_pp0_stage4_iter0() {
    ap_block_state5_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state6_pp0_stage5_iter0() {
    ap_block_state6_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state7_pp0_stage6_iter0() {
    ap_block_state7_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state8_pp0_stage7_iter0() {
    ap_block_state8_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_block_state9_pp0_stage0_iter1() {
    ap_block_state9_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AddRoundKey::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle_pp0_1to1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read())) {
        ap_idle_pp0_1to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_reset_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_reset_start_pp0 = ap_const_logic_1;
    } else {
        ap_reset_start_pp0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_return_0() {
    ap_return_0 = xor_ln265_reg_807.read();
}

void AddRoundKey::thread_ap_return_1() {
    ap_return_1 = xor_ln265_1_reg_812.read();
}

void AddRoundKey::thread_ap_return_10() {
    ap_return_10 = xor_ln265_10_reg_857.read();
}

void AddRoundKey::thread_ap_return_11() {
    ap_return_11 = xor_ln265_11_reg_862.read();
}

void AddRoundKey::thread_ap_return_12() {
    ap_return_12 = xor_ln265_12_reg_867.read();
}

void AddRoundKey::thread_ap_return_13() {
    ap_return_13 = xor_ln265_13_reg_872.read();
}

void AddRoundKey::thread_ap_return_14() {
    ap_return_14 = xor_ln265_14_fu_557_p2.read();
}

void AddRoundKey::thread_ap_return_15() {
    ap_return_15 = xor_ln265_15_fu_562_p2.read();
}

void AddRoundKey::thread_ap_return_2() {
    ap_return_2 = xor_ln265_2_reg_817.read();
}

void AddRoundKey::thread_ap_return_3() {
    ap_return_3 = xor_ln265_3_reg_822.read();
}

void AddRoundKey::thread_ap_return_4() {
    ap_return_4 = xor_ln265_4_reg_827.read();
}

void AddRoundKey::thread_ap_return_5() {
    ap_return_5 = xor_ln265_5_reg_832.read();
}

void AddRoundKey::thread_ap_return_6() {
    ap_return_6 = xor_ln265_6_reg_837.read();
}

void AddRoundKey::thread_ap_return_7() {
    ap_return_7 = xor_ln265_7_reg_842.read();
}

void AddRoundKey::thread_ap_return_8() {
    ap_return_8 = xor_ln265_8_reg_847.read();
}

void AddRoundKey::thread_ap_return_9() {
    ap_return_9 = xor_ln265_9_reg_852.read();
}

void AddRoundKey::thread_or_ln265_10_fu_435_p2() {
    or_ln265_10_fu_435_p2 = (shl_ln_reg_649.read() | ap_const_lv8_B);
}

void AddRoundKey::thread_or_ln265_11_fu_445_p2() {
    or_ln265_11_fu_445_p2 = (shl_ln_reg_649.read() | ap_const_lv8_C);
}

void AddRoundKey::thread_or_ln265_12_fu_455_p2() {
    or_ln265_12_fu_455_p2 = (shl_ln_reg_649.read() | ap_const_lv8_D);
}

void AddRoundKey::thread_or_ln265_13_fu_537_p2() {
    or_ln265_13_fu_537_p2 = (shl_ln_reg_649.read() | ap_const_lv8_E);
}

void AddRoundKey::thread_or_ln265_14_fu_547_p2() {
    or_ln265_14_fu_547_p2 = (shl_ln_reg_649.read() | ap_const_lv8_F);
}

void AddRoundKey::thread_or_ln265_1_fu_345_p2() {
    or_ln265_1_fu_345_p2 = (shl_ln_reg_649.read() | ap_const_lv8_2);
}

void AddRoundKey::thread_or_ln265_2_fu_355_p2() {
    or_ln265_2_fu_355_p2 = (shl_ln_reg_649.read() | ap_const_lv8_3);
}

void AddRoundKey::thread_or_ln265_3_fu_365_p2() {
    or_ln265_3_fu_365_p2 = (shl_ln_reg_649.read() | ap_const_lv8_4);
}

void AddRoundKey::thread_or_ln265_4_fu_375_p2() {
    or_ln265_4_fu_375_p2 = (shl_ln_reg_649.read() | ap_const_lv8_5);
}

void AddRoundKey::thread_or_ln265_5_fu_385_p2() {
    or_ln265_5_fu_385_p2 = (shl_ln_reg_649.read() | ap_const_lv8_6);
}

void AddRoundKey::thread_or_ln265_6_fu_395_p2() {
    or_ln265_6_fu_395_p2 = (shl_ln_reg_649.read() | ap_const_lv8_7);
}

void AddRoundKey::thread_or_ln265_7_fu_405_p2() {
    or_ln265_7_fu_405_p2 = (shl_ln_reg_649.read() | ap_const_lv8_8);
}

void AddRoundKey::thread_or_ln265_8_fu_415_p2() {
    or_ln265_8_fu_415_p2 = (shl_ln_reg_649.read() | ap_const_lv8_9);
}

void AddRoundKey::thread_or_ln265_9_fu_425_p2() {
    or_ln265_9_fu_425_p2 = (shl_ln_reg_649.read() | ap_const_lv8_A);
}

void AddRoundKey::thread_or_ln265_fu_334_p2() {
    or_ln265_fu_334_p2 = (shl_ln_fu_321_p3.read() | ap_const_lv8_1);
}

void AddRoundKey::thread_shl_ln_fu_321_p3() {
    shl_ln_fu_321_p3 = esl_concat<4,4>(trunc_ln265_fu_317_p1.read(), ap_const_lv4_0);
}

void AddRoundKey::thread_trunc_ln265_fu_317_p1() {
    trunc_ln265_fu_317_p1 = round.read().range(4-1, 0);
}

void AddRoundKey::thread_xor_ln265_10_fu_515_p2() {
    xor_ln265_10_fu_515_p2 = (RoundKey_load_10_reg_777.read() ^ ap_port_reg_state_2_2_read.read());
}

void AddRoundKey::thread_xor_ln265_11_fu_520_p2() {
    xor_ln265_11_fu_520_p2 = (RoundKey_load_11_reg_782.read() ^ ap_port_reg_state_2_3_read.read());
}

void AddRoundKey::thread_xor_ln265_12_fu_525_p2() {
    xor_ln265_12_fu_525_p2 = (RoundKey_q0.read() ^ ap_port_reg_state_3_0_read.read());
}

void AddRoundKey::thread_xor_ln265_13_fu_531_p2() {
    xor_ln265_13_fu_531_p2 = (RoundKey_q1.read() ^ ap_port_reg_state_3_1_read.read());
}

void AddRoundKey::thread_xor_ln265_14_fu_557_p2() {
    xor_ln265_14_fu_557_p2 = (RoundKey_q0.read() ^ state_3_2_read_3_reg_802.read());
}

void AddRoundKey::thread_xor_ln265_15_fu_562_p2() {
    xor_ln265_15_fu_562_p2 = (RoundKey_q1.read() ^ state_3_3_read_4_reg_797.read());
}

void AddRoundKey::thread_xor_ln265_1_fu_470_p2() {
    xor_ln265_1_fu_470_p2 = (RoundKey_load_1_reg_682.read() ^ ap_port_reg_state_0_1_read.read());
}

void AddRoundKey::thread_xor_ln265_2_fu_475_p2() {
    xor_ln265_2_fu_475_p2 = (RoundKey_load_2_reg_697.read() ^ ap_port_reg_state_0_2_read.read());
}

void AddRoundKey::thread_xor_ln265_3_fu_480_p2() {
    xor_ln265_3_fu_480_p2 = (RoundKey_load_3_reg_702.read() ^ ap_port_reg_state_0_3_read.read());
}

void AddRoundKey::thread_xor_ln265_4_fu_485_p2() {
    xor_ln265_4_fu_485_p2 = (RoundKey_load_4_reg_717.read() ^ ap_port_reg_state_1_0_read.read());
}

void AddRoundKey::thread_xor_ln265_5_fu_490_p2() {
    xor_ln265_5_fu_490_p2 = (RoundKey_load_5_reg_722.read() ^ ap_port_reg_state_1_1_read.read());
}

void AddRoundKey::thread_xor_ln265_6_fu_495_p2() {
    xor_ln265_6_fu_495_p2 = (RoundKey_load_6_reg_737.read() ^ ap_port_reg_state_1_2_read.read());
}

void AddRoundKey::thread_xor_ln265_7_fu_500_p2() {
    xor_ln265_7_fu_500_p2 = (RoundKey_load_7_reg_742.read() ^ ap_port_reg_state_1_3_read.read());
}

void AddRoundKey::thread_xor_ln265_8_fu_505_p2() {
    xor_ln265_8_fu_505_p2 = (RoundKey_load_8_reg_757.read() ^ ap_port_reg_state_2_0_read.read());
}

void AddRoundKey::thread_xor_ln265_9_fu_510_p2() {
    xor_ln265_9_fu_510_p2 = (RoundKey_load_9_reg_762.read() ^ ap_port_reg_state_2_1_read.read());
}

void AddRoundKey::thread_xor_ln265_fu_465_p2() {
    xor_ln265_fu_465_p2 = (RoundKey_load_reg_677.read() ^ ap_port_reg_state_0_0_read.read());
}

void AddRoundKey::thread_zext_ln265_10_fu_430_p1() {
    zext_ln265_10_fu_430_p1 = esl_zext<64,8>(or_ln265_9_fu_425_p2.read());
}

void AddRoundKey::thread_zext_ln265_11_fu_440_p1() {
    zext_ln265_11_fu_440_p1 = esl_zext<64,8>(or_ln265_10_fu_435_p2.read());
}

void AddRoundKey::thread_zext_ln265_12_fu_450_p1() {
    zext_ln265_12_fu_450_p1 = esl_zext<64,8>(or_ln265_11_fu_445_p2.read());
}

void AddRoundKey::thread_zext_ln265_13_fu_460_p1() {
    zext_ln265_13_fu_460_p1 = esl_zext<64,8>(or_ln265_12_fu_455_p2.read());
}

void AddRoundKey::thread_zext_ln265_14_fu_542_p1() {
    zext_ln265_14_fu_542_p1 = esl_zext<64,8>(or_ln265_13_fu_537_p2.read());
}

void AddRoundKey::thread_zext_ln265_15_fu_552_p1() {
    zext_ln265_15_fu_552_p1 = esl_zext<64,8>(or_ln265_14_fu_547_p2.read());
}

void AddRoundKey::thread_zext_ln265_1_fu_340_p1() {
    zext_ln265_1_fu_340_p1 = esl_zext<64,8>(or_ln265_fu_334_p2.read());
}

void AddRoundKey::thread_zext_ln265_2_fu_350_p1() {
    zext_ln265_2_fu_350_p1 = esl_zext<64,8>(or_ln265_1_fu_345_p2.read());
}

void AddRoundKey::thread_zext_ln265_3_fu_360_p1() {
    zext_ln265_3_fu_360_p1 = esl_zext<64,8>(or_ln265_2_fu_355_p2.read());
}

void AddRoundKey::thread_zext_ln265_4_fu_370_p1() {
    zext_ln265_4_fu_370_p1 = esl_zext<64,8>(or_ln265_3_fu_365_p2.read());
}

void AddRoundKey::thread_zext_ln265_5_fu_380_p1() {
    zext_ln265_5_fu_380_p1 = esl_zext<64,8>(or_ln265_4_fu_375_p2.read());
}

void AddRoundKey::thread_zext_ln265_6_fu_390_p1() {
    zext_ln265_6_fu_390_p1 = esl_zext<64,8>(or_ln265_5_fu_385_p2.read());
}

void AddRoundKey::thread_zext_ln265_7_fu_400_p1() {
    zext_ln265_7_fu_400_p1 = esl_zext<64,8>(or_ln265_6_fu_395_p2.read());
}

void AddRoundKey::thread_zext_ln265_8_fu_410_p1() {
    zext_ln265_8_fu_410_p1 = esl_zext<64,8>(or_ln265_7_fu_405_p2.read());
}

void AddRoundKey::thread_zext_ln265_9_fu_420_p1() {
    zext_ln265_9_fu_420_p1 = esl_zext<64,8>(or_ln265_8_fu_415_p2.read());
}

void AddRoundKey::thread_zext_ln265_fu_329_p1() {
    zext_ln265_fu_329_p1 = esl_zext<64,8>(shl_ln_fu_321_p3.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0) && !(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_start_pp0.read())) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read())) || (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_start_pp0.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

