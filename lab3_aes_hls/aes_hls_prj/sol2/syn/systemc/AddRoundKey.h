// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<5> > round;
    sc_in< sc_lv<8> > state_0_0_read;
    sc_in< sc_lv<8> > state_0_1_read;
    sc_in< sc_lv<8> > state_0_2_read;
    sc_in< sc_lv<8> > state_0_3_read;
    sc_in< sc_lv<8> > state_1_0_read;
    sc_in< sc_lv<8> > state_1_1_read;
    sc_in< sc_lv<8> > state_1_2_read;
    sc_in< sc_lv<8> > state_1_3_read;
    sc_in< sc_lv<8> > state_2_0_read;
    sc_in< sc_lv<8> > state_2_1_read;
    sc_in< sc_lv<8> > state_2_2_read;
    sc_in< sc_lv<8> > state_2_3_read;
    sc_in< sc_lv<8> > state_3_0_read;
    sc_in< sc_lv<8> > state_3_1_read;
    sc_in< sc_lv<8> > state_3_2_read;
    sc_in< sc_lv<8> > state_3_3_read;
    sc_out< sc_lv<8> > RoundKey_address0;
    sc_out< sc_logic > RoundKey_ce0;
    sc_in< sc_lv<8> > RoundKey_q0;
    sc_out< sc_lv<8> > RoundKey_address1;
    sc_out< sc_logic > RoundKey_ce1;
    sc_in< sc_lv<8> > RoundKey_q1;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage7;
    sc_signal< bool > ap_block_state8_pp0_stage7_iter0;
    sc_signal< bool > ap_block_pp0_stage7_11001;
    sc_signal< sc_lv<8> > shl_ln_fu_321_p3;
    sc_signal< sc_lv<8> > shl_ln_reg_649;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > RoundKey_load_reg_677;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<8> > RoundKey_load_1_reg_682;
    sc_signal< sc_lv<8> > RoundKey_load_2_reg_697;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<8> > RoundKey_load_3_reg_702;
    sc_signal< sc_lv<8> > RoundKey_load_4_reg_717;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<8> > RoundKey_load_5_reg_722;
    sc_signal< sc_lv<8> > RoundKey_load_6_reg_737;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state5_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_lv<8> > RoundKey_load_7_reg_742;
    sc_signal< sc_lv<8> > RoundKey_load_8_reg_757;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_state6_pp0_stage5_iter0;
    sc_signal< bool > ap_block_pp0_stage5_11001;
    sc_signal< sc_lv<8> > RoundKey_load_9_reg_762;
    sc_signal< sc_lv<8> > RoundKey_load_10_reg_777;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_state7_pp0_stage6_iter0;
    sc_signal< bool > ap_block_pp0_stage6_11001;
    sc_signal< sc_lv<8> > RoundKey_load_11_reg_782;
    sc_signal< sc_lv<8> > state_3_3_read_4_reg_797;
    sc_signal< sc_lv<8> > state_3_2_read_3_reg_802;
    sc_signal< sc_lv<8> > xor_ln265_fu_465_p2;
    sc_signal< sc_lv<8> > xor_ln265_reg_807;
    sc_signal< sc_lv<8> > xor_ln265_1_fu_470_p2;
    sc_signal< sc_lv<8> > xor_ln265_1_reg_812;
    sc_signal< sc_lv<8> > xor_ln265_2_fu_475_p2;
    sc_signal< sc_lv<8> > xor_ln265_2_reg_817;
    sc_signal< sc_lv<8> > xor_ln265_3_fu_480_p2;
    sc_signal< sc_lv<8> > xor_ln265_3_reg_822;
    sc_signal< sc_lv<8> > xor_ln265_4_fu_485_p2;
    sc_signal< sc_lv<8> > xor_ln265_4_reg_827;
    sc_signal< sc_lv<8> > xor_ln265_5_fu_490_p2;
    sc_signal< sc_lv<8> > xor_ln265_5_reg_832;
    sc_signal< sc_lv<8> > xor_ln265_6_fu_495_p2;
    sc_signal< sc_lv<8> > xor_ln265_6_reg_837;
    sc_signal< sc_lv<8> > xor_ln265_7_fu_500_p2;
    sc_signal< sc_lv<8> > xor_ln265_7_reg_842;
    sc_signal< sc_lv<8> > xor_ln265_8_fu_505_p2;
    sc_signal< sc_lv<8> > xor_ln265_8_reg_847;
    sc_signal< sc_lv<8> > xor_ln265_9_fu_510_p2;
    sc_signal< sc_lv<8> > xor_ln265_9_reg_852;
    sc_signal< sc_lv<8> > xor_ln265_10_fu_515_p2;
    sc_signal< sc_lv<8> > xor_ln265_10_reg_857;
    sc_signal< sc_lv<8> > xor_ln265_11_fu_520_p2;
    sc_signal< sc_lv<8> > xor_ln265_11_reg_862;
    sc_signal< sc_lv<8> > xor_ln265_12_fu_525_p2;
    sc_signal< sc_lv<8> > xor_ln265_12_reg_867;
    sc_signal< sc_lv<8> > xor_ln265_13_fu_531_p2;
    sc_signal< sc_lv<8> > xor_ln265_13_reg_872;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage7_subdone;
    sc_signal< sc_lv<8> > ap_port_reg_state_0_0_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_0_1_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_0_2_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_0_3_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_1_0_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_1_1_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_1_2_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_1_3_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_2_0_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_2_1_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_2_2_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_2_3_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_3_0_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_3_1_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_3_2_read;
    sc_signal< sc_lv<8> > ap_port_reg_state_3_3_read;
    sc_signal< sc_lv<64> > zext_ln265_fu_329_p1;
    sc_signal< sc_lv<64> > zext_ln265_1_fu_340_p1;
    sc_signal< sc_lv<64> > zext_ln265_2_fu_350_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln265_3_fu_360_p1;
    sc_signal< sc_lv<64> > zext_ln265_4_fu_370_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > zext_ln265_5_fu_380_p1;
    sc_signal< sc_lv<64> > zext_ln265_6_fu_390_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > zext_ln265_7_fu_400_p1;
    sc_signal< sc_lv<64> > zext_ln265_8_fu_410_p1;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_lv<64> > zext_ln265_9_fu_420_p1;
    sc_signal< sc_lv<64> > zext_ln265_10_fu_430_p1;
    sc_signal< bool > ap_block_pp0_stage5;
    sc_signal< sc_lv<64> > zext_ln265_11_fu_440_p1;
    sc_signal< sc_lv<64> > zext_ln265_12_fu_450_p1;
    sc_signal< bool > ap_block_pp0_stage6;
    sc_signal< sc_lv<64> > zext_ln265_13_fu_460_p1;
    sc_signal< sc_lv<64> > zext_ln265_14_fu_542_p1;
    sc_signal< bool > ap_block_pp0_stage7;
    sc_signal< sc_lv<64> > zext_ln265_15_fu_552_p1;
    sc_signal< sc_lv<4> > trunc_ln265_fu_317_p1;
    sc_signal< sc_lv<8> > or_ln265_fu_334_p2;
    sc_signal< sc_lv<8> > or_ln265_1_fu_345_p2;
    sc_signal< sc_lv<8> > or_ln265_2_fu_355_p2;
    sc_signal< sc_lv<8> > or_ln265_3_fu_365_p2;
    sc_signal< sc_lv<8> > or_ln265_4_fu_375_p2;
    sc_signal< sc_lv<8> > or_ln265_5_fu_385_p2;
    sc_signal< sc_lv<8> > or_ln265_6_fu_395_p2;
    sc_signal< sc_lv<8> > or_ln265_7_fu_405_p2;
    sc_signal< sc_lv<8> > or_ln265_8_fu_415_p2;
    sc_signal< sc_lv<8> > or_ln265_9_fu_425_p2;
    sc_signal< sc_lv<8> > or_ln265_10_fu_435_p2;
    sc_signal< sc_lv<8> > or_ln265_11_fu_445_p2;
    sc_signal< sc_lv<8> > or_ln265_12_fu_455_p2;
    sc_signal< sc_lv<8> > or_ln265_13_fu_537_p2;
    sc_signal< sc_lv<8> > or_ln265_14_fu_547_p2;
    sc_signal< sc_lv<8> > xor_ln265_14_fu_557_p2;
    sc_signal< sc_lv<8> > xor_ln265_15_fu_562_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage5_subdone;
    sc_signal< bool > ap_block_pp0_stage6_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_pp0_stage1;
    static const sc_lv<8> ap_ST_fsm_pp0_stage2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage3;
    static const sc_lv<8> ap_ST_fsm_pp0_stage4;
    static const sc_lv<8> ap_ST_fsm_pp0_stage5;
    static const sc_lv<8> ap_ST_fsm_pp0_stage6;
    static const sc_lv<8> ap_ST_fsm_pp0_stage7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<8> ap_const_lv8_8;
    static const sc_lv<8> ap_const_lv8_9;
    static const sc_lv<8> ap_const_lv8_A;
    static const sc_lv<8> ap_const_lv8_B;
    static const sc_lv<8> ap_const_lv8_C;
    static const sc_lv<8> ap_const_lv8_D;
    static const sc_lv<8> ap_const_lv8_E;
    static const sc_lv<8> ap_const_lv8_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_RoundKey_address0();
    void thread_RoundKey_address1();
    void thread_RoundKey_ce0();
    void thread_RoundKey_ce1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_pp0_stage5();
    void thread_ap_block_pp0_stage5_11001();
    void thread_ap_block_pp0_stage5_subdone();
    void thread_ap_block_pp0_stage6();
    void thread_ap_block_pp0_stage6_11001();
    void thread_ap_block_pp0_stage6_subdone();
    void thread_ap_block_pp0_stage7();
    void thread_ap_block_pp0_stage7_11001();
    void thread_ap_block_pp0_stage7_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage4_iter0();
    void thread_ap_block_state6_pp0_stage5_iter0();
    void thread_ap_block_state7_pp0_stage6_iter0();
    void thread_ap_block_state8_pp0_stage7_iter0();
    void thread_ap_block_state9_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_or_ln265_10_fu_435_p2();
    void thread_or_ln265_11_fu_445_p2();
    void thread_or_ln265_12_fu_455_p2();
    void thread_or_ln265_13_fu_537_p2();
    void thread_or_ln265_14_fu_547_p2();
    void thread_or_ln265_1_fu_345_p2();
    void thread_or_ln265_2_fu_355_p2();
    void thread_or_ln265_3_fu_365_p2();
    void thread_or_ln265_4_fu_375_p2();
    void thread_or_ln265_5_fu_385_p2();
    void thread_or_ln265_6_fu_395_p2();
    void thread_or_ln265_7_fu_405_p2();
    void thread_or_ln265_8_fu_415_p2();
    void thread_or_ln265_9_fu_425_p2();
    void thread_or_ln265_fu_334_p2();
    void thread_shl_ln_fu_321_p3();
    void thread_trunc_ln265_fu_317_p1();
    void thread_xor_ln265_10_fu_515_p2();
    void thread_xor_ln265_11_fu_520_p2();
    void thread_xor_ln265_12_fu_525_p2();
    void thread_xor_ln265_13_fu_531_p2();
    void thread_xor_ln265_14_fu_557_p2();
    void thread_xor_ln265_15_fu_562_p2();
    void thread_xor_ln265_1_fu_470_p2();
    void thread_xor_ln265_2_fu_475_p2();
    void thread_xor_ln265_3_fu_480_p2();
    void thread_xor_ln265_4_fu_485_p2();
    void thread_xor_ln265_5_fu_490_p2();
    void thread_xor_ln265_6_fu_495_p2();
    void thread_xor_ln265_7_fu_500_p2();
    void thread_xor_ln265_8_fu_505_p2();
    void thread_xor_ln265_9_fu_510_p2();
    void thread_xor_ln265_fu_465_p2();
    void thread_zext_ln265_10_fu_430_p1();
    void thread_zext_ln265_11_fu_440_p1();
    void thread_zext_ln265_12_fu_450_p1();
    void thread_zext_ln265_13_fu_460_p1();
    void thread_zext_ln265_14_fu_542_p1();
    void thread_zext_ln265_15_fu_552_p1();
    void thread_zext_ln265_1_fu_340_p1();
    void thread_zext_ln265_2_fu_350_p1();
    void thread_zext_ln265_3_fu_360_p1();
    void thread_zext_ln265_4_fu_370_p1();
    void thread_zext_ln265_5_fu_380_p1();
    void thread_zext_ln265_6_fu_390_p1();
    void thread_zext_ln265_7_fu_400_p1();
    void thread_zext_ln265_8_fu_410_p1();
    void thread_zext_ln265_9_fu_420_p1();
    void thread_zext_ln265_fu_329_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
