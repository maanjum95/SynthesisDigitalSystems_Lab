// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ShiftRows.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ShiftRows::ap_const_logic_1 = sc_dt::Log_1;
const bool ShiftRows::ap_const_boolean_1 = true;
const sc_logic ShiftRows::ap_const_logic_0 = sc_dt::Log_0;

ShiftRows::ShiftRows(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( state_1_1_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( state_2_2_read );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( state_1_2_read );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( state_2_3_read );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( state_3_3_read );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( state_2_1_read );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( state_3_2_read );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( state_0_3_read );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( state_3_1_read );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( state_0_2_read );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( state_1_3_read );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( state_0_1_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ShiftRows_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
#endif

    }
}

ShiftRows::~ShiftRows() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ShiftRows::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void ShiftRows::thread_ap_return_0() {
    ap_return_0 = state_1_1_read.read();
}

void ShiftRows::thread_ap_return_1() {
    ap_return_1 = state_2_2_read.read();
}

void ShiftRows::thread_ap_return_10() {
    ap_return_10 = state_1_2_read.read();
}

void ShiftRows::thread_ap_return_11() {
    ap_return_11 = state_2_3_read.read();
}

void ShiftRows::thread_ap_return_2() {
    ap_return_2 = state_3_3_read.read();
}

void ShiftRows::thread_ap_return_3() {
    ap_return_3 = state_2_1_read.read();
}

void ShiftRows::thread_ap_return_4() {
    ap_return_4 = state_3_2_read.read();
}

void ShiftRows::thread_ap_return_5() {
    ap_return_5 = state_0_3_read.read();
}

void ShiftRows::thread_ap_return_6() {
    ap_return_6 = state_3_1_read.read();
}

void ShiftRows::thread_ap_return_7() {
    ap_return_7 = state_0_2_read.read();
}

void ShiftRows::thread_ap_return_8() {
    ap_return_8 = state_1_3_read.read();
}

void ShiftRows::thread_ap_return_9() {
    ap_return_9 = state_0_1_read.read();
}

}

