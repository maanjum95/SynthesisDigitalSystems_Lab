-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (4 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_374 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_reg_632 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_16_reg_637 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_17_reg_642 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_18_reg_647 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_19_reg_652 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_addr_20_reg_657 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_22_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_23_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_21_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_addr_22_reg_677 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_24_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_25_reg_687 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_23_reg_692 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_addr_24_reg_697 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_26_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_27_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_25_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_addr_26_reg_717 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_28_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_29_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_27_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal state_addr_28_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_load_30_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_31_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_addr_29_reg_752 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal state_addr_30_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_32_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_load_33_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln265_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_2_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_3_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_4_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_5_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_6_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_7_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_8_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_9_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_10_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_11_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_12_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_13_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_14_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_15_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_2_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_3_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_4_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_5_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_6_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_7_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_8_fu_536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_9_fu_542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_10_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_11_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_12_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln265_13_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln265_fu_392_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln265_fu_409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_1_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_2_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_3_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_4_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_5_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_6_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_7_fu_516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_8_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_9_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_10_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_11_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_12_fu_590_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_13_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_14_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_370 <= state_q0;
                reg_374 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    shl_ln_reg_762(7 downto 4) <= shl_ln_fu_396_p3(7 downto 4);
                state_load_32_reg_790 <= state_q0;
                state_load_33_reg_795 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                state_load_22_reg_662 <= state_q0;
                state_load_23_reg_667 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                state_load_24_reg_682 <= state_q0;
                state_load_25_reg_687 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_load_26_reg_702 <= state_q0;
                state_load_27_reg_707 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                state_load_28_reg_722 <= state_q0;
                state_load_29_reg_727 <= state_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                state_load_30_reg_742 <= state_q0;
                state_load_31_reg_747 <= state_q1;
            end if;
        end if;
    end process;
    shl_ln_reg_762(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    RoundKey_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln265_fu_404_p1, zext_ln265_2_fu_425_p1, zext_ln265_4_fu_457_p1, zext_ln265_6_fu_489_p1, zext_ln265_8_fu_521_p1, zext_ln265_10_fu_553_p1, zext_ln265_12_fu_585_p1, zext_ln265_14_fu_617_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_address0 <= zext_ln265_14_fu_617_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_address0 <= zext_ln265_12_fu_585_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            RoundKey_address0 <= zext_ln265_10_fu_553_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            RoundKey_address0 <= zext_ln265_8_fu_521_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address0 <= zext_ln265_6_fu_489_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address0 <= zext_ln265_4_fu_457_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address0 <= zext_ln265_2_fu_425_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address0 <= zext_ln265_fu_404_p1(8 - 1 downto 0);
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln265_1_fu_415_p1, zext_ln265_3_fu_435_p1, zext_ln265_5_fu_467_p1, zext_ln265_7_fu_499_p1, zext_ln265_9_fu_531_p1, zext_ln265_11_fu_563_p1, zext_ln265_13_fu_595_p1, zext_ln265_15_fu_627_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_address1 <= zext_ln265_15_fu_627_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_address1 <= zext_ln265_13_fu_595_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            RoundKey_address1 <= zext_ln265_11_fu_563_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            RoundKey_address1 <= zext_ln265_9_fu_531_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address1 <= zext_ln265_7_fu_499_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address1 <= zext_ln265_5_fu_467_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address1 <= zext_ln265_3_fu_435_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address1 <= zext_ln265_1_fu_415_p1(8 - 1 downto 0);
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_378_p2 <= (reg_370 xor RoundKey_q0);
    grp_fu_385_p2 <= (reg_374 xor RoundKey_q1);
    or_ln265_10_fu_558_p2 <= (shl_ln_reg_762 or ap_const_lv8_B);
    or_ln265_11_fu_580_p2 <= (shl_ln_reg_762 or ap_const_lv8_C);
    or_ln265_12_fu_590_p2 <= (shl_ln_reg_762 or ap_const_lv8_D);
    or_ln265_13_fu_612_p2 <= (shl_ln_reg_762 or ap_const_lv8_E);
    or_ln265_14_fu_622_p2 <= (shl_ln_reg_762 or ap_const_lv8_F);
    or_ln265_1_fu_420_p2 <= (shl_ln_reg_762 or ap_const_lv8_2);
    or_ln265_2_fu_430_p2 <= (shl_ln_reg_762 or ap_const_lv8_3);
    or_ln265_3_fu_452_p2 <= (shl_ln_reg_762 or ap_const_lv8_4);
    or_ln265_4_fu_462_p2 <= (shl_ln_reg_762 or ap_const_lv8_5);
    or_ln265_5_fu_484_p2 <= (shl_ln_reg_762 or ap_const_lv8_6);
    or_ln265_6_fu_494_p2 <= (shl_ln_reg_762 or ap_const_lv8_7);
    or_ln265_7_fu_516_p2 <= (shl_ln_reg_762 or ap_const_lv8_8);
    or_ln265_8_fu_526_p2 <= (shl_ln_reg_762 or ap_const_lv8_9);
    or_ln265_9_fu_548_p2 <= (shl_ln_reg_762 or ap_const_lv8_A);
    or_ln265_fu_409_p2 <= (shl_ln_fu_396_p3 or ap_const_lv8_1);
    shl_ln_fu_396_p3 <= (trunc_ln265_fu_392_p1 & ap_const_lv4_0);
    state_addr_16_reg_637 <= ap_const_lv64_1(4 - 1 downto 0);
    state_addr_17_reg_642 <= ap_const_lv64_2(4 - 1 downto 0);
    state_addr_18_reg_647 <= ap_const_lv64_3(4 - 1 downto 0);
    state_addr_19_reg_652 <= ap_const_lv64_4(4 - 1 downto 0);
    state_addr_20_reg_657 <= ap_const_lv64_5(4 - 1 downto 0);
    state_addr_21_reg_672 <= ap_const_lv64_6(4 - 1 downto 0);
    state_addr_22_reg_677 <= ap_const_lv64_7(4 - 1 downto 0);
    state_addr_23_reg_692 <= ap_const_lv64_8(4 - 1 downto 0);
    state_addr_24_reg_697 <= ap_const_lv64_9(4 - 1 downto 0);
    state_addr_25_reg_712 <= ap_const_lv64_A(4 - 1 downto 0);
    state_addr_26_reg_717 <= ap_const_lv64_B(4 - 1 downto 0);
    state_addr_27_reg_732 <= ap_const_lv64_C(4 - 1 downto 0);
    state_addr_28_reg_737 <= ap_const_lv64_D(4 - 1 downto 0);
    state_addr_29_reg_752 <= ap_const_lv64_E(4 - 1 downto 0);
    state_addr_30_reg_757 <= ap_const_lv64_F(4 - 1 downto 0);
    state_addr_reg_632 <= ap_const_lv64_0(4 - 1 downto 0);

    state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_addr_reg_632, state_addr_17_reg_642, state_addr_19_reg_652, ap_CS_fsm_state3, state_addr_21_reg_672, ap_CS_fsm_state4, state_addr_23_reg_692, ap_CS_fsm_state5, state_addr_25_reg_712, ap_CS_fsm_state6, state_addr_27_reg_732, ap_CS_fsm_state7, state_addr_29_reg_752, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address0 <= state_addr_29_reg_752;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address0 <= state_addr_27_reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address0 <= state_addr_25_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address0 <= state_addr_23_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address0 <= state_addr_21_reg_672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= state_addr_19_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address0 <= state_addr_17_reg_642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= state_addr_reg_632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_addr_16_reg_637, state_addr_18_reg_647, ap_CS_fsm_state3, state_addr_20_reg_657, ap_CS_fsm_state4, state_addr_22_reg_677, ap_CS_fsm_state5, state_addr_24_reg_697, ap_CS_fsm_state6, state_addr_26_reg_717, ap_CS_fsm_state7, state_addr_28_reg_737, ap_CS_fsm_state8, state_addr_30_reg_757, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_address1 <= state_addr_30_reg_757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_address1 <= state_addr_28_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_address1 <= state_addr_26_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_address1 <= state_addr_24_reg_697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= state_addr_22_reg_677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= state_addr_20_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_address1 <= state_addr_18_reg_647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= state_addr_16_reg_637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_378_p2, xor_ln265_2_fu_440_p2, xor_ln265_4_fu_472_p2, xor_ln265_6_fu_504_p2, xor_ln265_8_fu_536_p2, xor_ln265_10_fu_568_p2, xor_ln265_12_fu_600_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d0 <= xor_ln265_12_fu_600_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d0 <= xor_ln265_10_fu_568_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= xor_ln265_8_fu_536_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d0 <= xor_ln265_6_fu_504_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d0 <= xor_ln265_4_fu_472_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d0 <= xor_ln265_2_fu_440_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_d0 <= grp_fu_378_p2;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_385_p2, xor_ln265_3_fu_446_p2, xor_ln265_5_fu_478_p2, xor_ln265_7_fu_510_p2, xor_ln265_9_fu_542_p2, xor_ln265_11_fu_574_p2, xor_ln265_13_fu_606_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_d1 <= xor_ln265_13_fu_606_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_d1 <= xor_ln265_11_fu_574_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d1 <= xor_ln265_9_fu_542_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_d1 <= xor_ln265_7_fu_510_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= xor_ln265_5_fu_478_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_d1 <= xor_ln265_3_fu_446_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_d1 <= grp_fu_385_p2;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln265_fu_392_p1 <= round(4 - 1 downto 0);
    xor_ln265_10_fu_568_p2 <= (state_load_30_reg_742 xor RoundKey_q0);
    xor_ln265_11_fu_574_p2 <= (state_load_31_reg_747 xor RoundKey_q1);
    xor_ln265_12_fu_600_p2 <= (state_load_32_reg_790 xor RoundKey_q0);
    xor_ln265_13_fu_606_p2 <= (state_load_33_reg_795 xor RoundKey_q1);
    xor_ln265_2_fu_440_p2 <= (state_load_22_reg_662 xor RoundKey_q0);
    xor_ln265_3_fu_446_p2 <= (state_load_23_reg_667 xor RoundKey_q1);
    xor_ln265_4_fu_472_p2 <= (state_load_24_reg_682 xor RoundKey_q0);
    xor_ln265_5_fu_478_p2 <= (state_load_25_reg_687 xor RoundKey_q1);
    xor_ln265_6_fu_504_p2 <= (state_load_26_reg_702 xor RoundKey_q0);
    xor_ln265_7_fu_510_p2 <= (state_load_27_reg_707 xor RoundKey_q1);
    xor_ln265_8_fu_536_p2 <= (state_load_28_reg_722 xor RoundKey_q0);
    xor_ln265_9_fu_542_p2 <= (state_load_29_reg_727 xor RoundKey_q1);
    zext_ln265_10_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_9_fu_548_p2),64));
    zext_ln265_11_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_10_fu_558_p2),64));
    zext_ln265_12_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_11_fu_580_p2),64));
    zext_ln265_13_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_12_fu_590_p2),64));
    zext_ln265_14_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_13_fu_612_p2),64));
    zext_ln265_15_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_14_fu_622_p2),64));
    zext_ln265_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_fu_409_p2),64));
    zext_ln265_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_1_fu_420_p2),64));
    zext_ln265_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_2_fu_430_p2),64));
    zext_ln265_4_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_3_fu_452_p2),64));
    zext_ln265_5_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_4_fu_462_p2),64));
    zext_ln265_6_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_5_fu_484_p2),64));
    zext_ln265_7_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_6_fu_494_p2),64));
    zext_ln265_8_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_7_fu_516_p2),64));
    zext_ln265_9_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_8_fu_526_p2),64));
    zext_ln265_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_396_p3),64));
end behav;
