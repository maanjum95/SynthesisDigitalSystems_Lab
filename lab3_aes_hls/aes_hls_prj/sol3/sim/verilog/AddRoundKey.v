// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        round,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] round;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
input  [7:0] RoundKey_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_370;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_374;
wire   [3:0] state_addr_reg_632;
wire   [3:0] state_addr_16_reg_637;
wire   [3:0] state_addr_17_reg_642;
wire   [3:0] state_addr_18_reg_647;
wire   [3:0] state_addr_19_reg_652;
wire    ap_CS_fsm_state3;
wire   [3:0] state_addr_20_reg_657;
reg   [7:0] state_load_22_reg_662;
reg   [7:0] state_load_23_reg_667;
wire   [3:0] state_addr_21_reg_672;
wire    ap_CS_fsm_state4;
wire   [3:0] state_addr_22_reg_677;
reg   [7:0] state_load_24_reg_682;
reg   [7:0] state_load_25_reg_687;
wire   [3:0] state_addr_23_reg_692;
wire    ap_CS_fsm_state5;
wire   [3:0] state_addr_24_reg_697;
reg   [7:0] state_load_26_reg_702;
reg   [7:0] state_load_27_reg_707;
wire   [3:0] state_addr_25_reg_712;
wire    ap_CS_fsm_state6;
wire   [3:0] state_addr_26_reg_717;
reg   [7:0] state_load_28_reg_722;
reg   [7:0] state_load_29_reg_727;
wire   [3:0] state_addr_27_reg_732;
wire    ap_CS_fsm_state7;
wire   [3:0] state_addr_28_reg_737;
reg   [7:0] state_load_30_reg_742;
reg   [7:0] state_load_31_reg_747;
wire   [3:0] state_addr_29_reg_752;
wire    ap_CS_fsm_state8;
wire   [3:0] state_addr_30_reg_757;
wire   [7:0] shl_ln_fu_396_p3;
reg   [7:0] shl_ln_reg_762;
reg   [7:0] state_load_32_reg_790;
reg   [7:0] state_load_33_reg_795;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln265_fu_404_p1;
wire   [63:0] zext_ln265_1_fu_415_p1;
wire   [63:0] zext_ln265_2_fu_425_p1;
wire   [63:0] zext_ln265_3_fu_435_p1;
wire   [63:0] zext_ln265_4_fu_457_p1;
wire   [63:0] zext_ln265_5_fu_467_p1;
wire   [63:0] zext_ln265_6_fu_489_p1;
wire   [63:0] zext_ln265_7_fu_499_p1;
wire   [63:0] zext_ln265_8_fu_521_p1;
wire   [63:0] zext_ln265_9_fu_531_p1;
wire   [63:0] zext_ln265_10_fu_553_p1;
wire   [63:0] zext_ln265_11_fu_563_p1;
wire   [63:0] zext_ln265_12_fu_585_p1;
wire   [63:0] zext_ln265_13_fu_595_p1;
wire   [63:0] zext_ln265_14_fu_617_p1;
wire   [63:0] zext_ln265_15_fu_627_p1;
wire   [7:0] grp_fu_378_p2;
wire   [7:0] grp_fu_385_p2;
wire   [7:0] xor_ln265_2_fu_440_p2;
wire   [7:0] xor_ln265_3_fu_446_p2;
wire   [7:0] xor_ln265_4_fu_472_p2;
wire   [7:0] xor_ln265_5_fu_478_p2;
wire   [7:0] xor_ln265_6_fu_504_p2;
wire   [7:0] xor_ln265_7_fu_510_p2;
wire   [7:0] xor_ln265_8_fu_536_p2;
wire   [7:0] xor_ln265_9_fu_542_p2;
wire   [7:0] xor_ln265_10_fu_568_p2;
wire   [7:0] xor_ln265_11_fu_574_p2;
wire   [7:0] xor_ln265_12_fu_600_p2;
wire   [7:0] xor_ln265_13_fu_606_p2;
wire    ap_CS_fsm_state16;
wire   [3:0] trunc_ln265_fu_392_p1;
wire   [7:0] or_ln265_fu_409_p2;
wire   [7:0] or_ln265_1_fu_420_p2;
wire   [7:0] or_ln265_2_fu_430_p2;
wire   [7:0] or_ln265_3_fu_452_p2;
wire   [7:0] or_ln265_4_fu_462_p2;
wire   [7:0] or_ln265_5_fu_484_p2;
wire   [7:0] or_ln265_6_fu_494_p2;
wire   [7:0] or_ln265_7_fu_516_p2;
wire   [7:0] or_ln265_8_fu_526_p2;
wire   [7:0] or_ln265_9_fu_548_p2;
wire   [7:0] or_ln265_10_fu_558_p2;
wire   [7:0] or_ln265_11_fu_580_p2;
wire   [7:0] or_ln265_12_fu_590_p2;
wire   [7:0] or_ln265_13_fu_612_p2;
wire   [7:0] or_ln265_14_fu_622_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_370 <= state_q0;
        reg_374 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shl_ln_reg_762[7 : 4] <= shl_ln_fu_396_p3[7 : 4];
        state_load_32_reg_790 <= state_q0;
        state_load_33_reg_795 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_load_22_reg_662 <= state_q0;
        state_load_23_reg_667 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_load_24_reg_682 <= state_q0;
        state_load_25_reg_687 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_load_26_reg_702 <= state_q0;
        state_load_27_reg_707 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_load_28_reg_722 <= state_q0;
        state_load_29_reg_727 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_30_reg_742 <= state_q0;
        state_load_31_reg_747 <= state_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        RoundKey_address0 = zext_ln265_14_fu_617_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        RoundKey_address0 = zext_ln265_12_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        RoundKey_address0 = zext_ln265_10_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_address0 = zext_ln265_8_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address0 = zext_ln265_6_fu_489_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = zext_ln265_4_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = zext_ln265_2_fu_425_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln265_fu_404_p1;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        RoundKey_address1 = zext_ln265_15_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        RoundKey_address1 = zext_ln265_13_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        RoundKey_address1 = zext_ln265_11_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_address1 = zext_ln265_9_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address1 = zext_ln265_7_fu_499_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = zext_ln265_5_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = zext_ln265_3_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln265_1_fu_415_p1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address0 = state_addr_29_reg_752;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address0 = state_addr_27_reg_732;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address0 = state_addr_25_reg_712;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address0 = state_addr_23_reg_692;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_21_reg_672;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_19_reg_652;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_17_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_reg_632;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_address1 = state_addr_30_reg_757;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_address1 = state_addr_28_reg_737;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_address1 = state_addr_26_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_address1 = state_addr_24_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_22_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_20_reg_657;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_18_reg_647;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_16_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = xor_ln265_12_fu_600_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = xor_ln265_10_fu_568_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = xor_ln265_8_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = xor_ln265_6_fu_504_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = xor_ln265_4_fu_472_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = xor_ln265_2_fu_440_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        state_d0 = grp_fu_378_p2;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = xor_ln265_13_fu_606_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = xor_ln265_11_fu_574_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = xor_ln265_9_fu_542_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = xor_ln265_7_fu_510_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = xor_ln265_5_fu_478_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = xor_ln265_3_fu_446_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        state_d1 = grp_fu_385_p2;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_378_p2 = (reg_370 ^ RoundKey_q0);

assign grp_fu_385_p2 = (reg_374 ^ RoundKey_q1);

assign or_ln265_10_fu_558_p2 = (shl_ln_reg_762 | 8'd11);

assign or_ln265_11_fu_580_p2 = (shl_ln_reg_762 | 8'd12);

assign or_ln265_12_fu_590_p2 = (shl_ln_reg_762 | 8'd13);

assign or_ln265_13_fu_612_p2 = (shl_ln_reg_762 | 8'd14);

assign or_ln265_14_fu_622_p2 = (shl_ln_reg_762 | 8'd15);

assign or_ln265_1_fu_420_p2 = (shl_ln_reg_762 | 8'd2);

assign or_ln265_2_fu_430_p2 = (shl_ln_reg_762 | 8'd3);

assign or_ln265_3_fu_452_p2 = (shl_ln_reg_762 | 8'd4);

assign or_ln265_4_fu_462_p2 = (shl_ln_reg_762 | 8'd5);

assign or_ln265_5_fu_484_p2 = (shl_ln_reg_762 | 8'd6);

assign or_ln265_6_fu_494_p2 = (shl_ln_reg_762 | 8'd7);

assign or_ln265_7_fu_516_p2 = (shl_ln_reg_762 | 8'd8);

assign or_ln265_8_fu_526_p2 = (shl_ln_reg_762 | 8'd9);

assign or_ln265_9_fu_548_p2 = (shl_ln_reg_762 | 8'd10);

assign or_ln265_fu_409_p2 = (shl_ln_fu_396_p3 | 8'd1);

assign shl_ln_fu_396_p3 = {{trunc_ln265_fu_392_p1}, {4'd0}};

assign state_addr_16_reg_637 = 64'd1;

assign state_addr_17_reg_642 = 64'd2;

assign state_addr_18_reg_647 = 64'd3;

assign state_addr_19_reg_652 = 64'd4;

assign state_addr_20_reg_657 = 64'd5;

assign state_addr_21_reg_672 = 64'd6;

assign state_addr_22_reg_677 = 64'd7;

assign state_addr_23_reg_692 = 64'd8;

assign state_addr_24_reg_697 = 64'd9;

assign state_addr_25_reg_712 = 64'd10;

assign state_addr_26_reg_717 = 64'd11;

assign state_addr_27_reg_732 = 64'd12;

assign state_addr_28_reg_737 = 64'd13;

assign state_addr_29_reg_752 = 64'd14;

assign state_addr_30_reg_757 = 64'd15;

assign state_addr_reg_632 = 64'd0;

assign trunc_ln265_fu_392_p1 = round[3:0];

assign xor_ln265_10_fu_568_p2 = (state_load_30_reg_742 ^ RoundKey_q0);

assign xor_ln265_11_fu_574_p2 = (state_load_31_reg_747 ^ RoundKey_q1);

assign xor_ln265_12_fu_600_p2 = (state_load_32_reg_790 ^ RoundKey_q0);

assign xor_ln265_13_fu_606_p2 = (state_load_33_reg_795 ^ RoundKey_q1);

assign xor_ln265_2_fu_440_p2 = (state_load_22_reg_662 ^ RoundKey_q0);

assign xor_ln265_3_fu_446_p2 = (state_load_23_reg_667 ^ RoundKey_q1);

assign xor_ln265_4_fu_472_p2 = (state_load_24_reg_682 ^ RoundKey_q0);

assign xor_ln265_5_fu_478_p2 = (state_load_25_reg_687 ^ RoundKey_q1);

assign xor_ln265_6_fu_504_p2 = (state_load_26_reg_702 ^ RoundKey_q0);

assign xor_ln265_7_fu_510_p2 = (state_load_27_reg_707 ^ RoundKey_q1);

assign xor_ln265_8_fu_536_p2 = (state_load_28_reg_722 ^ RoundKey_q0);

assign xor_ln265_9_fu_542_p2 = (state_load_29_reg_727 ^ RoundKey_q1);

assign zext_ln265_10_fu_553_p1 = or_ln265_9_fu_548_p2;

assign zext_ln265_11_fu_563_p1 = or_ln265_10_fu_558_p2;

assign zext_ln265_12_fu_585_p1 = or_ln265_11_fu_580_p2;

assign zext_ln265_13_fu_595_p1 = or_ln265_12_fu_590_p2;

assign zext_ln265_14_fu_617_p1 = or_ln265_13_fu_612_p2;

assign zext_ln265_15_fu_627_p1 = or_ln265_14_fu_622_p2;

assign zext_ln265_1_fu_415_p1 = or_ln265_fu_409_p2;

assign zext_ln265_2_fu_425_p1 = or_ln265_1_fu_420_p2;

assign zext_ln265_3_fu_435_p1 = or_ln265_2_fu_430_p2;

assign zext_ln265_4_fu_457_p1 = or_ln265_3_fu_452_p2;

assign zext_ln265_5_fu_467_p1 = or_ln265_4_fu_462_p2;

assign zext_ln265_6_fu_489_p1 = or_ln265_5_fu_484_p2;

assign zext_ln265_7_fu_499_p1 = or_ln265_6_fu_494_p2;

assign zext_ln265_8_fu_521_p1 = or_ln265_7_fu_516_p2;

assign zext_ln265_9_fu_531_p1 = or_ln265_8_fu_526_p2;

assign zext_ln265_fu_404_p1 = shl_ln_fu_396_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_762[3:0] <= 4'b0000;
end

endmodule //AddRoundKey
