// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_CTR_xcrypt_buffe.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_CTR_xcrypt_buffe::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_CTR_xcrypt_buffe::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state1 = "1";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state2 = "10";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state3 = "100";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state4 = "1000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state5 = "10000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state6 = "100000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state7 = "1000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state8 = "10000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state9 = "100000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state10 = "1000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state11 = "10000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state12 = "100000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state71 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state72 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state73 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state74 = "10000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state75 = "100000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state76 = "1000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state77 = "10000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state78 = "100000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state79 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state80 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state81 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state82 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state83 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state84 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state85 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state86 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state87 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state88 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state89 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state90 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state91 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state92 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state93 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state94 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state95 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state96 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state97 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state98 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state99 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state100 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state101 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state102 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state103 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state104 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<105> AES_CTR_xcrypt_buffe::ap_ST_fsm_state105 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5A = "1011010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_61 = "1100001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1 = "1";
const sc_lv<1> AES_CTR_xcrypt_buffe::ap_const_lv1_0 = "0";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3 = "11";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4 = "100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_55 = "1010101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_56 = "1010110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_58 = "1011000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_59 = "1011001";
const sc_lv<1> AES_CTR_xcrypt_buffe::ap_const_lv1_1 = "1";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5B = "1011011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5C = "1011100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5D = "1011101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5E = "1011110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5F = "1011111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_60 = "1100000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_62 = "1100010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_63 = "1100011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_64 = "1100100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_65 = "1100101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_66 = "1100110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_67 = "1100111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2 = "10";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_0 = "00000";
const sc_lv<3> AES_CTR_xcrypt_buffe::ap_const_lv3_0 = "000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5 = "101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_54 = "1010100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_57 = "1010111";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_F = "1111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_D = "1101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_15 = "10101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1D = "11101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_25 = "100101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2D = "101101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_35 = "110101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3D = "111101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_45 = "1000101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4D = "1001101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_53 = "1010011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_6 = "110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_1 = "1";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_E = "1110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_2 = "10";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_16 = "10110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_3 = "11";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1E = "11110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_4 = "100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_26 = "100110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_5 = "101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2E = "101110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_6 = "110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_36 = "110110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_7 = "111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3E = "111110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_8 = "1000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_46 = "1000110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_9 = "1001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4E = "1001110";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_A = "1010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_7 = "111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_F = "1111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_17 = "10111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1F = "11111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_27 = "100111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2F = "101111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_37 = "110111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3F = "111111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_47 = "1000111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4F = "1001111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_8 = "1000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_10 = "10000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_18 = "11000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_20 = "100000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_28 = "101000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_30 = "110000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_38 = "111000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_40 = "1000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_48 = "1001000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_50 = "1010000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_9 = "1001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_11 = "10001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_19 = "11001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_21 = "100001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_29 = "101001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_31 = "110001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_39 = "111001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_41 = "1000001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_49 = "1001001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_51 = "1010001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_A = "1010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_12 = "10010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1A = "11010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_22 = "100010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2A = "101010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_32 = "110010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3A = "111010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_42 = "1000010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4A = "1001010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_52 = "1010010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_B = "1011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_13 = "10011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1B = "11011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_23 = "100011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2B = "101011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_33 = "110011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3B = "111011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_43 = "1000011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4B = "1001011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_C = "1100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_14 = "10100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1C = "11100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_24 = "100100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2C = "101100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_34 = "110100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3C = "111100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_44 = "1000100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4C = "1001100";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_1 = "1";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_2 = "10";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_3 = "11";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_4 = "100";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_5 = "101";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_6 = "110";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_7 = "111";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_8 = "1000";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_9 = "1001";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_A = "1010";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_B = "1011";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_C = "1100";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_D = "1101";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_E = "1110";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_F = "1111";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_0 = "00000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_68 = "1101000";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_10 = "10000";
const sc_lv<2> AES_CTR_xcrypt_buffe::ap_const_lv2_0 = "00";
const sc_lv<3> AES_CTR_xcrypt_buffe::ap_const_lv3_4 = "100";
const sc_lv<3> AES_CTR_xcrypt_buffe::ap_const_lv3_1 = "1";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_FF = "11111111";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_1F = "11111";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_1 = "1";
const bool AES_CTR_xcrypt_buffe::ap_const_boolean_1 = true;

AES_CTR_xcrypt_buffe::AES_CTR_xcrypt_buffe(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_U = new AES_CTR_xcrypt_buffe_buffer("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->we0(buffer_we0);
    buffer_U->d0(buffer_d0);
    buffer_U->q0(buffer_q0);
    buffer_U->address1(buffer_address1);
    buffer_U->ce1(buffer_ce1);
    buffer_U->q1(buffer_q1);
    x_U = new AES_CTR_xcrypt_buffe_x("x_U");
    x_U->clk(ap_clk);
    x_U->reset(ap_rst);
    x_U->address0(x_address0);
    x_U->ce0(x_ce0);
    x_U->we0(x_we0);
    x_U->d0(x_d0);
    x_U->q0(x_q0);
    x_U->address1(x_address1);
    x_U->ce1(x_ce1);
    x_U->we1(x_we1);
    x_U->d1(x_d1);
    x_U->q1(x_q1);
    grp_AddRoundKey_fu_551 = new AddRoundKey("grp_AddRoundKey_fu_551");
    grp_AddRoundKey_fu_551->ap_clk(ap_clk);
    grp_AddRoundKey_fu_551->ap_rst(ap_rst);
    grp_AddRoundKey_fu_551->ap_start(grp_AddRoundKey_fu_551_ap_start);
    grp_AddRoundKey_fu_551->ap_done(grp_AddRoundKey_fu_551_ap_done);
    grp_AddRoundKey_fu_551->ap_idle(grp_AddRoundKey_fu_551_ap_idle);
    grp_AddRoundKey_fu_551->ap_ready(grp_AddRoundKey_fu_551_ap_ready);
    grp_AddRoundKey_fu_551->round(grp_AddRoundKey_fu_551_round);
    grp_AddRoundKey_fu_551->state_address0(grp_AddRoundKey_fu_551_state_address0);
    grp_AddRoundKey_fu_551->state_ce0(grp_AddRoundKey_fu_551_state_ce0);
    grp_AddRoundKey_fu_551->state_we0(grp_AddRoundKey_fu_551_state_we0);
    grp_AddRoundKey_fu_551->state_d0(grp_AddRoundKey_fu_551_state_d0);
    grp_AddRoundKey_fu_551->state_q0(x_q0);
    grp_AddRoundKey_fu_551->state_address1(grp_AddRoundKey_fu_551_state_address1);
    grp_AddRoundKey_fu_551->state_ce1(grp_AddRoundKey_fu_551_state_ce1);
    grp_AddRoundKey_fu_551->state_we1(grp_AddRoundKey_fu_551_state_we1);
    grp_AddRoundKey_fu_551->state_d1(grp_AddRoundKey_fu_551_state_d1);
    grp_AddRoundKey_fu_551->state_q1(x_q1);
    grp_AddRoundKey_fu_551->RoundKey_address0(grp_AddRoundKey_fu_551_RoundKey_address0);
    grp_AddRoundKey_fu_551->RoundKey_ce0(grp_AddRoundKey_fu_551_RoundKey_ce0);
    grp_AddRoundKey_fu_551->RoundKey_q0(ctx_RoundKey_q0);
    grp_AddRoundKey_fu_551->RoundKey_address1(grp_AddRoundKey_fu_551_RoundKey_address1);
    grp_AddRoundKey_fu_551->RoundKey_ce1(grp_AddRoundKey_fu_551_RoundKey_ce1);
    grp_AddRoundKey_fu_551->RoundKey_q1(ctx_RoundKey_q1);
    grp_SubBytes_fu_570 = new SubBytes("grp_SubBytes_fu_570");
    grp_SubBytes_fu_570->ap_clk(ap_clk);
    grp_SubBytes_fu_570->ap_rst(ap_rst);
    grp_SubBytes_fu_570->ap_start(grp_SubBytes_fu_570_ap_start);
    grp_SubBytes_fu_570->ap_done(grp_SubBytes_fu_570_ap_done);
    grp_SubBytes_fu_570->ap_idle(grp_SubBytes_fu_570_ap_idle);
    grp_SubBytes_fu_570->ap_ready(grp_SubBytes_fu_570_ap_ready);
    grp_SubBytes_fu_570->state_address0(grp_SubBytes_fu_570_state_address0);
    grp_SubBytes_fu_570->state_ce0(grp_SubBytes_fu_570_state_ce0);
    grp_SubBytes_fu_570->state_we0(grp_SubBytes_fu_570_state_we0);
    grp_SubBytes_fu_570->state_d0(grp_SubBytes_fu_570_state_d0);
    grp_SubBytes_fu_570->state_q0(x_q0);
    grp_SubBytes_fu_570->state_address1(grp_SubBytes_fu_570_state_address1);
    grp_SubBytes_fu_570->state_ce1(grp_SubBytes_fu_570_state_ce1);
    grp_SubBytes_fu_570->state_we1(grp_SubBytes_fu_570_state_we1);
    grp_SubBytes_fu_570->state_d1(grp_SubBytes_fu_570_state_d1);
    grp_SubBytes_fu_570->state_q1(x_q1);
    grp_ShiftRows_fu_577 = new ShiftRows("grp_ShiftRows_fu_577");
    grp_ShiftRows_fu_577->ap_clk(ap_clk);
    grp_ShiftRows_fu_577->ap_rst(ap_rst);
    grp_ShiftRows_fu_577->ap_start(grp_ShiftRows_fu_577_ap_start);
    grp_ShiftRows_fu_577->ap_done(grp_ShiftRows_fu_577_ap_done);
    grp_ShiftRows_fu_577->ap_idle(grp_ShiftRows_fu_577_ap_idle);
    grp_ShiftRows_fu_577->ap_ready(grp_ShiftRows_fu_577_ap_ready);
    grp_ShiftRows_fu_577->state_address0(grp_ShiftRows_fu_577_state_address0);
    grp_ShiftRows_fu_577->state_ce0(grp_ShiftRows_fu_577_state_ce0);
    grp_ShiftRows_fu_577->state_we0(grp_ShiftRows_fu_577_state_we0);
    grp_ShiftRows_fu_577->state_d0(grp_ShiftRows_fu_577_state_d0);
    grp_ShiftRows_fu_577->state_q0(x_q0);
    grp_ShiftRows_fu_577->state_address1(grp_ShiftRows_fu_577_state_address1);
    grp_ShiftRows_fu_577->state_ce1(grp_ShiftRows_fu_577_state_ce1);
    grp_ShiftRows_fu_577->state_we1(grp_ShiftRows_fu_577_state_we1);
    grp_ShiftRows_fu_577->state_d1(grp_ShiftRows_fu_577_state_d1);
    grp_ShiftRows_fu_577->state_q1(x_q1);
    grp_MixColumns_fu_582 = new MixColumns("grp_MixColumns_fu_582");
    grp_MixColumns_fu_582->ap_clk(ap_clk);
    grp_MixColumns_fu_582->ap_rst(ap_rst);
    grp_MixColumns_fu_582->ap_start(grp_MixColumns_fu_582_ap_start);
    grp_MixColumns_fu_582->ap_done(grp_MixColumns_fu_582_ap_done);
    grp_MixColumns_fu_582->ap_idle(grp_MixColumns_fu_582_ap_idle);
    grp_MixColumns_fu_582->ap_ready(grp_MixColumns_fu_582_ap_ready);
    grp_MixColumns_fu_582->state_address0(grp_MixColumns_fu_582_state_address0);
    grp_MixColumns_fu_582->state_ce0(grp_MixColumns_fu_582_state_ce0);
    grp_MixColumns_fu_582->state_we0(grp_MixColumns_fu_582_state_we0);
    grp_MixColumns_fu_582->state_d0(grp_MixColumns_fu_582_state_d0);
    grp_MixColumns_fu_582->state_q0(x_q0);
    grp_MixColumns_fu_582->state_address1(grp_MixColumns_fu_582_state_address1);
    grp_MixColumns_fu_582->state_ce1(grp_MixColumns_fu_582_state_ce1);
    grp_MixColumns_fu_582->state_we1(grp_MixColumns_fu_582_state_we1);
    grp_MixColumns_fu_582->state_d1(grp_MixColumns_fu_582_state_d1);
    grp_MixColumns_fu_582->state_q1(x_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln476_1_fu_656_p2);
    sensitive << ( zext_ln474_reg_917 );
    sensitive << ( zext_ln476_1_fu_652_p1 );

    SC_METHOD(thread_add_ln476_fu_678_p2);
    sensitive << ( shl_ln_reg_930 );
    sensitive << ( zext_ln475_fu_648_p1 );

    SC_METHOD(thread_add_ln484_1_fu_732_p2);
    sensitive << ( zext_ln482_reg_953 );
    sensitive << ( zext_ln484_1_fu_728_p1 );

    SC_METHOD(thread_add_ln484_fu_754_p2);
    sensitive << ( shl_ln2_reg_966 );
    sensitive << ( zext_ln483_fu_724_p1 );

    SC_METHOD(thread_add_ln568_fu_601_p2);
    sensitive << ( k_0_0_reg_484 );

    SC_METHOD(thread_add_ln577_fu_786_p2);
    sensitive << ( bi_1_0_reg_539 );

    SC_METHOD(thread_add_ln583_fu_792_p2);
    sensitive << ( ctx_Iv_q0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state100);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state101);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state102);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state103);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state104);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state105);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state61);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state62);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state63);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state65);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state66);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state70);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state71);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state72);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state74);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state75);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state77);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state79);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state81);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state82);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state84);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state85);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state86);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state87);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state88);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state90);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state91);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state92);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state93);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state94);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state95);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state96);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state97);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state98);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state99);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_addr_10_reg_1096);
    sensitive << ( ap_CS_fsm_state95 );

    SC_METHOD(thread_buf_addr_11_reg_1101);
    sensitive << ( ap_CS_fsm_state95 );

    SC_METHOD(thread_buf_addr_12_reg_1116);
    sensitive << ( ap_CS_fsm_state96 );

    SC_METHOD(thread_buf_addr_13_reg_1121);
    sensitive << ( ap_CS_fsm_state96 );

    SC_METHOD(thread_buf_addr_14_reg_1146);
    sensitive << ( ap_CS_fsm_state97 );

    SC_METHOD(thread_buf_addr_15_reg_1151);
    sensitive << ( ap_CS_fsm_state97 );

    SC_METHOD(thread_buf_addr_1_reg_1011);
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );

    SC_METHOD(thread_buf_addr_2_reg_1016);
    sensitive << ( ap_CS_fsm_state91 );

    SC_METHOD(thread_buf_addr_3_reg_1021);
    sensitive << ( ap_CS_fsm_state91 );

    SC_METHOD(thread_buf_addr_4_reg_1036);
    sensitive << ( ap_CS_fsm_state92 );

    SC_METHOD(thread_buf_addr_5_reg_1041);
    sensitive << ( ap_CS_fsm_state92 );

    SC_METHOD(thread_buf_addr_6_reg_1056);
    sensitive << ( ap_CS_fsm_state93 );

    SC_METHOD(thread_buf_addr_7_reg_1061);
    sensitive << ( ap_CS_fsm_state93 );

    SC_METHOD(thread_buf_addr_8_reg_1076);
    sensitive << ( ap_CS_fsm_state94 );

    SC_METHOD(thread_buf_addr_9_reg_1081);
    sensitive << ( ap_CS_fsm_state94 );

    SC_METHOD(thread_buf_addr_reg_1006);
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );

    SC_METHOD(thread_buf_r_address0);
    sensitive << ( ap_CS_fsm_state91 );
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( buf_addr_reg_1006 );
    sensitive << ( buf_addr_2_reg_1016 );
    sensitive << ( ap_CS_fsm_state92 );
    sensitive << ( buf_addr_4_reg_1036 );
    sensitive << ( ap_CS_fsm_state93 );
    sensitive << ( buf_addr_6_reg_1056 );
    sensitive << ( ap_CS_fsm_state94 );
    sensitive << ( buf_addr_8_reg_1076 );
    sensitive << ( ap_CS_fsm_state95 );
    sensitive << ( buf_addr_10_reg_1096 );
    sensitive << ( ap_CS_fsm_state96 );
    sensitive << ( buf_addr_12_reg_1116 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( buf_addr_14_reg_1146 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_r_address1);
    sensitive << ( ap_CS_fsm_state91 );
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( buf_addr_1_reg_1011 );
    sensitive << ( buf_addr_3_reg_1021 );
    sensitive << ( ap_CS_fsm_state92 );
    sensitive << ( buf_addr_5_reg_1041 );
    sensitive << ( ap_CS_fsm_state93 );
    sensitive << ( buf_addr_7_reg_1061 );
    sensitive << ( ap_CS_fsm_state94 );
    sensitive << ( buf_addr_9_reg_1081 );
    sensitive << ( ap_CS_fsm_state95 );
    sensitive << ( buf_addr_11_reg_1101 );
    sensitive << ( ap_CS_fsm_state96 );
    sensitive << ( buf_addr_13_reg_1121 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( buf_addr_15_reg_1151 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_r_ce0);
    sensitive << ( ap_CS_fsm_state91 );
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( ap_CS_fsm_state92 );
    sensitive << ( ap_CS_fsm_state93 );
    sensitive << ( ap_CS_fsm_state94 );
    sensitive << ( ap_CS_fsm_state95 );
    sensitive << ( ap_CS_fsm_state96 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_r_ce1);
    sensitive << ( ap_CS_fsm_state91 );
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( ap_CS_fsm_state92 );
    sensitive << ( ap_CS_fsm_state93 );
    sensitive << ( ap_CS_fsm_state94 );
    sensitive << ( ap_CS_fsm_state95 );
    sensitive << ( ap_CS_fsm_state96 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_r_d0);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( xor_ln589_fu_799_p2 );
    sensitive << ( xor_ln589_2_fu_813_p2 );
    sensitive << ( xor_ln589_4_fu_825_p2 );
    sensitive << ( xor_ln589_6_fu_837_p2 );
    sensitive << ( xor_ln589_8_fu_849_p2 );
    sensitive << ( xor_ln589_10_fu_861_p2 );
    sensitive << ( xor_ln589_12_fu_873_p2 );
    sensitive << ( ap_CS_fsm_state105 );
    sensitive << ( xor_ln589_14_fu_885_p2 );

    SC_METHOD(thread_buf_r_d1);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( xor_ln589_1_fu_806_p2 );
    sensitive << ( xor_ln589_3_fu_819_p2 );
    sensitive << ( xor_ln589_5_fu_831_p2 );
    sensitive << ( xor_ln589_7_fu_843_p2 );
    sensitive << ( xor_ln589_9_fu_855_p2 );
    sensitive << ( xor_ln589_11_fu_867_p2 );
    sensitive << ( xor_ln589_13_fu_879_p2 );
    sensitive << ( ap_CS_fsm_state105 );
    sensitive << ( xor_ln589_15_fu_892_p2 );

    SC_METHOD(thread_buf_r_we0);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buf_r_we1);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state105 );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( zext_ln568_reg_907 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state88 );
    sensitive << ( zext_ln476_fu_683_p1 );
    sensitive << ( zext_ln484_fu_759_p1 );

    SC_METHOD(thread_buffer_address1);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state88 );

    SC_METHOD(thread_buffer_ce1);
    sensitive << ( ap_CS_fsm_state98 );
    sensitive << ( ap_CS_fsm_state97 );
    sensitive << ( ap_CS_fsm_state99 );
    sensitive << ( ap_CS_fsm_state100 );
    sensitive << ( ap_CS_fsm_state101 );
    sensitive << ( ap_CS_fsm_state102 );
    sensitive << ( ap_CS_fsm_state103 );
    sensitive << ( ap_CS_fsm_state104 );

    SC_METHOD(thread_buffer_d0);
    sensitive << ( ctx_Iv_q0 );
    sensitive << ( x_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state88 );

    SC_METHOD(thread_buffer_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state88 );

    SC_METHOD(thread_ctx_Iv_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln568_fu_607_p1 );
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state89 );
    sensitive << ( ctx_Iv_addr_1_reg_993 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );
    sensitive << ( zext_ln579_fu_775_p1 );

    SC_METHOD(thread_ctx_Iv_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state89 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );

    SC_METHOD(thread_ctx_Iv_d0);
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );
    sensitive << ( add_ln583_fu_792_p2 );

    SC_METHOD(thread_ctx_Iv_we0);
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( grp_AddRoundKey_fu_551_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_ctx_RoundKey_address1);
    sensitive << ( grp_AddRoundKey_fu_551_RoundKey_address1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( grp_AddRoundKey_fu_551_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( grp_AddRoundKey_fu_551_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_grp_AddRoundKey_fu_551_ap_start);
    sensitive << ( grp_AddRoundKey_fu_551_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_551_round);
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_grp_MixColumns_fu_582_ap_start);
    sensitive << ( grp_MixColumns_fu_582_ap_start_reg );

    SC_METHOD(thread_grp_ShiftRows_fu_577_ap_start);
    sensitive << ( grp_ShiftRows_fu_577_ap_start_reg );

    SC_METHOD(thread_grp_SubBytes_fu_570_ap_start);
    sensitive << ( grp_SubBytes_fu_570_ap_start_reg );

    SC_METHOD(thread_i_3_fu_706_p2);
    sensitive << ( i_0_i1_reg_517 );

    SC_METHOD(thread_i_fu_630_p2);
    sensitive << ( i_0_i_reg_495 );

    SC_METHOD(thread_icmp_ln474_fu_624_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_i_reg_495 );

    SC_METHOD(thread_icmp_ln475_fu_666_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k_0_i_reg_506 );

    SC_METHOD(thread_icmp_ln482_fu_700_p2);
    sensitive << ( ap_CS_fsm_state86 );
    sensitive << ( i_0_i1_reg_517 );

    SC_METHOD(thread_icmp_ln483_fu_742_p2);
    sensitive << ( ap_CS_fsm_state87 );
    sensitive << ( k_0_i3_reg_528 );

    SC_METHOD(thread_icmp_ln568_fu_595_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_0_0_reg_484 );

    SC_METHOD(thread_icmp_ln579_fu_780_p2);
    sensitive << ( ctx_Iv_q0 );
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );

    SC_METHOD(thread_k_2_fu_748_p2);
    sensitive << ( k_0_i3_reg_528 );

    SC_METHOD(thread_k_fu_672_p2);
    sensitive << ( k_0_i_reg_506 );

    SC_METHOD(thread_sext_ln577_fu_763_p1);
    sensitive << ( bi_1_0_reg_539 );

    SC_METHOD(thread_shl_ln2_fu_716_p3);
    sensitive << ( trunc_ln484_fu_712_p1 );

    SC_METHOD(thread_shl_ln_fu_640_p3);
    sensitive << ( trunc_ln476_fu_636_p1 );

    SC_METHOD(thread_tmp_1_fu_688_p3);
    sensitive << ( i_0_i1_reg_517 );

    SC_METHOD(thread_tmp_5_fu_767_p3);
    sensitive << ( bi_1_0_reg_539 );

    SC_METHOD(thread_tmp_s_fu_612_p3);
    sensitive << ( i_0_i_reg_495 );

    SC_METHOD(thread_trunc_ln476_fu_636_p1);
    sensitive << ( i_0_i_reg_495 );

    SC_METHOD(thread_trunc_ln484_fu_712_p1);
    sensitive << ( i_0_i1_reg_517 );

    SC_METHOD(thread_x_address0);
    sensitive << ( x_addr_reg_935 );
    sensitive << ( ap_CS_fsm_state87 );
    sensitive << ( grp_AddRoundKey_fu_551_state_address0 );
    sensitive << ( grp_SubBytes_fu_570_state_address0 );
    sensitive << ( grp_ShiftRows_fu_577_state_address0 );
    sensitive << ( grp_MixColumns_fu_582_state_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( zext_ln484_2_fu_737_p1 );

    SC_METHOD(thread_x_address1);
    sensitive << ( grp_AddRoundKey_fu_551_state_address1 );
    sensitive << ( grp_SubBytes_fu_570_state_address1 );
    sensitive << ( grp_ShiftRows_fu_577_state_address1 );
    sensitive << ( grp_MixColumns_fu_582_state_address1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state87 );
    sensitive << ( grp_AddRoundKey_fu_551_state_ce0 );
    sensitive << ( grp_SubBytes_fu_570_state_ce0 );
    sensitive << ( grp_ShiftRows_fu_577_state_ce0 );
    sensitive << ( grp_MixColumns_fu_582_state_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_ce1);
    sensitive << ( grp_AddRoundKey_fu_551_state_ce1 );
    sensitive << ( grp_SubBytes_fu_570_state_ce1 );
    sensitive << ( grp_ShiftRows_fu_577_state_ce1 );
    sensitive << ( grp_MixColumns_fu_582_state_ce1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_d0);
    sensitive << ( buffer_q0 );
    sensitive << ( grp_AddRoundKey_fu_551_state_d0 );
    sensitive << ( grp_SubBytes_fu_570_state_d0 );
    sensitive << ( grp_ShiftRows_fu_577_state_d0 );
    sensitive << ( grp_MixColumns_fu_582_state_d0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_d1);
    sensitive << ( grp_AddRoundKey_fu_551_state_d1 );
    sensitive << ( grp_SubBytes_fu_570_state_d1 );
    sensitive << ( grp_ShiftRows_fu_577_state_d1 );
    sensitive << ( grp_MixColumns_fu_582_state_d1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_we0);
    sensitive << ( grp_AddRoundKey_fu_551_state_we0 );
    sensitive << ( grp_SubBytes_fu_570_state_we0 );
    sensitive << ( grp_ShiftRows_fu_577_state_we0 );
    sensitive << ( grp_MixColumns_fu_582_state_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_x_we1);
    sensitive << ( grp_AddRoundKey_fu_551_state_we1 );
    sensitive << ( grp_SubBytes_fu_570_state_we1 );
    sensitive << ( grp_ShiftRows_fu_577_state_we1 );
    sensitive << ( grp_MixColumns_fu_582_state_we1 );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_xor_ln589_10_fu_861_p2);
    sensitive << ( buf_load_10_reg_1106 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_11_fu_867_p2);
    sensitive << ( buf_load_11_reg_1111 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_12_fu_873_p2);
    sensitive << ( buf_load_12_reg_1136 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_13_fu_879_p2);
    sensitive << ( buf_load_13_reg_1141 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_14_fu_885_p2);
    sensitive << ( reg_587 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_15_fu_892_p2);
    sensitive << ( reg_591 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_1_fu_806_p2);
    sensitive << ( reg_591 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_2_fu_813_p2);
    sensitive << ( buf_load_2_reg_1026 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_3_fu_819_p2);
    sensitive << ( buf_load_3_reg_1031 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_4_fu_825_p2);
    sensitive << ( buf_load_4_reg_1046 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_5_fu_831_p2);
    sensitive << ( buf_load_5_reg_1051 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_6_fu_837_p2);
    sensitive << ( buf_load_6_reg_1066 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_7_fu_843_p2);
    sensitive << ( buf_load_7_reg_1071 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_8_fu_849_p2);
    sensitive << ( buf_load_8_reg_1086 );
    sensitive << ( buffer_q1 );

    SC_METHOD(thread_xor_ln589_9_fu_855_p2);
    sensitive << ( buf_load_9_reg_1091 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_xor_ln589_fu_799_p2);
    sensitive << ( reg_587 );
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_zext_ln474_fu_620_p1);
    sensitive << ( tmp_s_fu_612_p3 );

    SC_METHOD(thread_zext_ln475_fu_648_p1);
    sensitive << ( k_0_i_reg_506 );

    SC_METHOD(thread_zext_ln476_1_fu_652_p1);
    sensitive << ( k_0_i_reg_506 );

    SC_METHOD(thread_zext_ln476_2_fu_661_p1);
    sensitive << ( add_ln476_1_fu_656_p2 );

    SC_METHOD(thread_zext_ln476_fu_683_p1);
    sensitive << ( add_ln476_fu_678_p2 );

    SC_METHOD(thread_zext_ln482_fu_696_p1);
    sensitive << ( tmp_1_fu_688_p3 );

    SC_METHOD(thread_zext_ln483_fu_724_p1);
    sensitive << ( k_0_i3_reg_528 );

    SC_METHOD(thread_zext_ln484_1_fu_728_p1);
    sensitive << ( k_0_i3_reg_528 );

    SC_METHOD(thread_zext_ln484_2_fu_737_p1);
    sensitive << ( add_ln484_1_fu_732_p2 );

    SC_METHOD(thread_zext_ln484_fu_759_p1);
    sensitive << ( add_ln484_reg_984 );

    SC_METHOD(thread_zext_ln568_fu_607_p1);
    sensitive << ( k_0_0_reg_484 );

    SC_METHOD(thread_zext_ln579_fu_775_p1);
    sensitive << ( sext_ln577_fu_763_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln568_fu_595_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln474_fu_624_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln475_fu_666_p2 );
    sensitive << ( ap_CS_fsm_state86 );
    sensitive << ( icmp_ln482_fu_700_p2 );
    sensitive << ( ap_CS_fsm_state87 );
    sensitive << ( icmp_ln483_fu_742_p2 );
    sensitive << ( tmp_5_reg_989 );
    sensitive << ( ap_CS_fsm_state90 );
    sensitive << ( icmp_ln579_fu_780_p2 );
    sensitive << ( grp_AddRoundKey_fu_551_ap_done );
    sensitive << ( grp_SubBytes_fu_570_ap_done );
    sensitive << ( grp_ShiftRows_fu_577_ap_done );
    sensitive << ( grp_MixColumns_fu_582_ap_done );
    sensitive << ( ap_CS_fsm_state85 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state63 );
    sensitive << ( ap_CS_fsm_state71 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state65 );
    sensitive << ( ap_CS_fsm_state73 );
    sensitive << ( ap_CS_fsm_state81 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state77 );

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    grp_AddRoundKey_fu_551_ap_start_reg = SC_LOGIC_0;
    grp_SubBytes_fu_570_ap_start_reg = SC_LOGIC_0;
    grp_ShiftRows_fu_577_ap_start_reg = SC_LOGIC_0;
    grp_MixColumns_fu_582_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_CTR_xcrypt_buffe_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "(port)ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "(port)ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "(port)ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_address1, "(port)ctx_RoundKey_address1");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "(port)ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "(port)ctx_RoundKey_q1");
    sc_trace(mVcdFile, ctx_Iv_address0, "(port)ctx_Iv_address0");
    sc_trace(mVcdFile, ctx_Iv_ce0, "(port)ctx_Iv_ce0");
    sc_trace(mVcdFile, ctx_Iv_we0, "(port)ctx_Iv_we0");
    sc_trace(mVcdFile, ctx_Iv_d0, "(port)ctx_Iv_d0");
    sc_trace(mVcdFile, ctx_Iv_q0, "(port)ctx_Iv_q0");
    sc_trace(mVcdFile, buf_r_address0, "(port)buf_r_address0");
    sc_trace(mVcdFile, buf_r_ce0, "(port)buf_r_ce0");
    sc_trace(mVcdFile, buf_r_we0, "(port)buf_r_we0");
    sc_trace(mVcdFile, buf_r_d0, "(port)buf_r_d0");
    sc_trace(mVcdFile, buf_r_q0, "(port)buf_r_q0");
    sc_trace(mVcdFile, buf_r_address1, "(port)buf_r_address1");
    sc_trace(mVcdFile, buf_r_ce1, "(port)buf_r_ce1");
    sc_trace(mVcdFile, buf_r_we1, "(port)buf_r_we1");
    sc_trace(mVcdFile, buf_r_d1, "(port)buf_r_d1");
    sc_trace(mVcdFile, buf_r_q1, "(port)buf_r_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_587, "reg_587");
    sc_trace(mVcdFile, ap_CS_fsm_state91, "ap_CS_fsm_state91");
    sc_trace(mVcdFile, ap_CS_fsm_state98, "ap_CS_fsm_state98");
    sc_trace(mVcdFile, reg_591, "reg_591");
    sc_trace(mVcdFile, add_ln568_fu_601_p2, "add_ln568_fu_601_p2");
    sc_trace(mVcdFile, add_ln568_reg_902, "add_ln568_reg_902");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln568_fu_607_p1, "zext_ln568_fu_607_p1");
    sc_trace(mVcdFile, zext_ln568_reg_907, "zext_ln568_reg_907");
    sc_trace(mVcdFile, icmp_ln568_fu_595_p2, "icmp_ln568_fu_595_p2");
    sc_trace(mVcdFile, zext_ln474_fu_620_p1, "zext_ln474_fu_620_p1");
    sc_trace(mVcdFile, zext_ln474_reg_917, "zext_ln474_reg_917");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_fu_630_p2, "i_fu_630_p2");
    sc_trace(mVcdFile, i_reg_925, "i_reg_925");
    sc_trace(mVcdFile, shl_ln_fu_640_p3, "shl_ln_fu_640_p3");
    sc_trace(mVcdFile, shl_ln_reg_930, "shl_ln_reg_930");
    sc_trace(mVcdFile, icmp_ln474_fu_624_p2, "icmp_ln474_fu_624_p2");
    sc_trace(mVcdFile, x_addr_reg_935, "x_addr_reg_935");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, k_fu_672_p2, "k_fu_672_p2");
    sc_trace(mVcdFile, k_reg_943, "k_reg_943");
    sc_trace(mVcdFile, icmp_ln475_fu_666_p2, "icmp_ln475_fu_666_p2");
    sc_trace(mVcdFile, zext_ln482_fu_696_p1, "zext_ln482_fu_696_p1");
    sc_trace(mVcdFile, zext_ln482_reg_953, "zext_ln482_reg_953");
    sc_trace(mVcdFile, ap_CS_fsm_state86, "ap_CS_fsm_state86");
    sc_trace(mVcdFile, i_3_fu_706_p2, "i_3_fu_706_p2");
    sc_trace(mVcdFile, i_3_reg_961, "i_3_reg_961");
    sc_trace(mVcdFile, shl_ln2_fu_716_p3, "shl_ln2_fu_716_p3");
    sc_trace(mVcdFile, shl_ln2_reg_966, "shl_ln2_reg_966");
    sc_trace(mVcdFile, icmp_ln482_fu_700_p2, "icmp_ln482_fu_700_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state87, "ap_CS_fsm_state87");
    sc_trace(mVcdFile, k_2_fu_748_p2, "k_2_fu_748_p2");
    sc_trace(mVcdFile, k_2_reg_979, "k_2_reg_979");
    sc_trace(mVcdFile, add_ln484_fu_754_p2, "add_ln484_fu_754_p2");
    sc_trace(mVcdFile, add_ln484_reg_984, "add_ln484_reg_984");
    sc_trace(mVcdFile, icmp_ln483_fu_742_p2, "icmp_ln483_fu_742_p2");
    sc_trace(mVcdFile, tmp_5_fu_767_p3, "tmp_5_fu_767_p3");
    sc_trace(mVcdFile, tmp_5_reg_989, "tmp_5_reg_989");
    sc_trace(mVcdFile, ap_CS_fsm_state89, "ap_CS_fsm_state89");
    sc_trace(mVcdFile, ctx_Iv_addr_1_reg_993, "ctx_Iv_addr_1_reg_993");
    sc_trace(mVcdFile, add_ln577_fu_786_p2, "add_ln577_fu_786_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state90, "ap_CS_fsm_state90");
    sc_trace(mVcdFile, icmp_ln579_fu_780_p2, "icmp_ln579_fu_780_p2");
    sc_trace(mVcdFile, buf_addr_reg_1006, "buf_addr_reg_1006");
    sc_trace(mVcdFile, buf_addr_1_reg_1011, "buf_addr_1_reg_1011");
    sc_trace(mVcdFile, buf_addr_2_reg_1016, "buf_addr_2_reg_1016");
    sc_trace(mVcdFile, buf_addr_3_reg_1021, "buf_addr_3_reg_1021");
    sc_trace(mVcdFile, buf_load_2_reg_1026, "buf_load_2_reg_1026");
    sc_trace(mVcdFile, ap_CS_fsm_state92, "ap_CS_fsm_state92");
    sc_trace(mVcdFile, buf_load_3_reg_1031, "buf_load_3_reg_1031");
    sc_trace(mVcdFile, buf_addr_4_reg_1036, "buf_addr_4_reg_1036");
    sc_trace(mVcdFile, buf_addr_5_reg_1041, "buf_addr_5_reg_1041");
    sc_trace(mVcdFile, buf_load_4_reg_1046, "buf_load_4_reg_1046");
    sc_trace(mVcdFile, ap_CS_fsm_state93, "ap_CS_fsm_state93");
    sc_trace(mVcdFile, buf_load_5_reg_1051, "buf_load_5_reg_1051");
    sc_trace(mVcdFile, buf_addr_6_reg_1056, "buf_addr_6_reg_1056");
    sc_trace(mVcdFile, buf_addr_7_reg_1061, "buf_addr_7_reg_1061");
    sc_trace(mVcdFile, buf_load_6_reg_1066, "buf_load_6_reg_1066");
    sc_trace(mVcdFile, ap_CS_fsm_state94, "ap_CS_fsm_state94");
    sc_trace(mVcdFile, buf_load_7_reg_1071, "buf_load_7_reg_1071");
    sc_trace(mVcdFile, buf_addr_8_reg_1076, "buf_addr_8_reg_1076");
    sc_trace(mVcdFile, buf_addr_9_reg_1081, "buf_addr_9_reg_1081");
    sc_trace(mVcdFile, buf_load_8_reg_1086, "buf_load_8_reg_1086");
    sc_trace(mVcdFile, ap_CS_fsm_state95, "ap_CS_fsm_state95");
    sc_trace(mVcdFile, buf_load_9_reg_1091, "buf_load_9_reg_1091");
    sc_trace(mVcdFile, buf_addr_10_reg_1096, "buf_addr_10_reg_1096");
    sc_trace(mVcdFile, buf_addr_11_reg_1101, "buf_addr_11_reg_1101");
    sc_trace(mVcdFile, buf_load_10_reg_1106, "buf_load_10_reg_1106");
    sc_trace(mVcdFile, ap_CS_fsm_state96, "ap_CS_fsm_state96");
    sc_trace(mVcdFile, buf_load_11_reg_1111, "buf_load_11_reg_1111");
    sc_trace(mVcdFile, buf_addr_12_reg_1116, "buf_addr_12_reg_1116");
    sc_trace(mVcdFile, buf_addr_13_reg_1121, "buf_addr_13_reg_1121");
    sc_trace(mVcdFile, ap_CS_fsm_state97, "ap_CS_fsm_state97");
    sc_trace(mVcdFile, buf_load_12_reg_1136, "buf_load_12_reg_1136");
    sc_trace(mVcdFile, buf_load_13_reg_1141, "buf_load_13_reg_1141");
    sc_trace(mVcdFile, buf_addr_14_reg_1146, "buf_addr_14_reg_1146");
    sc_trace(mVcdFile, buf_addr_15_reg_1151, "buf_addr_15_reg_1151");
    sc_trace(mVcdFile, ap_CS_fsm_state99, "ap_CS_fsm_state99");
    sc_trace(mVcdFile, ap_CS_fsm_state100, "ap_CS_fsm_state100");
    sc_trace(mVcdFile, ap_CS_fsm_state101, "ap_CS_fsm_state101");
    sc_trace(mVcdFile, ap_CS_fsm_state102, "ap_CS_fsm_state102");
    sc_trace(mVcdFile, ap_CS_fsm_state103, "ap_CS_fsm_state103");
    sc_trace(mVcdFile, ap_CS_fsm_state104, "ap_CS_fsm_state104");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_we0, "buffer_we0");
    sc_trace(mVcdFile, buffer_d0, "buffer_d0");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, buffer_address1, "buffer_address1");
    sc_trace(mVcdFile, buffer_ce1, "buffer_ce1");
    sc_trace(mVcdFile, buffer_q1, "buffer_q1");
    sc_trace(mVcdFile, x_address0, "x_address0");
    sc_trace(mVcdFile, x_ce0, "x_ce0");
    sc_trace(mVcdFile, x_we0, "x_we0");
    sc_trace(mVcdFile, x_d0, "x_d0");
    sc_trace(mVcdFile, x_q0, "x_q0");
    sc_trace(mVcdFile, x_address1, "x_address1");
    sc_trace(mVcdFile, x_ce1, "x_ce1");
    sc_trace(mVcdFile, x_we1, "x_we1");
    sc_trace(mVcdFile, x_d1, "x_d1");
    sc_trace(mVcdFile, x_q1, "x_q1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_ap_start, "grp_AddRoundKey_fu_551_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_ap_done, "grp_AddRoundKey_fu_551_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_ap_idle, "grp_AddRoundKey_fu_551_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_ap_ready, "grp_AddRoundKey_fu_551_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_round, "grp_AddRoundKey_fu_551_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_address0, "grp_AddRoundKey_fu_551_state_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_ce0, "grp_AddRoundKey_fu_551_state_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_we0, "grp_AddRoundKey_fu_551_state_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_d0, "grp_AddRoundKey_fu_551_state_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_address1, "grp_AddRoundKey_fu_551_state_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_ce1, "grp_AddRoundKey_fu_551_state_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_we1, "grp_AddRoundKey_fu_551_state_we1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_state_d1, "grp_AddRoundKey_fu_551_state_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_RoundKey_address0, "grp_AddRoundKey_fu_551_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_RoundKey_ce0, "grp_AddRoundKey_fu_551_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_RoundKey_address1, "grp_AddRoundKey_fu_551_RoundKey_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_RoundKey_ce1, "grp_AddRoundKey_fu_551_RoundKey_ce1");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_ap_start, "grp_SubBytes_fu_570_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_ap_done, "grp_SubBytes_fu_570_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_ap_idle, "grp_SubBytes_fu_570_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_ap_ready, "grp_SubBytes_fu_570_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_address0, "grp_SubBytes_fu_570_state_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_ce0, "grp_SubBytes_fu_570_state_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_we0, "grp_SubBytes_fu_570_state_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_d0, "grp_SubBytes_fu_570_state_d0");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_address1, "grp_SubBytes_fu_570_state_address1");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_ce1, "grp_SubBytes_fu_570_state_ce1");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_we1, "grp_SubBytes_fu_570_state_we1");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_state_d1, "grp_SubBytes_fu_570_state_d1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_ap_start, "grp_ShiftRows_fu_577_ap_start");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_ap_done, "grp_ShiftRows_fu_577_ap_done");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_ap_idle, "grp_ShiftRows_fu_577_ap_idle");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_ap_ready, "grp_ShiftRows_fu_577_ap_ready");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_address0, "grp_ShiftRows_fu_577_state_address0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_ce0, "grp_ShiftRows_fu_577_state_ce0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_we0, "grp_ShiftRows_fu_577_state_we0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_d0, "grp_ShiftRows_fu_577_state_d0");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_address1, "grp_ShiftRows_fu_577_state_address1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_ce1, "grp_ShiftRows_fu_577_state_ce1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_we1, "grp_ShiftRows_fu_577_state_we1");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_state_d1, "grp_ShiftRows_fu_577_state_d1");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_ap_start, "grp_MixColumns_fu_582_ap_start");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_ap_done, "grp_MixColumns_fu_582_ap_done");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_ap_idle, "grp_MixColumns_fu_582_ap_idle");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_ap_ready, "grp_MixColumns_fu_582_ap_ready");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_address0, "grp_MixColumns_fu_582_state_address0");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_ce0, "grp_MixColumns_fu_582_state_ce0");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_we0, "grp_MixColumns_fu_582_state_we0");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_d0, "grp_MixColumns_fu_582_state_d0");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_address1, "grp_MixColumns_fu_582_state_address1");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_ce1, "grp_MixColumns_fu_582_state_ce1");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_we1, "grp_MixColumns_fu_582_state_we1");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_state_d1, "grp_MixColumns_fu_582_state_d1");
    sc_trace(mVcdFile, k_0_0_reg_484, "k_0_0_reg_484");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_i_reg_495, "i_0_i_reg_495");
    sc_trace(mVcdFile, k_0_i_reg_506, "k_0_i_reg_506");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_i1_reg_517, "i_0_i1_reg_517");
    sc_trace(mVcdFile, ap_CS_fsm_state85, "ap_CS_fsm_state85");
    sc_trace(mVcdFile, k_0_i3_reg_528, "k_0_i3_reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state88, "ap_CS_fsm_state88");
    sc_trace(mVcdFile, bi_1_0_reg_539, "bi_1_0_reg_539");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_551_ap_start_reg, "grp_AddRoundKey_fu_551_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, ap_CS_fsm_state62, "ap_CS_fsm_state62");
    sc_trace(mVcdFile, ap_CS_fsm_state70, "ap_CS_fsm_state70");
    sc_trace(mVcdFile, ap_CS_fsm_state78, "ap_CS_fsm_state78");
    sc_trace(mVcdFile, ap_CS_fsm_state84, "ap_CS_fsm_state84");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, ap_CS_fsm_state63, "ap_CS_fsm_state63");
    sc_trace(mVcdFile, ap_CS_fsm_state71, "ap_CS_fsm_state71");
    sc_trace(mVcdFile, ap_CS_fsm_state79, "ap_CS_fsm_state79");
    sc_trace(mVcdFile, grp_SubBytes_fu_570_ap_start_reg, "grp_SubBytes_fu_570_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state56, "ap_CS_fsm_state56");
    sc_trace(mVcdFile, ap_CS_fsm_state64, "ap_CS_fsm_state64");
    sc_trace(mVcdFile, ap_CS_fsm_state72, "ap_CS_fsm_state72");
    sc_trace(mVcdFile, ap_CS_fsm_state80, "ap_CS_fsm_state80");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, ap_CS_fsm_state65, "ap_CS_fsm_state65");
    sc_trace(mVcdFile, ap_CS_fsm_state73, "ap_CS_fsm_state73");
    sc_trace(mVcdFile, ap_CS_fsm_state81, "ap_CS_fsm_state81");
    sc_trace(mVcdFile, grp_ShiftRows_fu_577_ap_start_reg, "grp_ShiftRows_fu_577_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, ap_CS_fsm_state66, "ap_CS_fsm_state66");
    sc_trace(mVcdFile, ap_CS_fsm_state74, "ap_CS_fsm_state74");
    sc_trace(mVcdFile, ap_CS_fsm_state82, "ap_CS_fsm_state82");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, ap_CS_fsm_state67, "ap_CS_fsm_state67");
    sc_trace(mVcdFile, ap_CS_fsm_state75, "ap_CS_fsm_state75");
    sc_trace(mVcdFile, ap_CS_fsm_state83, "ap_CS_fsm_state83");
    sc_trace(mVcdFile, grp_MixColumns_fu_582_ap_start_reg, "grp_MixColumns_fu_582_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state52, "ap_CS_fsm_state52");
    sc_trace(mVcdFile, ap_CS_fsm_state60, "ap_CS_fsm_state60");
    sc_trace(mVcdFile, ap_CS_fsm_state68, "ap_CS_fsm_state68");
    sc_trace(mVcdFile, ap_CS_fsm_state76, "ap_CS_fsm_state76");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, ap_CS_fsm_state61, "ap_CS_fsm_state61");
    sc_trace(mVcdFile, ap_CS_fsm_state69, "ap_CS_fsm_state69");
    sc_trace(mVcdFile, ap_CS_fsm_state77, "ap_CS_fsm_state77");
    sc_trace(mVcdFile, zext_ln476_2_fu_661_p1, "zext_ln476_2_fu_661_p1");
    sc_trace(mVcdFile, zext_ln476_fu_683_p1, "zext_ln476_fu_683_p1");
    sc_trace(mVcdFile, zext_ln484_2_fu_737_p1, "zext_ln484_2_fu_737_p1");
    sc_trace(mVcdFile, zext_ln484_fu_759_p1, "zext_ln484_fu_759_p1");
    sc_trace(mVcdFile, zext_ln579_fu_775_p1, "zext_ln579_fu_775_p1");
    sc_trace(mVcdFile, add_ln583_fu_792_p2, "add_ln583_fu_792_p2");
    sc_trace(mVcdFile, xor_ln589_fu_799_p2, "xor_ln589_fu_799_p2");
    sc_trace(mVcdFile, xor_ln589_1_fu_806_p2, "xor_ln589_1_fu_806_p2");
    sc_trace(mVcdFile, xor_ln589_2_fu_813_p2, "xor_ln589_2_fu_813_p2");
    sc_trace(mVcdFile, xor_ln589_3_fu_819_p2, "xor_ln589_3_fu_819_p2");
    sc_trace(mVcdFile, xor_ln589_4_fu_825_p2, "xor_ln589_4_fu_825_p2");
    sc_trace(mVcdFile, xor_ln589_5_fu_831_p2, "xor_ln589_5_fu_831_p2");
    sc_trace(mVcdFile, xor_ln589_6_fu_837_p2, "xor_ln589_6_fu_837_p2");
    sc_trace(mVcdFile, xor_ln589_7_fu_843_p2, "xor_ln589_7_fu_843_p2");
    sc_trace(mVcdFile, xor_ln589_8_fu_849_p2, "xor_ln589_8_fu_849_p2");
    sc_trace(mVcdFile, xor_ln589_9_fu_855_p2, "xor_ln589_9_fu_855_p2");
    sc_trace(mVcdFile, xor_ln589_10_fu_861_p2, "xor_ln589_10_fu_861_p2");
    sc_trace(mVcdFile, xor_ln589_11_fu_867_p2, "xor_ln589_11_fu_867_p2");
    sc_trace(mVcdFile, xor_ln589_12_fu_873_p2, "xor_ln589_12_fu_873_p2");
    sc_trace(mVcdFile, xor_ln589_13_fu_879_p2, "xor_ln589_13_fu_879_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state105, "ap_CS_fsm_state105");
    sc_trace(mVcdFile, xor_ln589_14_fu_885_p2, "xor_ln589_14_fu_885_p2");
    sc_trace(mVcdFile, xor_ln589_15_fu_892_p2, "xor_ln589_15_fu_892_p2");
    sc_trace(mVcdFile, tmp_s_fu_612_p3, "tmp_s_fu_612_p3");
    sc_trace(mVcdFile, trunc_ln476_fu_636_p1, "trunc_ln476_fu_636_p1");
    sc_trace(mVcdFile, zext_ln476_1_fu_652_p1, "zext_ln476_1_fu_652_p1");
    sc_trace(mVcdFile, add_ln476_1_fu_656_p2, "add_ln476_1_fu_656_p2");
    sc_trace(mVcdFile, zext_ln475_fu_648_p1, "zext_ln475_fu_648_p1");
    sc_trace(mVcdFile, add_ln476_fu_678_p2, "add_ln476_fu_678_p2");
    sc_trace(mVcdFile, tmp_1_fu_688_p3, "tmp_1_fu_688_p3");
    sc_trace(mVcdFile, trunc_ln484_fu_712_p1, "trunc_ln484_fu_712_p1");
    sc_trace(mVcdFile, zext_ln484_1_fu_728_p1, "zext_ln484_1_fu_728_p1");
    sc_trace(mVcdFile, add_ln484_1_fu_732_p2, "add_ln484_1_fu_732_p2");
    sc_trace(mVcdFile, zext_ln483_fu_724_p1, "zext_ln483_fu_724_p1");
    sc_trace(mVcdFile, sext_ln577_fu_763_p1, "sext_ln577_fu_763_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AES_CTR_xcrypt_buffe::~AES_CTR_xcrypt_buffe() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete buffer_U;
    delete x_U;
    delete grp_AddRoundKey_fu_551;
    delete grp_SubBytes_fu_570;
    delete grp_ShiftRows_fu_577;
    delete grp_MixColumns_fu_582;
}

void AES_CTR_xcrypt_buffe::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state86.read()) && 
         esl_seteq<1,1,1>(icmp_ln482_fu_700_p2.read(), ap_const_lv1_1))) {
        bi_1_0_reg_539 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
                esl_seteq<1,1,1>(icmp_ln579_fu_780_p2.read(), ap_const_lv1_1))) {
        bi_1_0_reg_539 = add_ln577_fu_786_p2.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_551_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(icmp_ln474_fu_624_p2.read(), ap_const_lv1_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()))) {
            grp_AddRoundKey_fu_551_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_551_ap_ready.read())) {
            grp_AddRoundKey_fu_551_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_MixColumns_fu_582_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state52.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()))) {
            grp_MixColumns_fu_582_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumns_fu_582_ap_ready.read())) {
            grp_MixColumns_fu_582_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_ShiftRows_fu_577_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state74.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()))) {
            grp_ShiftRows_fu_577_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_ShiftRows_fu_577_ap_ready.read())) {
            grp_ShiftRows_fu_577_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_SubBytes_fu_570_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state56.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read()))) {
            grp_SubBytes_fu_570_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_570_ap_ready.read())) {
            grp_SubBytes_fu_570_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read()) && 
         esl_seteq<1,1,1>(icmp_ln483_fu_742_p2.read(), ap_const_lv1_1))) {
        i_0_i1_reg_517 = i_3_reg_961.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) && 
                esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1))) {
        i_0_i1_reg_517 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln568_fu_595_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_495 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln475_fu_666_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_495 = i_reg_925.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_0_0_reg_484 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_0_0_reg_484 = add_ln568_reg_902.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read())) {
        k_0_i3_reg_528 = k_2_reg_979.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state86.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln482_fu_700_p2.read()))) {
        k_0_i3_reg_528 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_0_i_reg_506 = k_reg_943.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln474_fu_624_p2.read()))) {
        k_0_i_reg_506 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln483_fu_742_p2.read()))) {
        add_ln484_reg_984 = add_ln484_fu_754_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln568_reg_902 = add_ln568_fu_601_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state96.read())) {
        buf_load_10_reg_1106 = buf_r_q0.read();
        buf_load_11_reg_1111 = buf_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read())) {
        buf_load_12_reg_1136 = buf_r_q0.read();
        buf_load_13_reg_1141 = buf_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state92.read())) {
        buf_load_2_reg_1026 = buf_r_q0.read();
        buf_load_3_reg_1031 = buf_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state93.read())) {
        buf_load_4_reg_1046 = buf_r_q0.read();
        buf_load_5_reg_1051 = buf_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state94.read())) {
        buf_load_6_reg_1066 = buf_r_q0.read();
        buf_load_7_reg_1071 = buf_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state95.read())) {
        buf_load_8_reg_1086 = buf_r_q0.read();
        buf_load_9_reg_1091 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_767_p3.read()))) {
        ctx_Iv_addr_1_reg_993 =  (sc_lv<4>) (zext_ln579_fu_775_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state86.read())) {
        i_3_reg_961 = i_3_fu_706_p2.read();
        zext_ln482_reg_953 = zext_ln482_fu_696_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_925 = i_fu_630_p2.read();
        zext_ln474_reg_917 = zext_ln474_fu_620_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read())) {
        k_2_reg_979 = k_2_fu_748_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_943 = k_fu_672_p2.read();
        x_addr_reg_935 =  (sc_lv<4>) (zext_ln476_2_fu_661_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state91.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()))) {
        reg_587 = buf_r_q0.read();
        reg_591 = buf_r_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state86.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln482_fu_700_p2.read()))) {
        shl_ln2_reg_966 = shl_ln2_fu_716_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln474_fu_624_p2.read()))) {
        shl_ln_reg_930 = shl_ln_fu_640_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read())) {
        tmp_5_reg_989 = bi_1_0_reg_539.read().range(4, 4);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln568_fu_595_p2.read(), ap_const_lv1_0))) {
        zext_ln568_reg_907 = zext_ln568_fu_607_p1.read();
    }
}

void AES_CTR_xcrypt_buffe::thread_add_ln476_1_fu_656_p2() {
    add_ln476_1_fu_656_p2 = (!zext_ln474_reg_917.read().is_01() || !zext_ln476_1_fu_652_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln474_reg_917.read()) + sc_biguint<6>(zext_ln476_1_fu_652_p1.read()));
}

void AES_CTR_xcrypt_buffe::thread_add_ln476_fu_678_p2() {
    add_ln476_fu_678_p2 = (!zext_ln475_fu_648_p1.read().is_01() || !shl_ln_reg_930.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln475_fu_648_p1.read()) + sc_biguint<4>(shl_ln_reg_930.read()));
}

void AES_CTR_xcrypt_buffe::thread_add_ln484_1_fu_732_p2() {
    add_ln484_1_fu_732_p2 = (!zext_ln482_reg_953.read().is_01() || !zext_ln484_1_fu_728_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln482_reg_953.read()) + sc_biguint<6>(zext_ln484_1_fu_728_p1.read()));
}

void AES_CTR_xcrypt_buffe::thread_add_ln484_fu_754_p2() {
    add_ln484_fu_754_p2 = (!zext_ln483_fu_724_p1.read().is_01() || !shl_ln2_reg_966.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln483_fu_724_p1.read()) + sc_biguint<4>(shl_ln2_reg_966.read()));
}

void AES_CTR_xcrypt_buffe::thread_add_ln568_fu_601_p2() {
    add_ln568_fu_601_p2 = (!k_0_0_reg_484.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_0_0_reg_484.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_CTR_xcrypt_buffe::thread_add_ln577_fu_786_p2() {
    add_ln577_fu_786_p2 = (!bi_1_0_reg_539.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_bigint<5>(bi_1_0_reg_539.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void AES_CTR_xcrypt_buffe::thread_add_ln583_fu_792_p2() {
    add_ln583_fu_792_p2 = (!ctx_Iv_q0.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(ctx_Iv_q0.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state100() {
    ap_CS_fsm_state100 = ap_CS_fsm.read()[99];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state101() {
    ap_CS_fsm_state101 = ap_CS_fsm.read()[100];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state102() {
    ap_CS_fsm_state102 = ap_CS_fsm.read()[101];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state103() {
    ap_CS_fsm_state103 = ap_CS_fsm.read()[102];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state104() {
    ap_CS_fsm_state104 = ap_CS_fsm.read()[103];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state105() {
    ap_CS_fsm_state105 = ap_CS_fsm.read()[104];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state52() {
    ap_CS_fsm_state52 = ap_CS_fsm.read()[51];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state56() {
    ap_CS_fsm_state56 = ap_CS_fsm.read()[55];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state60() {
    ap_CS_fsm_state60 = ap_CS_fsm.read()[59];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state61() {
    ap_CS_fsm_state61 = ap_CS_fsm.read()[60];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state62() {
    ap_CS_fsm_state62 = ap_CS_fsm.read()[61];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state63() {
    ap_CS_fsm_state63 = ap_CS_fsm.read()[62];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state64() {
    ap_CS_fsm_state64 = ap_CS_fsm.read()[63];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state65() {
    ap_CS_fsm_state65 = ap_CS_fsm.read()[64];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state66() {
    ap_CS_fsm_state66 = ap_CS_fsm.read()[65];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state67() {
    ap_CS_fsm_state67 = ap_CS_fsm.read()[66];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state68() {
    ap_CS_fsm_state68 = ap_CS_fsm.read()[67];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state69() {
    ap_CS_fsm_state69 = ap_CS_fsm.read()[68];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state70() {
    ap_CS_fsm_state70 = ap_CS_fsm.read()[69];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state71() {
    ap_CS_fsm_state71 = ap_CS_fsm.read()[70];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state72() {
    ap_CS_fsm_state72 = ap_CS_fsm.read()[71];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state73() {
    ap_CS_fsm_state73 = ap_CS_fsm.read()[72];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state74() {
    ap_CS_fsm_state74 = ap_CS_fsm.read()[73];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state75() {
    ap_CS_fsm_state75 = ap_CS_fsm.read()[74];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state76() {
    ap_CS_fsm_state76 = ap_CS_fsm.read()[75];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state77() {
    ap_CS_fsm_state77 = ap_CS_fsm.read()[76];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state78() {
    ap_CS_fsm_state78 = ap_CS_fsm.read()[77];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state79() {
    ap_CS_fsm_state79 = ap_CS_fsm.read()[78];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state80() {
    ap_CS_fsm_state80 = ap_CS_fsm.read()[79];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state81() {
    ap_CS_fsm_state81 = ap_CS_fsm.read()[80];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state82() {
    ap_CS_fsm_state82 = ap_CS_fsm.read()[81];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state83() {
    ap_CS_fsm_state83 = ap_CS_fsm.read()[82];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state84() {
    ap_CS_fsm_state84 = ap_CS_fsm.read()[83];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state85() {
    ap_CS_fsm_state85 = ap_CS_fsm.read()[84];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state86() {
    ap_CS_fsm_state86 = ap_CS_fsm.read()[85];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state87() {
    ap_CS_fsm_state87 = ap_CS_fsm.read()[86];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state88() {
    ap_CS_fsm_state88 = ap_CS_fsm.read()[87];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state89() {
    ap_CS_fsm_state89 = ap_CS_fsm.read()[88];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state90() {
    ap_CS_fsm_state90 = ap_CS_fsm.read()[89];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state91() {
    ap_CS_fsm_state91 = ap_CS_fsm.read()[90];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state92() {
    ap_CS_fsm_state92 = ap_CS_fsm.read()[91];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state93() {
    ap_CS_fsm_state93 = ap_CS_fsm.read()[92];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state94() {
    ap_CS_fsm_state94 = ap_CS_fsm.read()[93];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state95() {
    ap_CS_fsm_state95 = ap_CS_fsm.read()[94];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state96() {
    ap_CS_fsm_state96 = ap_CS_fsm.read()[95];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state97() {
    ap_CS_fsm_state97 = ap_CS_fsm.read()[96];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state98() {
    ap_CS_fsm_state98 = ap_CS_fsm.read()[97];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state99() {
    ap_CS_fsm_state99 = ap_CS_fsm.read()[98];
}

void AES_CTR_xcrypt_buffe::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_10_reg_1096() {
    buf_addr_10_reg_1096 =  (sc_lv<4>) (ap_const_lv64_A);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_11_reg_1101() {
    buf_addr_11_reg_1101 =  (sc_lv<4>) (ap_const_lv64_B);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_12_reg_1116() {
    buf_addr_12_reg_1116 =  (sc_lv<4>) (ap_const_lv64_C);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_13_reg_1121() {
    buf_addr_13_reg_1121 =  (sc_lv<4>) (ap_const_lv64_D);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_14_reg_1146() {
    buf_addr_14_reg_1146 =  (sc_lv<4>) (ap_const_lv64_E);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_15_reg_1151() {
    buf_addr_15_reg_1151 =  (sc_lv<4>) (ap_const_lv64_F);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_1_reg_1011() {
    buf_addr_1_reg_1011 =  (sc_lv<4>) (ap_const_lv64_1);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_2_reg_1016() {
    buf_addr_2_reg_1016 =  (sc_lv<4>) (ap_const_lv64_2);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_3_reg_1021() {
    buf_addr_3_reg_1021 =  (sc_lv<4>) (ap_const_lv64_3);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_4_reg_1036() {
    buf_addr_4_reg_1036 =  (sc_lv<4>) (ap_const_lv64_4);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_5_reg_1041() {
    buf_addr_5_reg_1041 =  (sc_lv<4>) (ap_const_lv64_5);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_6_reg_1056() {
    buf_addr_6_reg_1056 =  (sc_lv<4>) (ap_const_lv64_6);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_7_reg_1061() {
    buf_addr_7_reg_1061 =  (sc_lv<4>) (ap_const_lv64_7);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_8_reg_1076() {
    buf_addr_8_reg_1076 =  (sc_lv<4>) (ap_const_lv64_8);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_9_reg_1081() {
    buf_addr_9_reg_1081 =  (sc_lv<4>) (ap_const_lv64_9);
}

void AES_CTR_xcrypt_buffe::thread_buf_addr_reg_1006() {
    buf_addr_reg_1006 =  (sc_lv<4>) (ap_const_lv64_0);
}

void AES_CTR_xcrypt_buffe::thread_buf_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read())) {
        buf_r_address0 = buf_addr_14_reg_1146.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buf_r_address0 = buf_addr_12_reg_1116.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buf_r_address0 = buf_addr_10_reg_1096.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buf_r_address0 = buf_addr_8_reg_1076.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buf_r_address0 = buf_addr_6_reg_1056.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buf_r_address0 = buf_addr_4_reg_1036.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buf_r_address0 = buf_addr_2_reg_1016.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buf_r_address0 = buf_addr_reg_1006.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state96.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state95.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state94.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state93.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state92.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state91.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read())) {
        buf_r_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        buf_r_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read())) {
        buf_r_address1 = buf_addr_15_reg_1151.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buf_r_address1 = buf_addr_13_reg_1121.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buf_r_address1 = buf_addr_11_reg_1101.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buf_r_address1 = buf_addr_9_reg_1081.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buf_r_address1 = buf_addr_7_reg_1061.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buf_r_address1 = buf_addr_5_reg_1041.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buf_r_address1 = buf_addr_3_reg_1021.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buf_r_address1 = buf_addr_1_reg_1011.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state96.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state95.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state94.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state93.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state92.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state91.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read())) {
        buf_r_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        buf_r_address1 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state91.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state92.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state93.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state94.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state95.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state96.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read()))) {
        buf_r_ce0 = ap_const_logic_1;
    } else {
        buf_r_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state91.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state92.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state93.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state94.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state95.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state96.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read()))) {
        buf_r_ce1 = ap_const_logic_1;
    } else {
        buf_r_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read())) {
        buf_r_d0 = xor_ln589_14_fu_885_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buf_r_d0 = xor_ln589_12_fu_873_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buf_r_d0 = xor_ln589_10_fu_861_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buf_r_d0 = xor_ln589_8_fu_849_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buf_r_d0 = xor_ln589_6_fu_837_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buf_r_d0 = xor_ln589_4_fu_825_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buf_r_d0 = xor_ln589_2_fu_813_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buf_r_d0 = xor_ln589_fu_799_p2.read();
    } else {
        buf_r_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read())) {
        buf_r_d1 = xor_ln589_15_fu_892_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buf_r_d1 = xor_ln589_13_fu_879_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buf_r_d1 = xor_ln589_11_fu_867_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buf_r_d1 = xor_ln589_9_fu_855_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buf_r_d1 = xor_ln589_7_fu_843_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buf_r_d1 = xor_ln589_5_fu_831_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buf_r_d1 = xor_ln589_3_fu_819_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buf_r_d1 = xor_ln589_1_fu_806_p2.read();
    } else {
        buf_r_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read()))) {
        buf_r_we0 = ap_const_logic_1;
    } else {
        buf_r_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state105.read()))) {
        buf_r_we1 = ap_const_logic_1;
    } else {
        buf_r_we1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read())) {
        buffer_address0 =  (sc_lv<4>) (zext_ln484_fu_759_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_address0 =  (sc_lv<4>) (zext_ln476_fu_683_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_address0 =  (sc_lv<4>) (zext_ln568_reg_907.read());
    } else {
        buffer_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        buffer_address1 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read()))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state98.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state97.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state99.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state100.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state101.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state102.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state103.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state104.read()))) {
        buffer_ce1 = ap_const_logic_1;
    } else {
        buffer_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read())) {
        buffer_d0 = x_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_d0 = ctx_Iv_q0.read();
    } else {
        buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read()))) {
        buffer_we0 = ap_const_logic_1;
    } else {
        buffer_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(icmp_ln579_fu_780_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln579_fu_780_p2.read())))) {
        ctx_Iv_address0 = ctx_Iv_addr_1_reg_993.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln579_fu_775_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln568_fu_607_p1.read());
    } else {
        ctx_Iv_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(icmp_ln579_fu_780_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln579_fu_780_p2.read())))) {
        ctx_Iv_ce0 = ap_const_logic_1;
    } else {
        ctx_Iv_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln579_fu_780_p2.read())) {
            ctx_Iv_d0 = add_ln583_fu_792_p2.read();
        } else if (esl_seteq<1,1,1>(icmp_ln579_fu_780_p2.read(), ap_const_lv1_1)) {
            ctx_Iv_d0 = ap_const_lv8_0;
        } else {
            ctx_Iv_d0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        ctx_Iv_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(icmp_ln579_fu_780_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_989.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln579_fu_780_p2.read())))) {
        ctx_Iv_we0 = ap_const_logic_1;
    } else {
        ctx_Iv_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_address0() {
    ctx_RoundKey_address0 = grp_AddRoundKey_fu_551_RoundKey_address0.read();
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_address1() {
    ctx_RoundKey_address1 = grp_AddRoundKey_fu_551_RoundKey_address1.read();
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        ctx_RoundKey_ce0 = grp_AddRoundKey_fu_551_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        ctx_RoundKey_ce1 = grp_AddRoundKey_fu_551_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_551_ap_start() {
    grp_AddRoundKey_fu_551_ap_start = grp_AddRoundKey_fu_551_ap_start_reg.read();
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_551_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_AddRoundKey_fu_551_round = ap_const_lv5_0;
    } else {
        grp_AddRoundKey_fu_551_round =  (sc_lv<5>) ("XXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_MixColumns_fu_582_ap_start() {
    grp_MixColumns_fu_582_ap_start = grp_MixColumns_fu_582_ap_start_reg.read();
}

void AES_CTR_xcrypt_buffe::thread_grp_ShiftRows_fu_577_ap_start() {
    grp_ShiftRows_fu_577_ap_start = grp_ShiftRows_fu_577_ap_start_reg.read();
}

void AES_CTR_xcrypt_buffe::thread_grp_SubBytes_fu_570_ap_start() {
    grp_SubBytes_fu_570_ap_start = grp_SubBytes_fu_570_ap_start_reg.read();
}

void AES_CTR_xcrypt_buffe::thread_i_3_fu_706_p2() {
    i_3_fu_706_p2 = (!i_0_i1_reg_517.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i1_reg_517.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_CTR_xcrypt_buffe::thread_i_fu_630_p2() {
    i_fu_630_p2 = (!i_0_i_reg_495.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i_reg_495.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln474_fu_624_p2() {
    icmp_ln474_fu_624_p2 = (!i_0_i_reg_495.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_495.read() == ap_const_lv3_4);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln475_fu_666_p2() {
    icmp_ln475_fu_666_p2 = (!k_0_i_reg_506.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_i_reg_506.read() == ap_const_lv3_4);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln482_fu_700_p2() {
    icmp_ln482_fu_700_p2 = (!i_0_i1_reg_517.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i1_reg_517.read() == ap_const_lv3_4);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln483_fu_742_p2() {
    icmp_ln483_fu_742_p2 = (!k_0_i3_reg_528.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_i3_reg_528.read() == ap_const_lv3_4);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln568_fu_595_p2() {
    icmp_ln568_fu_595_p2 = (!k_0_0_reg_484.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(k_0_0_reg_484.read() == ap_const_lv5_10);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln579_fu_780_p2() {
    icmp_ln579_fu_780_p2 = (!ctx_Iv_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(ctx_Iv_q0.read() == ap_const_lv8_FF);
}

void AES_CTR_xcrypt_buffe::thread_k_2_fu_748_p2() {
    k_2_fu_748_p2 = (!k_0_i3_reg_528.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_i3_reg_528.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_CTR_xcrypt_buffe::thread_k_fu_672_p2() {
    k_fu_672_p2 = (!k_0_i_reg_506.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_i_reg_506.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_CTR_xcrypt_buffe::thread_sext_ln577_fu_763_p1() {
    sext_ln577_fu_763_p1 = esl_sext<32,5>(bi_1_0_reg_539.read());
}

void AES_CTR_xcrypt_buffe::thread_shl_ln2_fu_716_p3() {
    shl_ln2_fu_716_p3 = esl_concat<2,2>(trunc_ln484_fu_712_p1.read(), ap_const_lv2_0);
}

void AES_CTR_xcrypt_buffe::thread_shl_ln_fu_640_p3() {
    shl_ln_fu_640_p3 = esl_concat<2,2>(trunc_ln476_fu_636_p1.read(), ap_const_lv2_0);
}

void AES_CTR_xcrypt_buffe::thread_tmp_1_fu_688_p3() {
    tmp_1_fu_688_p3 = esl_concat<3,2>(i_0_i1_reg_517.read(), ap_const_lv2_0);
}

void AES_CTR_xcrypt_buffe::thread_tmp_5_fu_767_p3() {
    tmp_5_fu_767_p3 = bi_1_0_reg_539.read().range(4, 4);
}

void AES_CTR_xcrypt_buffe::thread_tmp_s_fu_612_p3() {
    tmp_s_fu_612_p3 = esl_concat<3,2>(i_0_i_reg_495.read(), ap_const_lv2_0);
}

void AES_CTR_xcrypt_buffe::thread_trunc_ln476_fu_636_p1() {
    trunc_ln476_fu_636_p1 = i_0_i_reg_495.read().range(2-1, 0);
}

void AES_CTR_xcrypt_buffe::thread_trunc_ln484_fu_712_p1() {
    trunc_ln484_fu_712_p1 = i_0_i1_reg_517.read().range(2-1, 0);
}

void AES_CTR_xcrypt_buffe::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read())) {
        x_address0 =  (sc_lv<4>) (zext_ln484_2_fu_737_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_address0 = x_addr_reg_935.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_address0 = grp_MixColumns_fu_582_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_address0 = grp_ShiftRows_fu_577_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_address0 = grp_SubBytes_fu_570_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_address0 = grp_AddRoundKey_fu_551_state_address0.read();
    } else {
        x_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_x_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_address1 = grp_MixColumns_fu_582_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_address1 = grp_ShiftRows_fu_577_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_address1 = grp_SubBytes_fu_570_state_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_address1 = grp_AddRoundKey_fu_551_state_address1.read();
    } else {
        x_address1 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        x_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_ce0 = grp_MixColumns_fu_582_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_ce0 = grp_ShiftRows_fu_577_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_ce0 = grp_SubBytes_fu_570_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_ce0 = grp_AddRoundKey_fu_551_state_ce0.read();
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_x_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_ce1 = grp_MixColumns_fu_582_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_ce1 = grp_ShiftRows_fu_577_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_ce1 = grp_SubBytes_fu_570_state_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_ce1 = grp_AddRoundKey_fu_551_state_ce1.read();
    } else {
        x_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_x_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_d0 = buffer_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_d0 = grp_MixColumns_fu_582_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_d0 = grp_ShiftRows_fu_577_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_d0 = grp_SubBytes_fu_570_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_d0 = grp_AddRoundKey_fu_551_state_d0.read();
    } else {
        x_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_x_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_d1 = grp_MixColumns_fu_582_state_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_d1 = grp_ShiftRows_fu_577_state_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_d1 = grp_SubBytes_fu_570_state_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_d1 = grp_AddRoundKey_fu_551_state_d1.read();
    } else {
        x_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_x_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_we0 = grp_MixColumns_fu_582_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_we0 = grp_ShiftRows_fu_577_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_we0 = grp_SubBytes_fu_570_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_we0 = grp_AddRoundKey_fu_551_state_we0.read();
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_x_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()))) {
        x_we1 = grp_MixColumns_fu_582_state_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        x_we1 = grp_ShiftRows_fu_577_state_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()))) {
        x_we1 = grp_SubBytes_fu_570_state_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        x_we1 = grp_AddRoundKey_fu_551_state_we1.read();
    } else {
        x_we1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_10_fu_861_p2() {
    xor_ln589_10_fu_861_p2 = (buffer_q1.read() ^ buf_load_10_reg_1106.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_11_fu_867_p2() {
    xor_ln589_11_fu_867_p2 = (buffer_q0.read() ^ buf_load_11_reg_1111.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_12_fu_873_p2() {
    xor_ln589_12_fu_873_p2 = (buffer_q1.read() ^ buf_load_12_reg_1136.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_13_fu_879_p2() {
    xor_ln589_13_fu_879_p2 = (buffer_q0.read() ^ buf_load_13_reg_1141.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_14_fu_885_p2() {
    xor_ln589_14_fu_885_p2 = (buffer_q1.read() ^ reg_587.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_15_fu_892_p2() {
    xor_ln589_15_fu_892_p2 = (buffer_q0.read() ^ reg_591.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_1_fu_806_p2() {
    xor_ln589_1_fu_806_p2 = (buffer_q1.read() ^ reg_591.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_2_fu_813_p2() {
    xor_ln589_2_fu_813_p2 = (buffer_q1.read() ^ buf_load_2_reg_1026.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_3_fu_819_p2() {
    xor_ln589_3_fu_819_p2 = (buffer_q0.read() ^ buf_load_3_reg_1031.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_4_fu_825_p2() {
    xor_ln589_4_fu_825_p2 = (buffer_q1.read() ^ buf_load_4_reg_1046.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_5_fu_831_p2() {
    xor_ln589_5_fu_831_p2 = (buffer_q0.read() ^ buf_load_5_reg_1051.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_6_fu_837_p2() {
    xor_ln589_6_fu_837_p2 = (buffer_q1.read() ^ buf_load_6_reg_1066.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_7_fu_843_p2() {
    xor_ln589_7_fu_843_p2 = (buffer_q0.read() ^ buf_load_7_reg_1071.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_8_fu_849_p2() {
    xor_ln589_8_fu_849_p2 = (buffer_q1.read() ^ buf_load_8_reg_1086.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_9_fu_855_p2() {
    xor_ln589_9_fu_855_p2 = (buffer_q0.read() ^ buf_load_9_reg_1091.read());
}

void AES_CTR_xcrypt_buffe::thread_xor_ln589_fu_799_p2() {
    xor_ln589_fu_799_p2 = (buffer_q0.read() ^ reg_587.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln474_fu_620_p1() {
    zext_ln474_fu_620_p1 = esl_zext<6,5>(tmp_s_fu_612_p3.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln475_fu_648_p1() {
    zext_ln475_fu_648_p1 = esl_zext<4,3>(k_0_i_reg_506.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln476_1_fu_652_p1() {
    zext_ln476_1_fu_652_p1 = esl_zext<6,3>(k_0_i_reg_506.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln476_2_fu_661_p1() {
    zext_ln476_2_fu_661_p1 = esl_zext<64,6>(add_ln476_1_fu_656_p2.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln476_fu_683_p1() {
    zext_ln476_fu_683_p1 = esl_zext<64,4>(add_ln476_fu_678_p2.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln482_fu_696_p1() {
    zext_ln482_fu_696_p1 = esl_zext<6,5>(tmp_1_fu_688_p3.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln483_fu_724_p1() {
    zext_ln483_fu_724_p1 = esl_zext<4,3>(k_0_i3_reg_528.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln484_1_fu_728_p1() {
    zext_ln484_1_fu_728_p1 = esl_zext<6,3>(k_0_i3_reg_528.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln484_2_fu_737_p1() {
    zext_ln484_2_fu_737_p1 = esl_zext<64,6>(add_ln484_1_fu_732_p2.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln484_fu_759_p1() {
    zext_ln484_fu_759_p1 = esl_zext<64,4>(add_ln484_reg_984.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln568_fu_607_p1() {
    zext_ln568_fu_607_p1 = esl_zext<64,5>(k_0_0_reg_484.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln579_fu_775_p1() {
    zext_ln579_fu_775_p1 = esl_zext<64,32>(sext_ln577_fu_763_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_ap_NS_fsm() {
    if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln568_fu_595_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state4;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state2;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln474_fu_624_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state5;
        } else {
            ap_NS_fsm = ap_ST_fsm_state7;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln475_fu_666_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state4;
        } else {
            ap_NS_fsm = ap_ST_fsm_state6;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
            ap_NS_fsm = ap_ST_fsm_state8;
        } else {
            ap_NS_fsm = ap_ST_fsm_state7;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state10;
        } else {
            ap_NS_fsm = ap_ST_fsm_state9;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state12;
        } else {
            ap_NS_fsm = ap_ST_fsm_state11;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state14;
        } else {
            ap_NS_fsm = ap_ST_fsm_state13;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
            ap_NS_fsm = ap_ST_fsm_state16;
        } else {
            ap_NS_fsm = ap_ST_fsm_state15;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state18;
        } else {
            ap_NS_fsm = ap_ST_fsm_state17;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state20;
        } else {
            ap_NS_fsm = ap_ST_fsm_state19;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state22;
        } else {
            ap_NS_fsm = ap_ST_fsm_state21;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
            ap_NS_fsm = ap_ST_fsm_state24;
        } else {
            ap_NS_fsm = ap_ST_fsm_state23;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state26;
        } else {
            ap_NS_fsm = ap_ST_fsm_state25;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state28;
        } else {
            ap_NS_fsm = ap_ST_fsm_state27;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state30;
        } else {
            ap_NS_fsm = ap_ST_fsm_state29;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
            ap_NS_fsm = ap_ST_fsm_state32;
        } else {
            ap_NS_fsm = ap_ST_fsm_state31;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state34;
        } else {
            ap_NS_fsm = ap_ST_fsm_state33;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state36;
        } else {
            ap_NS_fsm = ap_ST_fsm_state35;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state38;
        } else {
            ap_NS_fsm = ap_ST_fsm_state37;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
            ap_NS_fsm = ap_ST_fsm_state40;
        } else {
            ap_NS_fsm = ap_ST_fsm_state39;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state42;
        } else {
            ap_NS_fsm = ap_ST_fsm_state41;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state44;
        } else {
            ap_NS_fsm = ap_ST_fsm_state43;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state46;
        } else {
            ap_NS_fsm = ap_ST_fsm_state45;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
            ap_NS_fsm = ap_ST_fsm_state48;
        } else {
            ap_NS_fsm = ap_ST_fsm_state47;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state50;
        } else {
            ap_NS_fsm = ap_ST_fsm_state49;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state52;
        } else {
            ap_NS_fsm = ap_ST_fsm_state51;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state54;
        } else {
            ap_NS_fsm = ap_ST_fsm_state53;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()))) {
            ap_NS_fsm = ap_ST_fsm_state56;
        } else {
            ap_NS_fsm = ap_ST_fsm_state55;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state58;
        } else {
            ap_NS_fsm = ap_ST_fsm_state57;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state60;
        } else {
            ap_NS_fsm = ap_ST_fsm_state59;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state62;
        } else {
            ap_NS_fsm = ap_ST_fsm_state61;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()))) {
            ap_NS_fsm = ap_ST_fsm_state64;
        } else {
            ap_NS_fsm = ap_ST_fsm_state63;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state65.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state66;
        } else {
            ap_NS_fsm = ap_ST_fsm_state65;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state68;
        } else {
            ap_NS_fsm = ap_ST_fsm_state67;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state70;
        } else {
            ap_NS_fsm = ap_ST_fsm_state69;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read()))) {
            ap_NS_fsm = ap_ST_fsm_state72;
        } else {
            ap_NS_fsm = ap_ST_fsm_state71;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state73;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state74;
        } else {
            ap_NS_fsm = ap_ST_fsm_state73;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state74))
    {
        ap_NS_fsm = ap_ST_fsm_state75;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state75))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state76;
        } else {
            ap_NS_fsm = ap_ST_fsm_state75;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state76))
    {
        ap_NS_fsm = ap_ST_fsm_state77;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state77))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) && esl_seteq<1,1,1>(grp_MixColumns_fu_582_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state78;
        } else {
            ap_NS_fsm = ap_ST_fsm_state77;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state78))
    {
        ap_NS_fsm = ap_ST_fsm_state79;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state79))
    {
        if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
            ap_NS_fsm = ap_ST_fsm_state80;
        } else {
            ap_NS_fsm = ap_ST_fsm_state79;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state80))
    {
        ap_NS_fsm = ap_ST_fsm_state81;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state81))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state81.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_570_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state82;
        } else {
            ap_NS_fsm = ap_ST_fsm_state81;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state82))
    {
        ap_NS_fsm = ap_ST_fsm_state83;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state83))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && esl_seteq<1,1,1>(grp_ShiftRows_fu_577_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state84;
        } else {
            ap_NS_fsm = ap_ST_fsm_state83;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state84))
    {
        ap_NS_fsm = ap_ST_fsm_state85;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state85))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state85.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_551_ap_done.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state86;
        } else {
            ap_NS_fsm = ap_ST_fsm_state85;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state86))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state86.read()) && esl_seteq<1,1,1>(icmp_ln482_fu_700_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state89;
        } else {
            ap_NS_fsm = ap_ST_fsm_state87;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state87))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read()) && esl_seteq<1,1,1>(icmp_ln483_fu_742_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state86;
        } else {
            ap_NS_fsm = ap_ST_fsm_state88;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state88))
    {
        ap_NS_fsm = ap_ST_fsm_state87;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state89))
    {
        ap_NS_fsm = ap_ST_fsm_state90;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state90))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state90.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln579_fu_780_p2.read()) || 
  esl_seteq<1,1,1>(tmp_5_reg_989.read(), ap_const_lv1_1)))) {
            ap_NS_fsm = ap_ST_fsm_state91;
        } else {
            ap_NS_fsm = ap_ST_fsm_state89;
        }
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state91))
    {
        ap_NS_fsm = ap_ST_fsm_state92;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state92))
    {
        ap_NS_fsm = ap_ST_fsm_state93;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state93))
    {
        ap_NS_fsm = ap_ST_fsm_state94;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state94))
    {
        ap_NS_fsm = ap_ST_fsm_state95;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state95))
    {
        ap_NS_fsm = ap_ST_fsm_state96;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state96))
    {
        ap_NS_fsm = ap_ST_fsm_state97;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state97))
    {
        ap_NS_fsm = ap_ST_fsm_state98;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state98))
    {
        ap_NS_fsm = ap_ST_fsm_state99;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state99))
    {
        ap_NS_fsm = ap_ST_fsm_state100;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state100))
    {
        ap_NS_fsm = ap_ST_fsm_state101;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state101))
    {
        ap_NS_fsm = ap_ST_fsm_state102;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state102))
    {
        ap_NS_fsm = ap_ST_fsm_state103;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state103))
    {
        ap_NS_fsm = ap_ST_fsm_state104;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state104))
    {
        ap_NS_fsm = ap_ST_fsm_state105;
    }
    else if (esl_seteq<1,105,105>(ap_CS_fsm.read(), ap_ST_fsm_state105))
    {
        ap_NS_fsm = ap_ST_fsm_state1;
    }
    else
    {
        ap_NS_fsm =  (sc_lv<105>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
}

