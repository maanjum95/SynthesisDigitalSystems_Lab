// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state6 = "100000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> AddRoundKey::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> AddRoundKey::ap_const_lv32_8 = "1000";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> AddRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> AddRoundKey::ap_const_lv32_6 = "110";
const sc_lv<32> AddRoundKey::ap_const_lv32_7 = "111";
const sc_lv<32> AddRoundKey::ap_const_lv32_9 = "1001";
const sc_lv<32> AddRoundKey::ap_const_lv32_A = "1010";
const sc_lv<32> AddRoundKey::ap_const_lv32_B = "1011";
const sc_lv<32> AddRoundKey::ap_const_lv32_C = "1100";
const sc_lv<32> AddRoundKey::ap_const_lv32_D = "1101";
const sc_lv<32> AddRoundKey::ap_const_lv32_E = "1110";
const sc_lv<64> AddRoundKey::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AddRoundKey::ap_const_lv64_1 = "1";
const sc_lv<64> AddRoundKey::ap_const_lv64_2 = "10";
const sc_lv<64> AddRoundKey::ap_const_lv64_3 = "11";
const sc_lv<64> AddRoundKey::ap_const_lv64_4 = "100";
const sc_lv<64> AddRoundKey::ap_const_lv64_5 = "101";
const sc_lv<64> AddRoundKey::ap_const_lv64_6 = "110";
const sc_lv<64> AddRoundKey::ap_const_lv64_7 = "111";
const sc_lv<64> AddRoundKey::ap_const_lv64_8 = "1000";
const sc_lv<64> AddRoundKey::ap_const_lv64_9 = "1001";
const sc_lv<64> AddRoundKey::ap_const_lv64_A = "1010";
const sc_lv<64> AddRoundKey::ap_const_lv64_B = "1011";
const sc_lv<64> AddRoundKey::ap_const_lv64_C = "1100";
const sc_lv<64> AddRoundKey::ap_const_lv64_D = "1101";
const sc_lv<64> AddRoundKey::ap_const_lv64_E = "1110";
const sc_lv<64> AddRoundKey::ap_const_lv64_F = "1111";
const sc_lv<32> AddRoundKey::ap_const_lv32_F = "1111";
const sc_lv<4> AddRoundKey::ap_const_lv4_0 = "0000";
const sc_lv<8> AddRoundKey::ap_const_lv8_1 = "1";
const sc_lv<8> AddRoundKey::ap_const_lv8_2 = "10";
const sc_lv<8> AddRoundKey::ap_const_lv8_3 = "11";
const sc_lv<8> AddRoundKey::ap_const_lv8_4 = "100";
const sc_lv<8> AddRoundKey::ap_const_lv8_5 = "101";
const sc_lv<8> AddRoundKey::ap_const_lv8_6 = "110";
const sc_lv<8> AddRoundKey::ap_const_lv8_7 = "111";
const sc_lv<8> AddRoundKey::ap_const_lv8_8 = "1000";
const sc_lv<8> AddRoundKey::ap_const_lv8_9 = "1001";
const sc_lv<8> AddRoundKey::ap_const_lv8_A = "1010";
const sc_lv<8> AddRoundKey::ap_const_lv8_B = "1011";
const sc_lv<8> AddRoundKey::ap_const_lv8_C = "1100";
const sc_lv<8> AddRoundKey::ap_const_lv8_D = "1101";
const sc_lv<8> AddRoundKey::ap_const_lv8_E = "1110";
const sc_lv<8> AddRoundKey::ap_const_lv8_F = "1111";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( zext_ln265_fu_404_p1 );
    sensitive << ( zext_ln265_2_fu_425_p1 );
    sensitive << ( zext_ln265_4_fu_457_p1 );
    sensitive << ( zext_ln265_6_fu_489_p1 );
    sensitive << ( zext_ln265_8_fu_521_p1 );
    sensitive << ( zext_ln265_10_fu_553_p1 );
    sensitive << ( zext_ln265_12_fu_585_p1 );
    sensitive << ( zext_ln265_14_fu_617_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( zext_ln265_1_fu_415_p1 );
    sensitive << ( zext_ln265_3_fu_435_p1 );
    sensitive << ( zext_ln265_5_fu_467_p1 );
    sensitive << ( zext_ln265_7_fu_499_p1 );
    sensitive << ( zext_ln265_9_fu_531_p1 );
    sensitive << ( zext_ln265_11_fu_563_p1 );
    sensitive << ( zext_ln265_13_fu_595_p1 );
    sensitive << ( zext_ln265_15_fu_627_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_grp_fu_378_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( reg_370 );

    SC_METHOD(thread_grp_fu_385_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( reg_374 );

    SC_METHOD(thread_or_ln265_10_fu_558_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_11_fu_580_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_12_fu_590_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_13_fu_612_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_14_fu_622_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_1_fu_420_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_2_fu_430_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_3_fu_452_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_4_fu_462_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_5_fu_484_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_6_fu_494_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_7_fu_516_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_8_fu_526_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_9_fu_548_p2);
    sensitive << ( shl_ln_reg_762 );

    SC_METHOD(thread_or_ln265_fu_409_p2);
    sensitive << ( shl_ln_fu_396_p3 );

    SC_METHOD(thread_shl_ln_fu_396_p3);
    sensitive << ( trunc_ln265_fu_392_p1 );

    SC_METHOD(thread_state_addr_16_reg_637);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_addr_17_reg_642);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_18_reg_647);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_state_addr_19_reg_652);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_20_reg_657);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_state_addr_21_reg_672);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_22_reg_677);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_addr_23_reg_692);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_24_reg_697);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_addr_25_reg_712);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_26_reg_717);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_state_addr_27_reg_732);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_28_reg_737);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_state_addr_29_reg_752);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_30_reg_757);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_addr_reg_632);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_reg_632 );
    sensitive << ( state_addr_17_reg_642 );
    sensitive << ( state_addr_19_reg_652 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_21_reg_672 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_23_reg_692 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_25_reg_712 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_27_reg_732 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_29_reg_752 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( state_addr_16_reg_637 );
    sensitive << ( state_addr_18_reg_647 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( state_addr_20_reg_657 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_22_reg_677 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( state_addr_24_reg_697 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( state_addr_26_reg_717 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( state_addr_28_reg_737 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_addr_30_reg_757 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fu_378_p2 );
    sensitive << ( xor_ln265_2_fu_440_p2 );
    sensitive << ( xor_ln265_4_fu_472_p2 );
    sensitive << ( xor_ln265_6_fu_504_p2 );
    sensitive << ( xor_ln265_8_fu_536_p2 );
    sensitive << ( xor_ln265_10_fu_568_p2 );
    sensitive << ( xor_ln265_12_fu_600_p2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_d1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_fu_385_p2 );
    sensitive << ( xor_ln265_3_fu_446_p2 );
    sensitive << ( xor_ln265_5_fu_478_p2 );
    sensitive << ( xor_ln265_7_fu_510_p2 );
    sensitive << ( xor_ln265_9_fu_542_p2 );
    sensitive << ( xor_ln265_11_fu_574_p2 );
    sensitive << ( xor_ln265_13_fu_606_p2 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_trunc_ln265_fu_392_p1);
    sensitive << ( round );

    SC_METHOD(thread_xor_ln265_10_fu_568_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_30_reg_742 );

    SC_METHOD(thread_xor_ln265_11_fu_574_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_31_reg_747 );

    SC_METHOD(thread_xor_ln265_12_fu_600_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_32_reg_790 );

    SC_METHOD(thread_xor_ln265_13_fu_606_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_33_reg_795 );

    SC_METHOD(thread_xor_ln265_2_fu_440_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_22_reg_662 );

    SC_METHOD(thread_xor_ln265_3_fu_446_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_23_reg_667 );

    SC_METHOD(thread_xor_ln265_4_fu_472_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_24_reg_682 );

    SC_METHOD(thread_xor_ln265_5_fu_478_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_25_reg_687 );

    SC_METHOD(thread_xor_ln265_6_fu_504_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_26_reg_702 );

    SC_METHOD(thread_xor_ln265_7_fu_510_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_27_reg_707 );

    SC_METHOD(thread_xor_ln265_8_fu_536_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( state_load_28_reg_722 );

    SC_METHOD(thread_xor_ln265_9_fu_542_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( state_load_29_reg_727 );

    SC_METHOD(thread_zext_ln265_10_fu_553_p1);
    sensitive << ( or_ln265_9_fu_548_p2 );

    SC_METHOD(thread_zext_ln265_11_fu_563_p1);
    sensitive << ( or_ln265_10_fu_558_p2 );

    SC_METHOD(thread_zext_ln265_12_fu_585_p1);
    sensitive << ( or_ln265_11_fu_580_p2 );

    SC_METHOD(thread_zext_ln265_13_fu_595_p1);
    sensitive << ( or_ln265_12_fu_590_p2 );

    SC_METHOD(thread_zext_ln265_14_fu_617_p1);
    sensitive << ( or_ln265_13_fu_612_p2 );

    SC_METHOD(thread_zext_ln265_15_fu_627_p1);
    sensitive << ( or_ln265_14_fu_622_p2 );

    SC_METHOD(thread_zext_ln265_1_fu_415_p1);
    sensitive << ( or_ln265_fu_409_p2 );

    SC_METHOD(thread_zext_ln265_2_fu_425_p1);
    sensitive << ( or_ln265_1_fu_420_p2 );

    SC_METHOD(thread_zext_ln265_3_fu_435_p1);
    sensitive << ( or_ln265_2_fu_430_p2 );

    SC_METHOD(thread_zext_ln265_4_fu_457_p1);
    sensitive << ( or_ln265_3_fu_452_p2 );

    SC_METHOD(thread_zext_ln265_5_fu_467_p1);
    sensitive << ( or_ln265_4_fu_462_p2 );

    SC_METHOD(thread_zext_ln265_6_fu_489_p1);
    sensitive << ( or_ln265_5_fu_484_p2 );

    SC_METHOD(thread_zext_ln265_7_fu_499_p1);
    sensitive << ( or_ln265_6_fu_494_p2 );

    SC_METHOD(thread_zext_ln265_8_fu_521_p1);
    sensitive << ( or_ln265_7_fu_516_p2 );

    SC_METHOD(thread_zext_ln265_9_fu_531_p1);
    sensitive << ( or_ln265_8_fu_526_p2 );

    SC_METHOD(thread_zext_ln265_fu_404_p1);
    sensitive << ( shl_ln_fu_396_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_370, "reg_370");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, reg_374, "reg_374");
    sc_trace(mVcdFile, state_addr_reg_632, "state_addr_reg_632");
    sc_trace(mVcdFile, state_addr_16_reg_637, "state_addr_16_reg_637");
    sc_trace(mVcdFile, state_addr_17_reg_642, "state_addr_17_reg_642");
    sc_trace(mVcdFile, state_addr_18_reg_647, "state_addr_18_reg_647");
    sc_trace(mVcdFile, state_addr_19_reg_652, "state_addr_19_reg_652");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, state_addr_20_reg_657, "state_addr_20_reg_657");
    sc_trace(mVcdFile, state_load_22_reg_662, "state_load_22_reg_662");
    sc_trace(mVcdFile, state_load_23_reg_667, "state_load_23_reg_667");
    sc_trace(mVcdFile, state_addr_21_reg_672, "state_addr_21_reg_672");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, state_addr_22_reg_677, "state_addr_22_reg_677");
    sc_trace(mVcdFile, state_load_24_reg_682, "state_load_24_reg_682");
    sc_trace(mVcdFile, state_load_25_reg_687, "state_load_25_reg_687");
    sc_trace(mVcdFile, state_addr_23_reg_692, "state_addr_23_reg_692");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_addr_24_reg_697, "state_addr_24_reg_697");
    sc_trace(mVcdFile, state_load_26_reg_702, "state_load_26_reg_702");
    sc_trace(mVcdFile, state_load_27_reg_707, "state_load_27_reg_707");
    sc_trace(mVcdFile, state_addr_25_reg_712, "state_addr_25_reg_712");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, state_addr_26_reg_717, "state_addr_26_reg_717");
    sc_trace(mVcdFile, state_load_28_reg_722, "state_load_28_reg_722");
    sc_trace(mVcdFile, state_load_29_reg_727, "state_load_29_reg_727");
    sc_trace(mVcdFile, state_addr_27_reg_732, "state_addr_27_reg_732");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, state_addr_28_reg_737, "state_addr_28_reg_737");
    sc_trace(mVcdFile, state_load_30_reg_742, "state_load_30_reg_742");
    sc_trace(mVcdFile, state_load_31_reg_747, "state_load_31_reg_747");
    sc_trace(mVcdFile, state_addr_29_reg_752, "state_addr_29_reg_752");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, state_addr_30_reg_757, "state_addr_30_reg_757");
    sc_trace(mVcdFile, shl_ln_fu_396_p3, "shl_ln_fu_396_p3");
    sc_trace(mVcdFile, shl_ln_reg_762, "shl_ln_reg_762");
    sc_trace(mVcdFile, state_load_32_reg_790, "state_load_32_reg_790");
    sc_trace(mVcdFile, state_load_33_reg_795, "state_load_33_reg_795");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, zext_ln265_fu_404_p1, "zext_ln265_fu_404_p1");
    sc_trace(mVcdFile, zext_ln265_1_fu_415_p1, "zext_ln265_1_fu_415_p1");
    sc_trace(mVcdFile, zext_ln265_2_fu_425_p1, "zext_ln265_2_fu_425_p1");
    sc_trace(mVcdFile, zext_ln265_3_fu_435_p1, "zext_ln265_3_fu_435_p1");
    sc_trace(mVcdFile, zext_ln265_4_fu_457_p1, "zext_ln265_4_fu_457_p1");
    sc_trace(mVcdFile, zext_ln265_5_fu_467_p1, "zext_ln265_5_fu_467_p1");
    sc_trace(mVcdFile, zext_ln265_6_fu_489_p1, "zext_ln265_6_fu_489_p1");
    sc_trace(mVcdFile, zext_ln265_7_fu_499_p1, "zext_ln265_7_fu_499_p1");
    sc_trace(mVcdFile, zext_ln265_8_fu_521_p1, "zext_ln265_8_fu_521_p1");
    sc_trace(mVcdFile, zext_ln265_9_fu_531_p1, "zext_ln265_9_fu_531_p1");
    sc_trace(mVcdFile, zext_ln265_10_fu_553_p1, "zext_ln265_10_fu_553_p1");
    sc_trace(mVcdFile, zext_ln265_11_fu_563_p1, "zext_ln265_11_fu_563_p1");
    sc_trace(mVcdFile, zext_ln265_12_fu_585_p1, "zext_ln265_12_fu_585_p1");
    sc_trace(mVcdFile, zext_ln265_13_fu_595_p1, "zext_ln265_13_fu_595_p1");
    sc_trace(mVcdFile, zext_ln265_14_fu_617_p1, "zext_ln265_14_fu_617_p1");
    sc_trace(mVcdFile, zext_ln265_15_fu_627_p1, "zext_ln265_15_fu_627_p1");
    sc_trace(mVcdFile, grp_fu_378_p2, "grp_fu_378_p2");
    sc_trace(mVcdFile, grp_fu_385_p2, "grp_fu_385_p2");
    sc_trace(mVcdFile, xor_ln265_2_fu_440_p2, "xor_ln265_2_fu_440_p2");
    sc_trace(mVcdFile, xor_ln265_3_fu_446_p2, "xor_ln265_3_fu_446_p2");
    sc_trace(mVcdFile, xor_ln265_4_fu_472_p2, "xor_ln265_4_fu_472_p2");
    sc_trace(mVcdFile, xor_ln265_5_fu_478_p2, "xor_ln265_5_fu_478_p2");
    sc_trace(mVcdFile, xor_ln265_6_fu_504_p2, "xor_ln265_6_fu_504_p2");
    sc_trace(mVcdFile, xor_ln265_7_fu_510_p2, "xor_ln265_7_fu_510_p2");
    sc_trace(mVcdFile, xor_ln265_8_fu_536_p2, "xor_ln265_8_fu_536_p2");
    sc_trace(mVcdFile, xor_ln265_9_fu_542_p2, "xor_ln265_9_fu_542_p2");
    sc_trace(mVcdFile, xor_ln265_10_fu_568_p2, "xor_ln265_10_fu_568_p2");
    sc_trace(mVcdFile, xor_ln265_11_fu_574_p2, "xor_ln265_11_fu_574_p2");
    sc_trace(mVcdFile, xor_ln265_12_fu_600_p2, "xor_ln265_12_fu_600_p2");
    sc_trace(mVcdFile, xor_ln265_13_fu_606_p2, "xor_ln265_13_fu_606_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, trunc_ln265_fu_392_p1, "trunc_ln265_fu_392_p1");
    sc_trace(mVcdFile, or_ln265_fu_409_p2, "or_ln265_fu_409_p2");
    sc_trace(mVcdFile, or_ln265_1_fu_420_p2, "or_ln265_1_fu_420_p2");
    sc_trace(mVcdFile, or_ln265_2_fu_430_p2, "or_ln265_2_fu_430_p2");
    sc_trace(mVcdFile, or_ln265_3_fu_452_p2, "or_ln265_3_fu_452_p2");
    sc_trace(mVcdFile, or_ln265_4_fu_462_p2, "or_ln265_4_fu_462_p2");
    sc_trace(mVcdFile, or_ln265_5_fu_484_p2, "or_ln265_5_fu_484_p2");
    sc_trace(mVcdFile, or_ln265_6_fu_494_p2, "or_ln265_6_fu_494_p2");
    sc_trace(mVcdFile, or_ln265_7_fu_516_p2, "or_ln265_7_fu_516_p2");
    sc_trace(mVcdFile, or_ln265_8_fu_526_p2, "or_ln265_8_fu_526_p2");
    sc_trace(mVcdFile, or_ln265_9_fu_548_p2, "or_ln265_9_fu_548_p2");
    sc_trace(mVcdFile, or_ln265_10_fu_558_p2, "or_ln265_10_fu_558_p2");
    sc_trace(mVcdFile, or_ln265_11_fu_580_p2, "or_ln265_11_fu_580_p2");
    sc_trace(mVcdFile, or_ln265_12_fu_590_p2, "or_ln265_12_fu_590_p2");
    sc_trace(mVcdFile, or_ln265_13_fu_612_p2, "or_ln265_13_fu_612_p2");
    sc_trace(mVcdFile, or_ln265_14_fu_622_p2, "or_ln265_14_fu_622_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_370 = state_q0.read();
        reg_374 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        shl_ln_reg_762 = shl_ln_fu_396_p3.read();
        state_load_32_reg_790 = state_q0.read();
        state_load_33_reg_795 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_load_22_reg_662 = state_q0.read();
        state_load_23_reg_667 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_load_24_reg_682 = state_q0.read();
        state_load_25_reg_687 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_load_26_reg_702 = state_q0.read();
        state_load_27_reg_707 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_load_28_reg_722 = state_q0.read();
        state_load_29_reg_727 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_load_30_reg_742 = state_q0.read();
        state_load_31_reg_747 = state_q1.read();
    }
}

void AddRoundKey::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_14_fu_617_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_12_fu_585_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_10_fu_553_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_8_fu_521_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_6_fu_489_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_4_fu_457_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_2_fu_425_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln265_fu_404_p1.read());
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_15_fu_627_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_13_fu_595_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_11_fu_563_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_9_fu_531_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_7_fu_499_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_5_fu_467_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_3_fu_435_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln265_1_fu_415_p1.read());
    } else {
        RoundKey_address1 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AddRoundKey::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AddRoundKey::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AddRoundKey::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AddRoundKey::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AddRoundKey::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void AddRoundKey::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AddRoundKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AddRoundKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AddRoundKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_grp_fu_378_p2() {
    grp_fu_378_p2 = (reg_370.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_grp_fu_385_p2() {
    grp_fu_385_p2 = (reg_374.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_or_ln265_10_fu_558_p2() {
    or_ln265_10_fu_558_p2 = (shl_ln_reg_762.read() | ap_const_lv8_B);
}

void AddRoundKey::thread_or_ln265_11_fu_580_p2() {
    or_ln265_11_fu_580_p2 = (shl_ln_reg_762.read() | ap_const_lv8_C);
}

void AddRoundKey::thread_or_ln265_12_fu_590_p2() {
    or_ln265_12_fu_590_p2 = (shl_ln_reg_762.read() | ap_const_lv8_D);
}

void AddRoundKey::thread_or_ln265_13_fu_612_p2() {
    or_ln265_13_fu_612_p2 = (shl_ln_reg_762.read() | ap_const_lv8_E);
}

void AddRoundKey::thread_or_ln265_14_fu_622_p2() {
    or_ln265_14_fu_622_p2 = (shl_ln_reg_762.read() | ap_const_lv8_F);
}

void AddRoundKey::thread_or_ln265_1_fu_420_p2() {
    or_ln265_1_fu_420_p2 = (shl_ln_reg_762.read() | ap_const_lv8_2);
}

void AddRoundKey::thread_or_ln265_2_fu_430_p2() {
    or_ln265_2_fu_430_p2 = (shl_ln_reg_762.read() | ap_const_lv8_3);
}

void AddRoundKey::thread_or_ln265_3_fu_452_p2() {
    or_ln265_3_fu_452_p2 = (shl_ln_reg_762.read() | ap_const_lv8_4);
}

void AddRoundKey::thread_or_ln265_4_fu_462_p2() {
    or_ln265_4_fu_462_p2 = (shl_ln_reg_762.read() | ap_const_lv8_5);
}

void AddRoundKey::thread_or_ln265_5_fu_484_p2() {
    or_ln265_5_fu_484_p2 = (shl_ln_reg_762.read() | ap_const_lv8_6);
}

void AddRoundKey::thread_or_ln265_6_fu_494_p2() {
    or_ln265_6_fu_494_p2 = (shl_ln_reg_762.read() | ap_const_lv8_7);
}

void AddRoundKey::thread_or_ln265_7_fu_516_p2() {
    or_ln265_7_fu_516_p2 = (shl_ln_reg_762.read() | ap_const_lv8_8);
}

void AddRoundKey::thread_or_ln265_8_fu_526_p2() {
    or_ln265_8_fu_526_p2 = (shl_ln_reg_762.read() | ap_const_lv8_9);
}

void AddRoundKey::thread_or_ln265_9_fu_548_p2() {
    or_ln265_9_fu_548_p2 = (shl_ln_reg_762.read() | ap_const_lv8_A);
}

void AddRoundKey::thread_or_ln265_fu_409_p2() {
    or_ln265_fu_409_p2 = (shl_ln_fu_396_p3.read() | ap_const_lv8_1);
}

void AddRoundKey::thread_shl_ln_fu_396_p3() {
    shl_ln_fu_396_p3 = esl_concat<4,4>(trunc_ln265_fu_392_p1.read(), ap_const_lv4_0);
}

void AddRoundKey::thread_state_addr_16_reg_637() {
    state_addr_16_reg_637 =  (sc_lv<4>) (ap_const_lv64_1);
}

void AddRoundKey::thread_state_addr_17_reg_642() {
    state_addr_17_reg_642 =  (sc_lv<4>) (ap_const_lv64_2);
}

void AddRoundKey::thread_state_addr_18_reg_647() {
    state_addr_18_reg_647 =  (sc_lv<4>) (ap_const_lv64_3);
}

void AddRoundKey::thread_state_addr_19_reg_652() {
    state_addr_19_reg_652 =  (sc_lv<4>) (ap_const_lv64_4);
}

void AddRoundKey::thread_state_addr_20_reg_657() {
    state_addr_20_reg_657 =  (sc_lv<4>) (ap_const_lv64_5);
}

void AddRoundKey::thread_state_addr_21_reg_672() {
    state_addr_21_reg_672 =  (sc_lv<4>) (ap_const_lv64_6);
}

void AddRoundKey::thread_state_addr_22_reg_677() {
    state_addr_22_reg_677 =  (sc_lv<4>) (ap_const_lv64_7);
}

void AddRoundKey::thread_state_addr_23_reg_692() {
    state_addr_23_reg_692 =  (sc_lv<4>) (ap_const_lv64_8);
}

void AddRoundKey::thread_state_addr_24_reg_697() {
    state_addr_24_reg_697 =  (sc_lv<4>) (ap_const_lv64_9);
}

void AddRoundKey::thread_state_addr_25_reg_712() {
    state_addr_25_reg_712 =  (sc_lv<4>) (ap_const_lv64_A);
}

void AddRoundKey::thread_state_addr_26_reg_717() {
    state_addr_26_reg_717 =  (sc_lv<4>) (ap_const_lv64_B);
}

void AddRoundKey::thread_state_addr_27_reg_732() {
    state_addr_27_reg_732 =  (sc_lv<4>) (ap_const_lv64_C);
}

void AddRoundKey::thread_state_addr_28_reg_737() {
    state_addr_28_reg_737 =  (sc_lv<4>) (ap_const_lv64_D);
}

void AddRoundKey::thread_state_addr_29_reg_752() {
    state_addr_29_reg_752 =  (sc_lv<4>) (ap_const_lv64_E);
}

void AddRoundKey::thread_state_addr_30_reg_757() {
    state_addr_30_reg_757 =  (sc_lv<4>) (ap_const_lv64_F);
}

void AddRoundKey::thread_state_addr_reg_632() {
    state_addr_reg_632 =  (sc_lv<4>) (ap_const_lv64_0);
}

void AddRoundKey::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address0 = state_addr_29_reg_752.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address0 = state_addr_27_reg_732.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address0 = state_addr_25_reg_712.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address0 = state_addr_23_reg_692.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address0 = state_addr_21_reg_672.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address0 = state_addr_19_reg_652.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address0 = state_addr_17_reg_642.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address0 = state_addr_reg_632.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void AddRoundKey::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_address1 = state_addr_30_reg_757.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_address1 = state_addr_28_reg_737.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_address1 = state_addr_26_reg_717.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_address1 = state_addr_24_reg_697.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_address1 = state_addr_22_reg_677.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_address1 = state_addr_20_reg_657.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_address1 = state_addr_18_reg_647.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_address1 = state_addr_16_reg_637.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void AddRoundKey::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = xor_ln265_12_fu_600_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d0 = xor_ln265_10_fu_568_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d0 = xor_ln265_8_fu_536_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d0 = xor_ln265_6_fu_504_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d0 = xor_ln265_4_fu_472_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d0 = xor_ln265_2_fu_440_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_d0 = grp_fu_378_p2.read();
    } else {
        state_d0 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = xor_ln265_13_fu_606_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = xor_ln265_11_fu_574_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d1 = xor_ln265_9_fu_542_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_d1 = xor_ln265_7_fu_510_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_d1 = xor_ln265_5_fu_478_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_d1 = xor_ln265_3_fu_446_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_d1 = grp_fu_385_p2.read();
    } else {
        state_d1 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_trunc_ln265_fu_392_p1() {
    trunc_ln265_fu_392_p1 = round.read().range(4-1, 0);
}

void AddRoundKey::thread_xor_ln265_10_fu_568_p2() {
    xor_ln265_10_fu_568_p2 = (state_load_30_reg_742.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_11_fu_574_p2() {
    xor_ln265_11_fu_574_p2 = (state_load_31_reg_747.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_xor_ln265_12_fu_600_p2() {
    xor_ln265_12_fu_600_p2 = (state_load_32_reg_790.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_13_fu_606_p2() {
    xor_ln265_13_fu_606_p2 = (state_load_33_reg_795.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_xor_ln265_2_fu_440_p2() {
    xor_ln265_2_fu_440_p2 = (state_load_22_reg_662.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_3_fu_446_p2() {
    xor_ln265_3_fu_446_p2 = (state_load_23_reg_667.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_xor_ln265_4_fu_472_p2() {
    xor_ln265_4_fu_472_p2 = (state_load_24_reg_682.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_5_fu_478_p2() {
    xor_ln265_5_fu_478_p2 = (state_load_25_reg_687.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_xor_ln265_6_fu_504_p2() {
    xor_ln265_6_fu_504_p2 = (state_load_26_reg_702.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_7_fu_510_p2() {
    xor_ln265_7_fu_510_p2 = (state_load_27_reg_707.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_xor_ln265_8_fu_536_p2() {
    xor_ln265_8_fu_536_p2 = (state_load_28_reg_722.read() ^ RoundKey_q0.read());
}

void AddRoundKey::thread_xor_ln265_9_fu_542_p2() {
    xor_ln265_9_fu_542_p2 = (state_load_29_reg_727.read() ^ RoundKey_q1.read());
}

void AddRoundKey::thread_zext_ln265_10_fu_553_p1() {
    zext_ln265_10_fu_553_p1 = esl_zext<64,8>(or_ln265_9_fu_548_p2.read());
}

void AddRoundKey::thread_zext_ln265_11_fu_563_p1() {
    zext_ln265_11_fu_563_p1 = esl_zext<64,8>(or_ln265_10_fu_558_p2.read());
}

void AddRoundKey::thread_zext_ln265_12_fu_585_p1() {
    zext_ln265_12_fu_585_p1 = esl_zext<64,8>(or_ln265_11_fu_580_p2.read());
}

void AddRoundKey::thread_zext_ln265_13_fu_595_p1() {
    zext_ln265_13_fu_595_p1 = esl_zext<64,8>(or_ln265_12_fu_590_p2.read());
}

void AddRoundKey::thread_zext_ln265_14_fu_617_p1() {
    zext_ln265_14_fu_617_p1 = esl_zext<64,8>(or_ln265_13_fu_612_p2.read());
}

void AddRoundKey::thread_zext_ln265_15_fu_627_p1() {
    zext_ln265_15_fu_627_p1 = esl_zext<64,8>(or_ln265_14_fu_622_p2.read());
}

void AddRoundKey::thread_zext_ln265_1_fu_415_p1() {
    zext_ln265_1_fu_415_p1 = esl_zext<64,8>(or_ln265_fu_409_p2.read());
}

void AddRoundKey::thread_zext_ln265_2_fu_425_p1() {
    zext_ln265_2_fu_425_p1 = esl_zext<64,8>(or_ln265_1_fu_420_p2.read());
}

void AddRoundKey::thread_zext_ln265_3_fu_435_p1() {
    zext_ln265_3_fu_435_p1 = esl_zext<64,8>(or_ln265_2_fu_430_p2.read());
}

void AddRoundKey::thread_zext_ln265_4_fu_457_p1() {
    zext_ln265_4_fu_457_p1 = esl_zext<64,8>(or_ln265_3_fu_452_p2.read());
}

void AddRoundKey::thread_zext_ln265_5_fu_467_p1() {
    zext_ln265_5_fu_467_p1 = esl_zext<64,8>(or_ln265_4_fu_462_p2.read());
}

void AddRoundKey::thread_zext_ln265_6_fu_489_p1() {
    zext_ln265_6_fu_489_p1 = esl_zext<64,8>(or_ln265_5_fu_484_p2.read());
}

void AddRoundKey::thread_zext_ln265_7_fu_499_p1() {
    zext_ln265_7_fu_499_p1 = esl_zext<64,8>(or_ln265_6_fu_494_p2.read());
}

void AddRoundKey::thread_zext_ln265_8_fu_521_p1() {
    zext_ln265_8_fu_521_p1 = esl_zext<64,8>(or_ln265_7_fu_516_p2.read());
}

void AddRoundKey::thread_zext_ln265_9_fu_531_p1() {
    zext_ln265_9_fu_531_p1 = esl_zext<64,8>(or_ln265_8_fu_526_p2.read());
}

void AddRoundKey::thread_zext_ln265_fu_404_p1() {
    zext_ln265_fu_404_p1 = esl_zext<64,8>(shl_ln_fu_396_p3.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

