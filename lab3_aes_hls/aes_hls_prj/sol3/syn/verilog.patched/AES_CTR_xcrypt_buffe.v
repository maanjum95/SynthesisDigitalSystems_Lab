// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_CTR_xcrypt_buffe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_RoundKey_address0,
        ctx_RoundKey_ce0,
        ctx_RoundKey_q0,
        ctx_RoundKey_address1,
        ctx_RoundKey_ce1,
        ctx_RoundKey_q1,
        ctx_Iv_address0,
        ctx_Iv_ce0,
        ctx_Iv_we0,
        ctx_Iv_d0,
        ctx_Iv_q0,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_we1,
        buf_r_d1,
        buf_r_q1
);

parameter    ap_ST_fsm_state1 = 105'd1;
parameter    ap_ST_fsm_state2 = 105'd2;
parameter    ap_ST_fsm_state3 = 105'd4;
parameter    ap_ST_fsm_state4 = 105'd8;
parameter    ap_ST_fsm_state5 = 105'd16;
parameter    ap_ST_fsm_state6 = 105'd32;
parameter    ap_ST_fsm_state7 = 105'd64;
parameter    ap_ST_fsm_state8 = 105'd128;
parameter    ap_ST_fsm_state9 = 105'd256;
parameter    ap_ST_fsm_state10 = 105'd512;
parameter    ap_ST_fsm_state11 = 105'd1024;
parameter    ap_ST_fsm_state12 = 105'd2048;
parameter    ap_ST_fsm_state13 = 105'd4096;
parameter    ap_ST_fsm_state14 = 105'd8192;
parameter    ap_ST_fsm_state15 = 105'd16384;
parameter    ap_ST_fsm_state16 = 105'd32768;
parameter    ap_ST_fsm_state17 = 105'd65536;
parameter    ap_ST_fsm_state18 = 105'd131072;
parameter    ap_ST_fsm_state19 = 105'd262144;
parameter    ap_ST_fsm_state20 = 105'd524288;
parameter    ap_ST_fsm_state21 = 105'd1048576;
parameter    ap_ST_fsm_state22 = 105'd2097152;
parameter    ap_ST_fsm_state23 = 105'd4194304;
parameter    ap_ST_fsm_state24 = 105'd8388608;
parameter    ap_ST_fsm_state25 = 105'd16777216;
parameter    ap_ST_fsm_state26 = 105'd33554432;
parameter    ap_ST_fsm_state27 = 105'd67108864;
parameter    ap_ST_fsm_state28 = 105'd134217728;
parameter    ap_ST_fsm_state29 = 105'd268435456;
parameter    ap_ST_fsm_state30 = 105'd536870912;
parameter    ap_ST_fsm_state31 = 105'd1073741824;
parameter    ap_ST_fsm_state32 = 105'd2147483648;
parameter    ap_ST_fsm_state33 = 105'd4294967296;
parameter    ap_ST_fsm_state34 = 105'd8589934592;
parameter    ap_ST_fsm_state35 = 105'd17179869184;
parameter    ap_ST_fsm_state36 = 105'd34359738368;
parameter    ap_ST_fsm_state37 = 105'd68719476736;
parameter    ap_ST_fsm_state38 = 105'd137438953472;
parameter    ap_ST_fsm_state39 = 105'd274877906944;
parameter    ap_ST_fsm_state40 = 105'd549755813888;
parameter    ap_ST_fsm_state41 = 105'd1099511627776;
parameter    ap_ST_fsm_state42 = 105'd2199023255552;
parameter    ap_ST_fsm_state43 = 105'd4398046511104;
parameter    ap_ST_fsm_state44 = 105'd8796093022208;
parameter    ap_ST_fsm_state45 = 105'd17592186044416;
parameter    ap_ST_fsm_state46 = 105'd35184372088832;
parameter    ap_ST_fsm_state47 = 105'd70368744177664;
parameter    ap_ST_fsm_state48 = 105'd140737488355328;
parameter    ap_ST_fsm_state49 = 105'd281474976710656;
parameter    ap_ST_fsm_state50 = 105'd562949953421312;
parameter    ap_ST_fsm_state51 = 105'd1125899906842624;
parameter    ap_ST_fsm_state52 = 105'd2251799813685248;
parameter    ap_ST_fsm_state53 = 105'd4503599627370496;
parameter    ap_ST_fsm_state54 = 105'd9007199254740992;
parameter    ap_ST_fsm_state55 = 105'd18014398509481984;
parameter    ap_ST_fsm_state56 = 105'd36028797018963968;
parameter    ap_ST_fsm_state57 = 105'd72057594037927936;
parameter    ap_ST_fsm_state58 = 105'd144115188075855872;
parameter    ap_ST_fsm_state59 = 105'd288230376151711744;
parameter    ap_ST_fsm_state60 = 105'd576460752303423488;
parameter    ap_ST_fsm_state61 = 105'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 105'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 105'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 105'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 105'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 105'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 105'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 105'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 105'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 105'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 105'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 105'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 105'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 105'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 105'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 105'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 105'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 105'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 105'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 105'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 105'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 105'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 105'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 105'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 105'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 105'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 105'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 105'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 105'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 105'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 105'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 105'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 105'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 105'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 105'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 105'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 105'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 105'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 105'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 105'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 105'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 105'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 105'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 105'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 105'd20282409603651670423947251286016;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] ctx_RoundKey_address0;
output   ctx_RoundKey_ce0;
input  [7:0] ctx_RoundKey_q0;
output  [7:0] ctx_RoundKey_address1;
output   ctx_RoundKey_ce1;
input  [7:0] ctx_RoundKey_q1;
output  [3:0] ctx_Iv_address0;
output   ctx_Iv_ce0;
output   ctx_Iv_we0;
output  [7:0] ctx_Iv_d0;
input  [7:0] ctx_Iv_q0;
output  [3:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
output  [3:0] buf_r_address1;
output   buf_r_ce1;
output   buf_r_we1;
output  [7:0] buf_r_d1;
input  [7:0] buf_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ctx_RoundKey_ce0;
reg ctx_RoundKey_ce1;
reg[3:0] ctx_Iv_address0;
reg ctx_Iv_ce0;
reg ctx_Iv_we0;
reg[7:0] ctx_Iv_d0;
reg[3:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_we0;
reg[7:0] buf_r_d0;
reg[3:0] buf_r_address1;
reg buf_r_ce1;
reg buf_r_we1;
reg[7:0] buf_r_d1;

(* fsm_encoding = "none" *) reg   [104:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_587;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state98;
reg   [7:0] reg_591;
wire   [4:0] add_ln568_fu_601_p2;
reg   [4:0] add_ln568_reg_902;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln568_fu_607_p1;
reg   [63:0] zext_ln568_reg_907;
wire   [0:0] icmp_ln568_fu_595_p2;
wire   [5:0] zext_ln474_fu_620_p1;
reg   [5:0] zext_ln474_reg_917;
wire    ap_CS_fsm_state4;
wire   [2:0] i_fu_630_p2;
reg   [2:0] i_reg_925;
wire   [3:0] shl_ln_fu_640_p3;
reg   [3:0] shl_ln_reg_930;
wire   [0:0] icmp_ln474_fu_624_p2;
reg   [3:0] x_addr_reg_935;
wire    ap_CS_fsm_state5;
wire   [2:0] k_fu_672_p2;
reg   [2:0] k_reg_943;
wire   [0:0] icmp_ln475_fu_666_p2;
wire   [5:0] zext_ln482_fu_696_p1;
reg   [5:0] zext_ln482_reg_953;
wire    ap_CS_fsm_state86;
wire   [2:0] i_3_fu_706_p2;
reg   [2:0] i_3_reg_961;
wire   [3:0] shl_ln2_fu_716_p3;
reg   [3:0] shl_ln2_reg_966;
wire   [0:0] icmp_ln482_fu_700_p2;
wire    ap_CS_fsm_state87;
wire   [2:0] k_2_fu_748_p2;
reg   [2:0] k_2_reg_979;
wire   [3:0] add_ln484_fu_754_p2;
reg   [3:0] add_ln484_reg_984;
wire   [0:0] icmp_ln483_fu_742_p2;
wire   [0:0] tmp_5_fu_767_p3;
reg   [0:0] tmp_5_reg_989;
wire    ap_CS_fsm_state89;
reg   [3:0] ctx_Iv_addr_1_reg_993;
wire   [4:0] add_ln577_fu_786_p2;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln579_fu_780_p2;
wire   [3:0] buf_addr_reg_1006;
wire   [3:0] buf_addr_1_reg_1011;
wire   [3:0] buf_addr_2_reg_1016;
wire   [3:0] buf_addr_3_reg_1021;
reg   [7:0] buf_load_2_reg_1026;
wire    ap_CS_fsm_state92;
reg   [7:0] buf_load_3_reg_1031;
wire   [3:0] buf_addr_4_reg_1036;
wire   [3:0] buf_addr_5_reg_1041;
reg   [7:0] buf_load_4_reg_1046;
wire    ap_CS_fsm_state93;
reg   [7:0] buf_load_5_reg_1051;
wire   [3:0] buf_addr_6_reg_1056;
wire   [3:0] buf_addr_7_reg_1061;
reg   [7:0] buf_load_6_reg_1066;
wire    ap_CS_fsm_state94;
reg   [7:0] buf_load_7_reg_1071;
wire   [3:0] buf_addr_8_reg_1076;
wire   [3:0] buf_addr_9_reg_1081;
reg   [7:0] buf_load_8_reg_1086;
wire    ap_CS_fsm_state95;
reg   [7:0] buf_load_9_reg_1091;
wire   [3:0] buf_addr_10_reg_1096;
wire   [3:0] buf_addr_11_reg_1101;
reg   [7:0] buf_load_10_reg_1106;
wire    ap_CS_fsm_state96;
reg   [7:0] buf_load_11_reg_1111;
wire   [3:0] buf_addr_12_reg_1116;
wire   [3:0] buf_addr_13_reg_1121;
wire    ap_CS_fsm_state97;
reg   [7:0] buf_load_12_reg_1136;
reg   [7:0] buf_load_13_reg_1141;
wire   [3:0] buf_addr_14_reg_1146;
wire   [3:0] buf_addr_15_reg_1151;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state104;
reg   [3:0] buffer_address0;
reg    buffer_ce0;
reg    buffer_we0;
reg   [7:0] buffer_d0;
wire   [7:0] buffer_q0;
reg   [3:0] buffer_address1;
reg    buffer_ce1;
wire   [7:0] buffer_q1;
reg   [3:0] x_address0;
reg    x_ce0;
reg    x_we0;
reg   [7:0] x_d0;
wire   [7:0] x_q0;
reg   [3:0] x_address1;
reg    x_ce1;
reg    x_we1;
reg   [7:0] x_d1;
wire   [7:0] x_q1;
wire    grp_AddRoundKey_fu_551_ap_start;
wire    grp_AddRoundKey_fu_551_ap_done;
wire    grp_AddRoundKey_fu_551_ap_idle;
wire    grp_AddRoundKey_fu_551_ap_ready;
reg   [4:0] grp_AddRoundKey_fu_551_round;
wire   [3:0] grp_AddRoundKey_fu_551_state_address0;
wire    grp_AddRoundKey_fu_551_state_ce0;
wire    grp_AddRoundKey_fu_551_state_we0;
wire   [7:0] grp_AddRoundKey_fu_551_state_d0;
wire   [3:0] grp_AddRoundKey_fu_551_state_address1;
wire    grp_AddRoundKey_fu_551_state_ce1;
wire    grp_AddRoundKey_fu_551_state_we1;
wire   [7:0] grp_AddRoundKey_fu_551_state_d1;
wire   [7:0] grp_AddRoundKey_fu_551_RoundKey_address0;
wire    grp_AddRoundKey_fu_551_RoundKey_ce0;
wire   [7:0] grp_AddRoundKey_fu_551_RoundKey_address1;
wire    grp_AddRoundKey_fu_551_RoundKey_ce1;
wire    grp_SubBytes_fu_570_ap_start;
wire    grp_SubBytes_fu_570_ap_done;
wire    grp_SubBytes_fu_570_ap_idle;
wire    grp_SubBytes_fu_570_ap_ready;
wire   [3:0] grp_SubBytes_fu_570_state_address0;
wire    grp_SubBytes_fu_570_state_ce0;
wire    grp_SubBytes_fu_570_state_we0;
wire   [7:0] grp_SubBytes_fu_570_state_d0;
wire   [3:0] grp_SubBytes_fu_570_state_address1;
wire    grp_SubBytes_fu_570_state_ce1;
wire    grp_SubBytes_fu_570_state_we1;
wire   [7:0] grp_SubBytes_fu_570_state_d1;
wire    grp_ShiftRows_fu_577_ap_start;
wire    grp_ShiftRows_fu_577_ap_done;
wire    grp_ShiftRows_fu_577_ap_idle;
wire    grp_ShiftRows_fu_577_ap_ready;
wire   [3:0] grp_ShiftRows_fu_577_state_address0;
wire    grp_ShiftRows_fu_577_state_ce0;
wire    grp_ShiftRows_fu_577_state_we0;
wire   [7:0] grp_ShiftRows_fu_577_state_d0;
wire   [3:0] grp_ShiftRows_fu_577_state_address1;
wire    grp_ShiftRows_fu_577_state_ce1;
wire    grp_ShiftRows_fu_577_state_we1;
wire   [7:0] grp_ShiftRows_fu_577_state_d1;
wire    grp_MixColumns_fu_582_ap_start;
wire    grp_MixColumns_fu_582_ap_done;
wire    grp_MixColumns_fu_582_ap_idle;
wire    grp_MixColumns_fu_582_ap_ready;
wire   [3:0] grp_MixColumns_fu_582_state_address0;
wire    grp_MixColumns_fu_582_state_ce0;
wire    grp_MixColumns_fu_582_state_we0;
wire   [7:0] grp_MixColumns_fu_582_state_d0;
wire   [3:0] grp_MixColumns_fu_582_state_address1;
wire    grp_MixColumns_fu_582_state_ce1;
wire    grp_MixColumns_fu_582_state_we1;
wire   [7:0] grp_MixColumns_fu_582_state_d1;
reg   [4:0] k_0_0_reg_484;
wire    ap_CS_fsm_state3;
reg   [2:0] i_0_i_reg_495;
reg   [2:0] k_0_i_reg_506;
wire    ap_CS_fsm_state6;
reg   [2:0] i_0_i1_reg_517;
wire    ap_CS_fsm_state85;
reg   [2:0] k_0_i3_reg_528;
wire    ap_CS_fsm_state88;
reg  signed [4:0] bi_1_0_reg_539;
reg    grp_AddRoundKey_fu_551_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state79;
reg    grp_SubBytes_fu_570_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state81;
reg    grp_ShiftRows_fu_577_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state83;
reg    grp_MixColumns_fu_582_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state77;
wire   [63:0] zext_ln476_2_fu_661_p1;
wire   [63:0] zext_ln476_fu_683_p1;
wire   [63:0] zext_ln484_2_fu_737_p1;
wire   [63:0] zext_ln484_fu_759_p1;
wire   [63:0] zext_ln579_fu_775_p1;
wire   [7:0] add_ln583_fu_792_p2;
wire   [7:0] xor_ln589_fu_799_p2;
wire   [7:0] xor_ln589_1_fu_806_p2;
wire   [7:0] xor_ln589_2_fu_813_p2;
wire   [7:0] xor_ln589_3_fu_819_p2;
wire   [7:0] xor_ln589_4_fu_825_p2;
wire   [7:0] xor_ln589_5_fu_831_p2;
wire   [7:0] xor_ln589_6_fu_837_p2;
wire   [7:0] xor_ln589_7_fu_843_p2;
wire   [7:0] xor_ln589_8_fu_849_p2;
wire   [7:0] xor_ln589_9_fu_855_p2;
wire   [7:0] xor_ln589_10_fu_861_p2;
wire   [7:0] xor_ln589_11_fu_867_p2;
wire   [7:0] xor_ln589_12_fu_873_p2;
wire   [7:0] xor_ln589_13_fu_879_p2;
wire    ap_CS_fsm_state105;
wire   [7:0] xor_ln589_14_fu_885_p2;
wire   [7:0] xor_ln589_15_fu_892_p2;
wire   [4:0] tmp_s_fu_612_p3;
wire   [1:0] trunc_ln476_fu_636_p1;
wire   [5:0] zext_ln476_1_fu_652_p1;
wire   [5:0] add_ln476_1_fu_656_p2;
wire   [3:0] zext_ln475_fu_648_p1;
wire   [3:0] add_ln476_fu_678_p2;
wire   [4:0] tmp_1_fu_688_p3;
wire   [1:0] trunc_ln484_fu_712_p1;
wire   [5:0] zext_ln484_1_fu_728_p1;
wire   [5:0] add_ln484_1_fu_732_p2;
wire   [3:0] zext_ln483_fu_724_p1;
wire  signed [31:0] sext_ln577_fu_763_p1;
reg   [104:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 105'd1;
#0 grp_AddRoundKey_fu_551_ap_start_reg = 1'b0;
#0 grp_SubBytes_fu_570_ap_start_reg = 1'b0;
#0 grp_ShiftRows_fu_577_ap_start_reg = 1'b0;
#0 grp_MixColumns_fu_582_ap_start_reg = 1'b0;
end

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_address0),
    .ce0(buffer_ce0),
    .we0(buffer_we0),
    .d0(buffer_d0),
    .q0(buffer_q0),
    .address1(buffer_address1),
    .ce1(buffer_ce1),
    .q1(buffer_q1)
);

AES_CTR_xcrypt_buffe_x #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_address0),
    .ce0(x_ce0),
    .we0(x_we0),
    .d0(x_d0),
    .q0(x_q0),
    .address1(x_address1),
    .ce1(x_ce1),
    .we1(x_we1),
    .d1(x_d1),
    .q1(x_q1)
);

AddRoundKey grp_AddRoundKey_fu_551(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_551_ap_start),
    .ap_done(grp_AddRoundKey_fu_551_ap_done),
    .ap_idle(grp_AddRoundKey_fu_551_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_551_ap_ready),
    .round(grp_AddRoundKey_fu_551_round),
    .state_address0(grp_AddRoundKey_fu_551_state_address0),
    .state_ce0(grp_AddRoundKey_fu_551_state_ce0),
    .state_we0(grp_AddRoundKey_fu_551_state_we0),
    .state_d0(grp_AddRoundKey_fu_551_state_d0),
    .state_q0(x_q0),
    .state_address1(grp_AddRoundKey_fu_551_state_address1),
    .state_ce1(grp_AddRoundKey_fu_551_state_ce1),
    .state_we1(grp_AddRoundKey_fu_551_state_we1),
    .state_d1(grp_AddRoundKey_fu_551_state_d1),
    .state_q1(x_q1),
    .RoundKey_address0(grp_AddRoundKey_fu_551_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_551_RoundKey_ce0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_AddRoundKey_fu_551_RoundKey_address1),
    .RoundKey_ce1(grp_AddRoundKey_fu_551_RoundKey_ce1),
    .RoundKey_q1(ctx_RoundKey_q1)
);

SubBytes grp_SubBytes_fu_570(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_570_ap_start),
    .ap_done(grp_SubBytes_fu_570_ap_done),
    .ap_idle(grp_SubBytes_fu_570_ap_idle),
    .ap_ready(grp_SubBytes_fu_570_ap_ready),
    .state_address0(grp_SubBytes_fu_570_state_address0),
    .state_ce0(grp_SubBytes_fu_570_state_ce0),
    .state_we0(grp_SubBytes_fu_570_state_we0),
    .state_d0(grp_SubBytes_fu_570_state_d0),
    .state_q0(x_q0),
    .state_address1(grp_SubBytes_fu_570_state_address1),
    .state_ce1(grp_SubBytes_fu_570_state_ce1),
    .state_we1(grp_SubBytes_fu_570_state_we1),
    .state_d1(grp_SubBytes_fu_570_state_d1),
    .state_q1(x_q1)
);

ShiftRows grp_ShiftRows_fu_577(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ShiftRows_fu_577_ap_start),
    .ap_done(grp_ShiftRows_fu_577_ap_done),
    .ap_idle(grp_ShiftRows_fu_577_ap_idle),
    .ap_ready(grp_ShiftRows_fu_577_ap_ready),
    .state_address0(grp_ShiftRows_fu_577_state_address0),
    .state_ce0(grp_ShiftRows_fu_577_state_ce0),
    .state_we0(grp_ShiftRows_fu_577_state_we0),
    .state_d0(grp_ShiftRows_fu_577_state_d0),
    .state_q0(x_q0),
    .state_address1(grp_ShiftRows_fu_577_state_address1),
    .state_ce1(grp_ShiftRows_fu_577_state_ce1),
    .state_we1(grp_ShiftRows_fu_577_state_we1),
    .state_d1(grp_ShiftRows_fu_577_state_d1),
    .state_q1(x_q1)
);

MixColumns grp_MixColumns_fu_582(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MixColumns_fu_582_ap_start),
    .ap_done(grp_MixColumns_fu_582_ap_done),
    .ap_idle(grp_MixColumns_fu_582_ap_idle),
    .ap_ready(grp_MixColumns_fu_582_ap_ready),
    .state_address0(grp_MixColumns_fu_582_state_address0),
    .state_ce0(grp_MixColumns_fu_582_state_ce0),
    .state_we0(grp_MixColumns_fu_582_state_we0),
    .state_d0(grp_MixColumns_fu_582_state_d0),
    .state_q0(x_q0),
    .state_address1(grp_MixColumns_fu_582_state_address1),
    .state_ce1(grp_MixColumns_fu_582_state_ce1),
    .state_we1(grp_MixColumns_fu_582_state_we1),
    .state_d1(grp_MixColumns_fu_582_state_d1),
    .state_q1(x_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_551_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln474_fu_624_p2 == 1'd1)))) begin
            grp_AddRoundKey_fu_551_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_551_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_551_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MixColumns_fu_582_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
            grp_MixColumns_fu_582_ap_start_reg <= 1'b1;
        end else if ((grp_MixColumns_fu_582_ap_ready == 1'b1)) begin
            grp_MixColumns_fu_582_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ShiftRows_fu_577_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
            grp_ShiftRows_fu_577_ap_start_reg <= 1'b1;
        end else if ((grp_ShiftRows_fu_577_ap_ready == 1'b1)) begin
            grp_ShiftRows_fu_577_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SubBytes_fu_570_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
            grp_SubBytes_fu_570_ap_start_reg <= 1'b1;
        end else if ((grp_SubBytes_fu_570_ap_ready == 1'b1)) begin
            grp_SubBytes_fu_570_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln482_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        bi_1_0_reg_539 <= 5'd15;
    end else if (((icmp_ln579_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90) & (tmp_5_reg_989 == 1'd0))) begin
        bi_1_0_reg_539 <= add_ln577_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln483_fu_742_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
        i_0_i1_reg_517 <= i_3_reg_961;
    end else if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
        i_0_i1_reg_517 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln568_fu_595_p2 == 1'd1))) begin
        i_0_i_reg_495 <= 3'd0;
    end else if (((icmp_ln475_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_reg_495 <= i_reg_925;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_0_reg_484 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_0_reg_484 <= add_ln568_reg_902;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        k_0_i3_reg_528 <= k_2_reg_979;
    end else if (((1'b1 == ap_CS_fsm_state86) & (icmp_ln482_fu_700_p2 == 1'd0))) begin
        k_0_i3_reg_528 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_i_reg_506 <= k_reg_943;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln474_fu_624_p2 == 1'd0))) begin
        k_0_i_reg_506 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) & (icmp_ln483_fu_742_p2 == 1'd0))) begin
        add_ln484_reg_984 <= add_ln484_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln568_reg_902 <= add_ln568_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        buf_load_10_reg_1106 <= buf_r_q0;
        buf_load_11_reg_1111 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        buf_load_12_reg_1136 <= buf_r_q0;
        buf_load_13_reg_1141 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        buf_load_2_reg_1026 <= buf_r_q0;
        buf_load_3_reg_1031 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        buf_load_4_reg_1046 <= buf_r_q0;
        buf_load_5_reg_1051 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        buf_load_6_reg_1066 <= buf_r_q0;
        buf_load_7_reg_1071 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        buf_load_8_reg_1086 <= buf_r_q0;
        buf_load_9_reg_1091 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (tmp_5_fu_767_p3 == 1'd0))) begin
        ctx_Iv_addr_1_reg_993 <= zext_ln579_fu_775_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        i_3_reg_961 <= i_3_fu_706_p2;
        zext_ln482_reg_953[4 : 2] <= zext_ln482_fu_696_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_925 <= i_fu_630_p2;
        zext_ln474_reg_917[4 : 2] <= zext_ln474_fu_620_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        k_2_reg_979 <= k_2_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_943 <= k_fu_672_p2;
        x_addr_reg_935 <= zext_ln476_2_fu_661_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state91))) begin
        reg_587 <= buf_r_q0;
        reg_591 <= buf_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) & (icmp_ln482_fu_700_p2 == 1'd0))) begin
        shl_ln2_reg_966[3 : 2] <= shl_ln2_fu_716_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln474_fu_624_p2 == 1'd0))) begin
        shl_ln_reg_930[3 : 2] <= shl_ln_fu_640_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        tmp_5_reg_989 <= bi_1_0_reg_539[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln568_fu_595_p2 == 1'd0))) begin
        zext_ln568_reg_907[4 : 0] <= zext_ln568_fu_607_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state105) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        buf_r_address0 = buf_addr_14_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        buf_r_address0 = buf_addr_12_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buf_r_address0 = buf_addr_10_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buf_r_address0 = buf_addr_8_reg_1076;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buf_r_address0 = buf_addr_6_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buf_r_address0 = buf_addr_4_reg_1036;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buf_r_address0 = buf_addr_2_reg_1016;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buf_r_address0 = buf_addr_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        buf_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        buf_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        buf_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        buf_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        buf_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        buf_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        buf_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        buf_r_address0 = 64'd0;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        buf_r_address1 = buf_addr_15_reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        buf_r_address1 = buf_addr_13_reg_1121;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buf_r_address1 = buf_addr_11_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buf_r_address1 = buf_addr_9_reg_1081;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buf_r_address1 = buf_addr_7_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buf_r_address1 = buf_addr_5_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buf_r_address1 = buf_addr_3_reg_1021;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buf_r_address1 = buf_addr_1_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        buf_r_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        buf_r_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        buf_r_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        buf_r_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        buf_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        buf_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        buf_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        buf_r_address1 = 64'd1;
    end else begin
        buf_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state105))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state105))) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        buf_r_d0 = xor_ln589_14_fu_885_p2;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        buf_r_d0 = xor_ln589_12_fu_873_p2;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buf_r_d0 = xor_ln589_10_fu_861_p2;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buf_r_d0 = xor_ln589_8_fu_849_p2;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buf_r_d0 = xor_ln589_6_fu_837_p2;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buf_r_d0 = xor_ln589_4_fu_825_p2;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buf_r_d0 = xor_ln589_2_fu_813_p2;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buf_r_d0 = xor_ln589_fu_799_p2;
    end else begin
        buf_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        buf_r_d1 = xor_ln589_15_fu_892_p2;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        buf_r_d1 = xor_ln589_13_fu_879_p2;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buf_r_d1 = xor_ln589_11_fu_867_p2;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buf_r_d1 = xor_ln589_9_fu_855_p2;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buf_r_d1 = xor_ln589_7_fu_843_p2;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buf_r_d1 = xor_ln589_5_fu_831_p2;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buf_r_d1 = xor_ln589_3_fu_819_p2;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buf_r_d1 = xor_ln589_1_fu_806_p2;
    end else begin
        buf_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state105))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state105))) begin
        buf_r_we1 = 1'b1;
    end else begin
        buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        buffer_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buffer_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buffer_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buffer_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buffer_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buffer_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buffer_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        buffer_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        buffer_address0 = zext_ln484_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_address0 = zext_ln476_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_address0 = zext_ln568_reg_907;
    end else begin
        buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        buffer_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        buffer_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        buffer_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        buffer_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        buffer_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        buffer_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        buffer_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        buffer_address1 = 64'd1;
    end else begin
        buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state98))) begin
        buffer_ce0 = 1'b1;
    end else begin
        buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state98))) begin
        buffer_ce1 = 1'b1;
    end else begin
        buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        buffer_d0 = x_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_d0 = ctx_Iv_q0;
    end else begin
        buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state3))) begin
        buffer_we0 = 1'b1;
    end else begin
        buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state90) & (icmp_ln579_fu_780_p2 == 1'd0) & (tmp_5_reg_989 == 1'd0)) | ((icmp_ln579_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90) & (tmp_5_reg_989 == 1'd0)))) begin
        ctx_Iv_address0 = ctx_Iv_addr_1_reg_993;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        ctx_Iv_address0 = zext_ln579_fu_775_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_Iv_address0 = zext_ln568_fu_607_p1;
    end else begin
        ctx_Iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state90) & (icmp_ln579_fu_780_p2 == 1'd0) & (tmp_5_reg_989 == 1'd0)) | ((icmp_ln579_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90) & (tmp_5_reg_989 == 1'd0)))) begin
        ctx_Iv_ce0 = 1'b1;
    end else begin
        ctx_Iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) & (tmp_5_reg_989 == 1'd0))) begin
        if ((icmp_ln579_fu_780_p2 == 1'd0)) begin
            ctx_Iv_d0 = add_ln583_fu_792_p2;
        end else if ((icmp_ln579_fu_780_p2 == 1'd1)) begin
            ctx_Iv_d0 = 8'd0;
        end else begin
            ctx_Iv_d0 = 'bx;
        end
    end else begin
        ctx_Iv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state90) & (icmp_ln579_fu_780_p2 == 1'd0) & (tmp_5_reg_989 == 1'd0)) | ((icmp_ln579_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state90) & (tmp_5_reg_989 == 1'd0)))) begin
        ctx_Iv_we0 = 1'b1;
    end else begin
        ctx_Iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        ctx_RoundKey_ce0 = grp_AddRoundKey_fu_551_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        ctx_RoundKey_ce1 = grp_AddRoundKey_fu_551_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_AddRoundKey_fu_551_round = 5'd10;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_AddRoundKey_fu_551_round = 5'd9;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_AddRoundKey_fu_551_round = 5'd8;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_AddRoundKey_fu_551_round = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_AddRoundKey_fu_551_round = 5'd6;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_AddRoundKey_fu_551_round = 5'd5;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_AddRoundKey_fu_551_round = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_AddRoundKey_fu_551_round = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_AddRoundKey_fu_551_round = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_AddRoundKey_fu_551_round = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_AddRoundKey_fu_551_round = 5'd0;
    end else begin
        grp_AddRoundKey_fu_551_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        x_address0 = zext_ln484_2_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = x_addr_reg_935;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_address0 = grp_MixColumns_fu_582_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_address0 = grp_ShiftRows_fu_577_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_address0 = grp_SubBytes_fu_570_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_address0 = grp_AddRoundKey_fu_551_state_address0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_address1 = grp_MixColumns_fu_582_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_address1 = grp_ShiftRows_fu_577_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_address1 = grp_SubBytes_fu_570_state_address1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_address1 = grp_AddRoundKey_fu_551_state_address1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state87))) begin
        x_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_ce0 = grp_MixColumns_fu_582_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_ce0 = grp_ShiftRows_fu_577_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_ce0 = grp_SubBytes_fu_570_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_ce0 = grp_AddRoundKey_fu_551_state_ce0;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_ce1 = grp_MixColumns_fu_582_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_ce1 = grp_ShiftRows_fu_577_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_ce1 = grp_SubBytes_fu_570_state_ce1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_ce1 = grp_AddRoundKey_fu_551_state_ce1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_d0 = buffer_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_d0 = grp_MixColumns_fu_582_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_d0 = grp_ShiftRows_fu_577_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_d0 = grp_SubBytes_fu_570_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_d0 = grp_AddRoundKey_fu_551_state_d0;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_d1 = grp_MixColumns_fu_582_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_d1 = grp_ShiftRows_fu_577_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_d1 = grp_SubBytes_fu_570_state_d1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_d1 = grp_AddRoundKey_fu_551_state_d1;
    end else begin
        x_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_we0 = grp_MixColumns_fu_582_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_we0 = grp_ShiftRows_fu_577_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_we0 = grp_SubBytes_fu_570_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_we0 = grp_AddRoundKey_fu_551_state_we0;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
        x_we1 = grp_MixColumns_fu_582_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11))) begin
        x_we1 = grp_ShiftRows_fu_577_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        x_we1 = grp_SubBytes_fu_570_state_we1;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state85))) begin
        x_we1 = grp_AddRoundKey_fu_551_state_we1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln568_fu_595_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln474_fu_624_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln475_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((grp_MixColumns_fu_582_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((grp_SubBytes_fu_570_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((grp_ShiftRows_fu_577_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((grp_AddRoundKey_fu_551_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln482_fu_700_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((icmp_ln483_fu_742_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & ((tmp_5_reg_989 == 1'd1) | (icmp_ln579_fu_780_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln476_1_fu_656_p2 = (zext_ln474_reg_917 + zext_ln476_1_fu_652_p1);

assign add_ln476_fu_678_p2 = (zext_ln475_fu_648_p1 + shl_ln_reg_930);

assign add_ln484_1_fu_732_p2 = (zext_ln482_reg_953 + zext_ln484_1_fu_728_p1);

assign add_ln484_fu_754_p2 = (zext_ln483_fu_724_p1 + shl_ln2_reg_966);

assign add_ln568_fu_601_p2 = (k_0_0_reg_484 + 5'd1);

assign add_ln577_fu_786_p2 = ($signed(bi_1_0_reg_539) + $signed(5'd31));

assign add_ln583_fu_792_p2 = (ctx_Iv_q0 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign buf_addr_10_reg_1096 = 64'd10;

assign buf_addr_11_reg_1101 = 64'd11;

assign buf_addr_12_reg_1116 = 64'd12;

assign buf_addr_13_reg_1121 = 64'd13;

assign buf_addr_14_reg_1146 = 64'd14;

assign buf_addr_15_reg_1151 = 64'd15;

assign buf_addr_1_reg_1011 = 64'd1;

assign buf_addr_2_reg_1016 = 64'd2;

assign buf_addr_3_reg_1021 = 64'd3;

assign buf_addr_4_reg_1036 = 64'd4;

assign buf_addr_5_reg_1041 = 64'd5;

assign buf_addr_6_reg_1056 = 64'd6;

assign buf_addr_7_reg_1061 = 64'd7;

assign buf_addr_8_reg_1076 = 64'd8;

assign buf_addr_9_reg_1081 = 64'd9;

assign buf_addr_reg_1006 = 64'd0;

assign ctx_RoundKey_address0 = grp_AddRoundKey_fu_551_RoundKey_address0;

assign ctx_RoundKey_address1 = grp_AddRoundKey_fu_551_RoundKey_address1;

assign grp_AddRoundKey_fu_551_ap_start = grp_AddRoundKey_fu_551_ap_start_reg;

assign grp_MixColumns_fu_582_ap_start = grp_MixColumns_fu_582_ap_start_reg;

assign grp_ShiftRows_fu_577_ap_start = grp_ShiftRows_fu_577_ap_start_reg;

assign grp_SubBytes_fu_570_ap_start = grp_SubBytes_fu_570_ap_start_reg;

assign i_3_fu_706_p2 = (i_0_i1_reg_517 + 3'd1);

assign i_fu_630_p2 = (i_0_i_reg_495 + 3'd1);

assign icmp_ln474_fu_624_p2 = ((i_0_i_reg_495 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln475_fu_666_p2 = ((k_0_i_reg_506 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln482_fu_700_p2 = ((i_0_i1_reg_517 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln483_fu_742_p2 = ((k_0_i3_reg_528 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln568_fu_595_p2 = ((k_0_0_reg_484 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln579_fu_780_p2 = ((ctx_Iv_q0 == 8'd255) ? 1'b1 : 1'b0);

assign k_2_fu_748_p2 = (k_0_i3_reg_528 + 3'd1);

assign k_fu_672_p2 = (k_0_i_reg_506 + 3'd1);

assign sext_ln577_fu_763_p1 = bi_1_0_reg_539;

assign shl_ln2_fu_716_p3 = {{trunc_ln484_fu_712_p1}, {2'd0}};

assign shl_ln_fu_640_p3 = {{trunc_ln476_fu_636_p1}, {2'd0}};

assign tmp_1_fu_688_p3 = {{i_0_i1_reg_517}, {2'd0}};

assign tmp_5_fu_767_p3 = bi_1_0_reg_539[32'd4];

assign tmp_s_fu_612_p3 = {{i_0_i_reg_495}, {2'd0}};

assign trunc_ln476_fu_636_p1 = i_0_i_reg_495[1:0];

assign trunc_ln484_fu_712_p1 = i_0_i1_reg_517[1:0];

assign xor_ln589_10_fu_861_p2 = (buffer_q1 ^ buf_load_10_reg_1106);

assign xor_ln589_11_fu_867_p2 = (buffer_q0 ^ buf_load_11_reg_1111);

assign xor_ln589_12_fu_873_p2 = (buffer_q1 ^ buf_load_12_reg_1136);

assign xor_ln589_13_fu_879_p2 = (buffer_q0 ^ buf_load_13_reg_1141);

assign xor_ln589_14_fu_885_p2 = (reg_587 ^ buffer_q1);

assign xor_ln589_15_fu_892_p2 = (reg_591 ^ buffer_q0);

assign xor_ln589_1_fu_806_p2 = (reg_591 ^ buffer_q1);

assign xor_ln589_2_fu_813_p2 = (buffer_q1 ^ buf_load_2_reg_1026);

assign xor_ln589_3_fu_819_p2 = (buffer_q0 ^ buf_load_3_reg_1031);

assign xor_ln589_4_fu_825_p2 = (buffer_q1 ^ buf_load_4_reg_1046);

assign xor_ln589_5_fu_831_p2 = (buffer_q0 ^ buf_load_5_reg_1051);

assign xor_ln589_6_fu_837_p2 = (buffer_q1 ^ buf_load_6_reg_1066);

assign xor_ln589_7_fu_843_p2 = (buffer_q0 ^ buf_load_7_reg_1071);

assign xor_ln589_8_fu_849_p2 = (buffer_q1 ^ buf_load_8_reg_1086);

assign xor_ln589_9_fu_855_p2 = (buffer_q0 ^ buf_load_9_reg_1091);

assign xor_ln589_fu_799_p2 = (reg_587 ^ buffer_q0);

assign zext_ln474_fu_620_p1 = tmp_s_fu_612_p3;

assign zext_ln475_fu_648_p1 = k_0_i_reg_506;

assign zext_ln476_1_fu_652_p1 = k_0_i_reg_506;

assign zext_ln476_2_fu_661_p1 = add_ln476_1_fu_656_p2;

assign zext_ln476_fu_683_p1 = add_ln476_fu_678_p2;

assign zext_ln482_fu_696_p1 = tmp_1_fu_688_p3;

assign zext_ln483_fu_724_p1 = k_0_i3_reg_528;

assign zext_ln484_1_fu_728_p1 = k_0_i3_reg_528;

assign zext_ln484_2_fu_737_p1 = add_ln484_1_fu_732_p2;

assign zext_ln484_fu_759_p1 = add_ln484_reg_984;

assign zext_ln568_fu_607_p1 = k_0_0_reg_484;

assign zext_ln579_fu_775_p1 = $unsigned(sext_ln577_fu_763_p1);

always @ (posedge ap_clk) begin
    zext_ln568_reg_907[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln474_reg_917[1:0] <= 2'b00;
    zext_ln474_reg_917[5] <= 1'b0;
    shl_ln_reg_930[1:0] <= 2'b00;
    zext_ln482_reg_953[1:0] <= 2'b00;
    zext_ln482_reg_953[5] <= 1'b0;
    shl_ln2_reg_966[1:0] <= 2'b00;
end

endmodule //AES_CTR_xcrypt_buffe
