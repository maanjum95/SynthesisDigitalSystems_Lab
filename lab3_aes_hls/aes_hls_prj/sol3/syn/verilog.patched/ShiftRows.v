// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ShiftRows (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_145;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_152;
wire    ap_CS_fsm_state3;
wire   [3:0] state_addr_reg_159;
wire   [3:0] state_addr_1_reg_164;
wire   [3:0] state_addr_2_reg_169;
wire   [3:0] state_addr_3_reg_174;
reg   [7:0] temp_reg_179;
wire   [3:0] state_addr_4_reg_184;
wire   [3:0] state_addr_5_reg_189;
reg   [7:0] state_load_2_reg_194;
wire   [3:0] state_addr_6_reg_199;
wire    ap_CS_fsm_state4;
wire   [3:0] state_addr_7_reg_204;
reg   [7:0] temp_1_reg_209;
reg   [7:0] state_load_4_reg_214;
wire   [3:0] state_addr_8_reg_219;
wire    ap_CS_fsm_state5;
wire   [3:0] state_addr_9_reg_224;
reg   [7:0] temp_2_reg_229;
reg   [7:0] state_load_6_reg_234;
wire   [3:0] state_addr_10_reg_239;
wire    ap_CS_fsm_state6;
wire   [3:0] state_addr_11_reg_244;
reg   [7:0] temp_3_reg_249;
reg   [7:0] state_load_8_reg_254;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_145 <= state_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_145 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_152 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_152 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_load_2_reg_194 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_load_4_reg_214 <= state_q1;
        temp_1_reg_209 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_load_6_reg_234 <= state_q1;
        temp_2_reg_229 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_load_8_reg_254 <= state_q1;
        temp_3_reg_249 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_reg_179 <= state_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address0 = state_addr_10_reg_239;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = state_addr_8_reg_219;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address0 = state_addr_6_reg_199;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address0 = state_addr_4_reg_184;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address0 = state_addr_2_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = state_addr_reg_159;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address0 = 64'd1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_address1 = state_addr_11_reg_244;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = state_addr_9_reg_224;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_address1 = state_addr_7_reg_204;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_address1 = state_addr_5_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_address1 = state_addr_3_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = state_addr_1_reg_164;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_address1 = 64'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = reg_152;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = state_load_8_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d0 = state_load_6_reg_234;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d0 = state_load_4_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d0 = state_load_2_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = reg_145;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = temp_3_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = reg_145;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_d1 = temp_2_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_d1 = temp_1_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_d1 = temp_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d1 = reg_152;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign state_addr_10_reg_239 = 64'd11;

assign state_addr_11_reg_244 = 64'd7;

assign state_addr_1_reg_164 = 64'd5;

assign state_addr_2_reg_169 = 64'd9;

assign state_addr_3_reg_174 = 64'd13;

assign state_addr_4_reg_184 = 64'd2;

assign state_addr_5_reg_189 = 64'd10;

assign state_addr_6_reg_199 = 64'd6;

assign state_addr_7_reg_204 = 64'd14;

assign state_addr_8_reg_219 = 64'd3;

assign state_addr_9_reg_224 = 64'd15;

assign state_addr_reg_159 = 64'd1;

endmodule //ShiftRows
