-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_88_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_98_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln263_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln264_fu_114_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln264_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_124_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_198 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln264_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_60 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_71 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln265_1_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_3_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln265_fu_94_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_106_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln265_fu_130_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln265_fu_134_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln265_1_fu_139_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln265_2_fu_151_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln265_2_fu_155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_60 <= i_reg_180;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_60 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln263_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_71 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_71 <= j_reg_198;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_180 <= i_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_198 <= j_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln263_fu_82_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_185(3 downto 2) <= shl_ln_fu_98_p3(3 downto 2);
                    zext_ln264_reg_190(4 downto 2) <= zext_ln264_fu_114_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_addr_reg_208 <= zext_ln265_3_fu_160_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln_reg_185(1 downto 0) <= "00";
    zext_ln264_reg_190(1 downto 0) <= "00";
    zext_ln264_reg_190(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln263_fu_82_p2, ap_CS_fsm_state3, icmp_ln264_fu_118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln263_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln264_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    RoundKey_address0 <= zext_ln265_1_fu_146_p1(8 - 1 downto 0);

    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln265_1_fu_139_p3 <= (round & add_ln265_fu_134_p2);
    add_ln265_2_fu_155_p2 <= std_logic_vector(unsigned(zext_ln264_reg_190) + unsigned(zext_ln265_2_fu_151_p1));
    add_ln265_fu_134_p2 <= std_logic_vector(unsigned(zext_ln265_fu_130_p1) + unsigned(shl_ln_reg_185));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln263_fu_82_p2)
    begin
        if ((((icmp_ln263_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln263_fu_82_p2)
    begin
        if (((icmp_ln263_fu_82_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_88_p2 <= std_logic_vector(unsigned(i_0_reg_60) + unsigned(ap_const_lv3_1));
    icmp_ln263_fu_82_p2 <= "1" when (i_0_reg_60 = ap_const_lv3_4) else "0";
    icmp_ln264_fu_118_p2 <= "1" when (j_0_reg_71 = ap_const_lv3_4) else "0";
    j_fu_124_p2 <= std_logic_vector(unsigned(j_0_reg_71) + unsigned(ap_const_lv3_1));
    shl_ln_fu_98_p3 <= (trunc_ln265_fu_94_p1 & ap_const_lv2_0);

    state_address0_assign_proc : process(ap_CS_fsm_state3, state_addr_reg_208, ap_CS_fsm_state4, zext_ln265_3_fu_160_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= state_addr_reg_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= zext_ln265_3_fu_160_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= (state_q0 xor RoundKey_q0);

    state_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_106_p3 <= (i_0_reg_60 & ap_const_lv2_0);
    trunc_ln265_fu_94_p1 <= i_0_reg_60(2 - 1 downto 0);
    zext_ln264_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_106_p3),6));
    zext_ln265_1_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_1_fu_139_p3),64));
    zext_ln265_2_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_71),6));
    zext_ln265_3_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_2_fu_155_p2),64));
    zext_ln265_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_71),4));
end behav;
