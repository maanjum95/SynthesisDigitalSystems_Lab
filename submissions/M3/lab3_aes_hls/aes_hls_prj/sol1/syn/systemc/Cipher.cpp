// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<25> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<25> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<25> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<25> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<25> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<25> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> Cipher::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> Cipher::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> Cipher::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_13 = "10011";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_14 = "10100";
const sc_lv<8> Cipher::ap_const_lv8_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_16 = "10110";
const sc_lv<3> Cipher::ap_const_lv3_0 = "000";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_15 = "10101";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<32> Cipher::ap_const_lv32_17 = "10111";
const sc_lv<8> Cipher::ap_const_lv8_0 = "00000000";
const sc_lv<8> Cipher::ap_const_lv8_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_18 = "11000";
const sc_lv<64> Cipher::ap_const_lv64_1 = "1";
const sc_lv<64> Cipher::ap_const_lv64_5 = "101";
const sc_lv<64> Cipher::ap_const_lv64_9 = "1001";
const sc_lv<64> Cipher::ap_const_lv64_D = "1101";
const sc_lv<64> Cipher::ap_const_lv64_2 = "10";
const sc_lv<64> Cipher::ap_const_lv64_A = "1010";
const sc_lv<64> Cipher::ap_const_lv64_6 = "110";
const sc_lv<64> Cipher::ap_const_lv64_E = "1110";
const sc_lv<64> Cipher::ap_const_lv64_3 = "11";
const sc_lv<64> Cipher::ap_const_lv64_F = "1111";
const sc_lv<64> Cipher::ap_const_lv64_B = "1011";
const sc_lv<64> Cipher::ap_const_lv64_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<3> Cipher::ap_const_lv3_4 = "100";
const sc_lv<3> Cipher::ap_const_lv3_1 = "1";
const sc_lv<2> Cipher::ap_const_lv2_0 = "00";
const sc_lv<5> Cipher::ap_const_lv5_1 = "1";
const sc_lv<59> Cipher::ap_const_lv59_0 = "00000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> Cipher::ap_const_lv5_2 = "10";
const sc_lv<5> Cipher::ap_const_lv5_3 = "11";
const sc_lv<8> Cipher::ap_const_lv8_1B = "11011";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new Cipher_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    grp_AddRoundKey_fu_274 = new AddRoundKey("grp_AddRoundKey_fu_274");
    grp_AddRoundKey_fu_274->ap_clk(ap_clk);
    grp_AddRoundKey_fu_274->ap_rst(ap_rst);
    grp_AddRoundKey_fu_274->ap_start(grp_AddRoundKey_fu_274_ap_start);
    grp_AddRoundKey_fu_274->ap_done(grp_AddRoundKey_fu_274_ap_done);
    grp_AddRoundKey_fu_274->ap_idle(grp_AddRoundKey_fu_274_ap_idle);
    grp_AddRoundKey_fu_274->ap_ready(grp_AddRoundKey_fu_274_ap_ready);
    grp_AddRoundKey_fu_274->round(grp_AddRoundKey_fu_274_round);
    grp_AddRoundKey_fu_274->state_address0(grp_AddRoundKey_fu_274_state_address0);
    grp_AddRoundKey_fu_274->state_ce0(grp_AddRoundKey_fu_274_state_ce0);
    grp_AddRoundKey_fu_274->state_we0(grp_AddRoundKey_fu_274_state_we0);
    grp_AddRoundKey_fu_274->state_d0(grp_AddRoundKey_fu_274_state_d0);
    grp_AddRoundKey_fu_274->state_q0(state_q0);
    grp_AddRoundKey_fu_274->RoundKey_address0(grp_AddRoundKey_fu_274_RoundKey_address0);
    grp_AddRoundKey_fu_274->RoundKey_ce0(grp_AddRoundKey_fu_274_RoundKey_ce0);
    grp_AddRoundKey_fu_274->RoundKey_q0(RoundKey_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_274_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_274_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_Tm_1_fu_499_p2);
    sensitive << ( state_q0 );
    sensitive << ( reg_291 );

    SC_METHOD(thread_Tm_2_fu_546_p2);
    sensitive << ( state_q0 );
    sensitive << ( state_q1 );

    SC_METHOD(thread_Tm_3_fu_592_p2);
    sensitive << ( state_q1 );
    sensitive << ( reg_286 );

    SC_METHOD(thread_Tm_fu_440_p2);
    sensitive << ( reg_286 );
    sensitive << ( reg_291 );

    SC_METHOD(thread_Tmp_fu_452_p2);
    sensitive << ( state_q1 );
    sensitive << ( xor_ln319_1_fu_446_p2 );

    SC_METHOD(thread_add_ln276_fu_345_p2);
    sensitive << ( zext_ln275_reg_700 );
    sensitive << ( zext_ln276_fu_341_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_AddRoundKey_fu_274_ap_done );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_AddRoundKey_fu_274_ap_done );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_AddRoundKey_fu_274_ap_start);
    sensitive << ( grp_AddRoundKey_fu_274_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_274_round);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( round_0_reg_229 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_i_4_fu_372_p2);
    sensitive << ( i_0_i3_reg_263 );

    SC_METHOD(thread_i_fu_311_p2);
    sensitive << ( i_0_i_reg_241 );

    SC_METHOD(thread_icmp_ln274_fu_305_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_0_i_reg_241 );

    SC_METHOD(thread_icmp_ln275_fu_321_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( j_0_i_reg_252 );

    SC_METHOD(thread_icmp_ln317_fu_366_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( i_0_i3_reg_263 );

    SC_METHOD(thread_icmp_ln435_fu_360_p2);
    sensitive << ( round_0_reg_229 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_j_fu_327_p2);
    sensitive << ( j_0_i_reg_252 );

    SC_METHOD(thread_or_ln319_1_fu_412_p2);
    sensitive << ( tmp_6_reg_770 );

    SC_METHOD(thread_or_ln319_2_fu_426_p2);
    sensitive << ( tmp_6_reg_770 );

    SC_METHOD(thread_or_ln319_fu_391_p2);
    sensitive << ( tmp_6_fu_378_p3 );

    SC_METHOD(thread_round_fu_406_p2);
    sensitive << ( round_0_reg_229 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln276_2_fu_355_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_select_ln311_1_fu_519_p3);
    sensitive << ( tmp_2_fu_511_p3 );

    SC_METHOD(thread_select_ln311_2_fu_566_p3);
    sensitive << ( tmp_3_fu_558_p3 );

    SC_METHOD(thread_select_ln311_3_fu_612_p3);
    sensitive << ( tmp_4_fu_604_p3 );

    SC_METHOD(thread_select_ln311_fu_472_p3);
    sensitive << ( tmp_1_fu_464_p3 );

    SC_METHOD(thread_shl_ln311_1_fu_505_p2);
    sensitive << ( Tm_1_fu_499_p2 );

    SC_METHOD(thread_shl_ln311_2_fu_552_p2);
    sensitive << ( Tm_2_fu_546_p2 );

    SC_METHOD(thread_shl_ln311_3_fu_598_p2);
    sensitive << ( Tm_3_fu_592_p2 );

    SC_METHOD(thread_shl_ln311_fu_458_p2);
    sensitive << ( Tm_fu_440_p2 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln317_fu_366_p2 );
    sensitive << ( state_addr_13_reg_776 );
    sensitive << ( state_addr_15_reg_791 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_274_state_address0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( zext_ln276_1_fu_350_p1 );
    sensitive << ( zext_ln318_fu_386_p1 );
    sensitive << ( tmp_8_fu_417_p3 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_12_reg_713 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln317_fu_366_p2 );
    sensitive << ( state_addr_14_reg_781 );
    sensitive << ( state_addr_16_reg_796 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_7_fu_397_p3 );
    sensitive << ( tmp_9_fu_431_p3 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln317_fu_366_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_274_state_ce0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln317_fu_366_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_state_d0);
    sensitive << ( reg_291 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_298 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( state_load_2_reg_724 );
    sensitive << ( state_load_4_reg_734 );
    sensitive << ( state_load_6_reg_744 );
    sensitive << ( state_load_8_reg_754 );
    sensitive << ( xor_ln328_1_reg_801 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_274_state_d0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( xor_ln322_1_fu_492_p2 );

    SC_METHOD(thread_state_d1);
    sensitive << ( sbox_q0 );
    sensitive << ( reg_286 );
    sensitive << ( reg_291 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_298 );
    sensitive << ( temp_1_reg_729 );
    sensitive << ( temp_2_reg_739 );
    sensitive << ( temp_3_reg_749 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( xor_ln331_reg_806 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( xor_ln325_1_fu_539_p2 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_274_state_we0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_tmp_1_fu_464_p3);
    sensitive << ( Tm_fu_440_p2 );

    SC_METHOD(thread_tmp_2_fu_511_p3);
    sensitive << ( Tm_1_fu_499_p2 );

    SC_METHOD(thread_tmp_3_fu_558_p3);
    sensitive << ( Tm_2_fu_546_p2 );

    SC_METHOD(thread_tmp_4_fu_604_p3);
    sensitive << ( Tm_3_fu_592_p2 );

    SC_METHOD(thread_tmp_6_fu_378_p3);
    sensitive << ( i_0_i3_reg_263 );

    SC_METHOD(thread_tmp_7_fu_397_p3);
    sensitive << ( or_ln319_fu_391_p2 );

    SC_METHOD(thread_tmp_8_fu_417_p3);
    sensitive << ( or_ln319_1_fu_412_p2 );

    SC_METHOD(thread_tmp_9_fu_431_p3);
    sensitive << ( or_ln319_2_fu_426_p2 );

    SC_METHOD(thread_tmp_fu_333_p3);
    sensitive << ( j_0_i_reg_252 );

    SC_METHOD(thread_xor_ln319_1_fu_446_p2);
    sensitive << ( state_q0 );
    sensitive << ( Tm_fu_440_p2 );

    SC_METHOD(thread_xor_ln322_1_fu_492_p2);
    sensitive << ( xor_ln322_2_fu_486_p2 );
    sensitive << ( xor_ln322_fu_480_p2 );

    SC_METHOD(thread_xor_ln322_2_fu_486_p2);
    sensitive << ( shl_ln311_fu_458_p2 );
    sensitive << ( Tmp_fu_452_p2 );

    SC_METHOD(thread_xor_ln322_fu_480_p2);
    sensitive << ( reg_286 );
    sensitive << ( select_ln311_fu_472_p3 );

    SC_METHOD(thread_xor_ln325_1_fu_539_p2);
    sensitive << ( xor_ln325_2_fu_533_p2 );
    sensitive << ( xor_ln325_fu_527_p2 );

    SC_METHOD(thread_xor_ln325_2_fu_533_p2);
    sensitive << ( Tmp_fu_452_p2 );
    sensitive << ( shl_ln311_1_fu_505_p2 );

    SC_METHOD(thread_xor_ln325_fu_527_p2);
    sensitive << ( reg_291 );
    sensitive << ( select_ln311_1_fu_519_p3 );

    SC_METHOD(thread_xor_ln328_1_fu_586_p2);
    sensitive << ( xor_ln328_2_fu_580_p2 );
    sensitive << ( xor_ln328_fu_574_p2 );

    SC_METHOD(thread_xor_ln328_2_fu_580_p2);
    sensitive << ( Tmp_fu_452_p2 );
    sensitive << ( shl_ln311_2_fu_552_p2 );

    SC_METHOD(thread_xor_ln328_fu_574_p2);
    sensitive << ( state_q0 );
    sensitive << ( select_ln311_2_fu_566_p3 );

    SC_METHOD(thread_xor_ln331_1_fu_620_p2);
    sensitive << ( xor_ln319_1_fu_446_p2 );
    sensitive << ( shl_ln311_3_fu_598_p2 );

    SC_METHOD(thread_xor_ln331_fu_626_p2);
    sensitive << ( xor_ln331_1_fu_620_p2 );
    sensitive << ( select_ln311_3_fu_612_p3 );

    SC_METHOD(thread_zext_ln275_fu_317_p1);
    sensitive << ( i_0_i_reg_241 );

    SC_METHOD(thread_zext_ln276_1_fu_350_p1);
    sensitive << ( add_ln276_fu_345_p2 );

    SC_METHOD(thread_zext_ln276_2_fu_355_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_zext_ln276_fu_341_p1);
    sensitive << ( tmp_fu_333_p3 );

    SC_METHOD(thread_zext_ln318_fu_386_p1);
    sensitive << ( tmp_6_fu_378_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_AddRoundKey_fu_274_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln274_fu_305_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln275_fu_321_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( icmp_ln317_fu_366_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( icmp_ln435_fu_360_p2 );
    sensitive << ( ap_CS_fsm_state25 );

    ap_CS_fsm = "0000000000000000000000001";
    grp_AddRoundKey_fu_274_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, reg_286, "reg_286");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, reg_291, "reg_291");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, reg_298, "reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_ap_ready, "grp_AddRoundKey_fu_274_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_ap_done, "grp_AddRoundKey_fu_274_ap_done");
    sc_trace(mVcdFile, i_fu_311_p2, "i_fu_311_p2");
    sc_trace(mVcdFile, i_reg_695, "i_reg_695");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln275_fu_317_p1, "zext_ln275_fu_317_p1");
    sc_trace(mVcdFile, zext_ln275_reg_700, "zext_ln275_reg_700");
    sc_trace(mVcdFile, icmp_ln274_fu_305_p2, "icmp_ln274_fu_305_p2");
    sc_trace(mVcdFile, j_fu_327_p2, "j_fu_327_p2");
    sc_trace(mVcdFile, j_reg_708, "j_reg_708");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, state_addr_12_reg_713, "state_addr_12_reg_713");
    sc_trace(mVcdFile, icmp_ln275_fu_321_p2, "icmp_ln275_fu_321_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, state_load_2_reg_724, "state_load_2_reg_724");
    sc_trace(mVcdFile, temp_1_reg_729, "temp_1_reg_729");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, state_load_4_reg_734, "state_load_4_reg_734");
    sc_trace(mVcdFile, temp_2_reg_739, "temp_2_reg_739");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, state_load_6_reg_744, "state_load_6_reg_744");
    sc_trace(mVcdFile, temp_3_reg_749, "temp_3_reg_749");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, state_load_8_reg_754, "state_load_8_reg_754");
    sc_trace(mVcdFile, i_4_fu_372_p2, "i_4_fu_372_p2");
    sc_trace(mVcdFile, i_4_reg_765, "i_4_reg_765");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_6_fu_378_p3, "tmp_6_fu_378_p3");
    sc_trace(mVcdFile, tmp_6_reg_770, "tmp_6_reg_770");
    sc_trace(mVcdFile, icmp_ln317_fu_366_p2, "icmp_ln317_fu_366_p2");
    sc_trace(mVcdFile, state_addr_13_reg_776, "state_addr_13_reg_776");
    sc_trace(mVcdFile, state_addr_14_reg_781, "state_addr_14_reg_781");
    sc_trace(mVcdFile, round_fu_406_p2, "round_fu_406_p2");
    sc_trace(mVcdFile, round_reg_786, "round_reg_786");
    sc_trace(mVcdFile, state_addr_15_reg_791, "state_addr_15_reg_791");
    sc_trace(mVcdFile, state_addr_16_reg_796, "state_addr_16_reg_796");
    sc_trace(mVcdFile, xor_ln328_1_fu_586_p2, "xor_ln328_1_fu_586_p2");
    sc_trace(mVcdFile, xor_ln328_1_reg_801, "xor_ln328_1_reg_801");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, xor_ln331_fu_626_p2, "xor_ln331_fu_626_p2");
    sc_trace(mVcdFile, xor_ln331_reg_806, "xor_ln331_reg_806");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_ap_start, "grp_AddRoundKey_fu_274_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_ap_idle, "grp_AddRoundKey_fu_274_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_round, "grp_AddRoundKey_fu_274_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_state_address0, "grp_AddRoundKey_fu_274_state_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_state_ce0, "grp_AddRoundKey_fu_274_state_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_state_we0, "grp_AddRoundKey_fu_274_state_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_state_d0, "grp_AddRoundKey_fu_274_state_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_RoundKey_address0, "grp_AddRoundKey_fu_274_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_RoundKey_ce0, "grp_AddRoundKey_fu_274_RoundKey_ce0");
    sc_trace(mVcdFile, round_0_reg_229, "round_0_reg_229");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, i_0_i_reg_241, "i_0_i_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_0_i_reg_252, "j_0_i_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_0_i3_reg_263, "i_0_i3_reg_263");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, icmp_ln435_fu_360_p2, "icmp_ln435_fu_360_p2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_274_ap_start_reg, "grp_AddRoundKey_fu_274_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, zext_ln276_1_fu_350_p1, "zext_ln276_1_fu_350_p1");
    sc_trace(mVcdFile, zext_ln276_2_fu_355_p1, "zext_ln276_2_fu_355_p1");
    sc_trace(mVcdFile, zext_ln318_fu_386_p1, "zext_ln318_fu_386_p1");
    sc_trace(mVcdFile, tmp_7_fu_397_p3, "tmp_7_fu_397_p3");
    sc_trace(mVcdFile, tmp_8_fu_417_p3, "tmp_8_fu_417_p3");
    sc_trace(mVcdFile, tmp_9_fu_431_p3, "tmp_9_fu_431_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, xor_ln322_1_fu_492_p2, "xor_ln322_1_fu_492_p2");
    sc_trace(mVcdFile, xor_ln325_1_fu_539_p2, "xor_ln325_1_fu_539_p2");
    sc_trace(mVcdFile, tmp_fu_333_p3, "tmp_fu_333_p3");
    sc_trace(mVcdFile, zext_ln276_fu_341_p1, "zext_ln276_fu_341_p1");
    sc_trace(mVcdFile, add_ln276_fu_345_p2, "add_ln276_fu_345_p2");
    sc_trace(mVcdFile, or_ln319_fu_391_p2, "or_ln319_fu_391_p2");
    sc_trace(mVcdFile, or_ln319_1_fu_412_p2, "or_ln319_1_fu_412_p2");
    sc_trace(mVcdFile, or_ln319_2_fu_426_p2, "or_ln319_2_fu_426_p2");
    sc_trace(mVcdFile, Tm_fu_440_p2, "Tm_fu_440_p2");
    sc_trace(mVcdFile, xor_ln319_1_fu_446_p2, "xor_ln319_1_fu_446_p2");
    sc_trace(mVcdFile, tmp_1_fu_464_p3, "tmp_1_fu_464_p3");
    sc_trace(mVcdFile, select_ln311_fu_472_p3, "select_ln311_fu_472_p3");
    sc_trace(mVcdFile, shl_ln311_fu_458_p2, "shl_ln311_fu_458_p2");
    sc_trace(mVcdFile, Tmp_fu_452_p2, "Tmp_fu_452_p2");
    sc_trace(mVcdFile, xor_ln322_2_fu_486_p2, "xor_ln322_2_fu_486_p2");
    sc_trace(mVcdFile, xor_ln322_fu_480_p2, "xor_ln322_fu_480_p2");
    sc_trace(mVcdFile, Tm_1_fu_499_p2, "Tm_1_fu_499_p2");
    sc_trace(mVcdFile, tmp_2_fu_511_p3, "tmp_2_fu_511_p3");
    sc_trace(mVcdFile, select_ln311_1_fu_519_p3, "select_ln311_1_fu_519_p3");
    sc_trace(mVcdFile, shl_ln311_1_fu_505_p2, "shl_ln311_1_fu_505_p2");
    sc_trace(mVcdFile, xor_ln325_2_fu_533_p2, "xor_ln325_2_fu_533_p2");
    sc_trace(mVcdFile, xor_ln325_fu_527_p2, "xor_ln325_fu_527_p2");
    sc_trace(mVcdFile, Tm_2_fu_546_p2, "Tm_2_fu_546_p2");
    sc_trace(mVcdFile, tmp_3_fu_558_p3, "tmp_3_fu_558_p3");
    sc_trace(mVcdFile, select_ln311_2_fu_566_p3, "select_ln311_2_fu_566_p3");
    sc_trace(mVcdFile, shl_ln311_2_fu_552_p2, "shl_ln311_2_fu_552_p2");
    sc_trace(mVcdFile, xor_ln328_2_fu_580_p2, "xor_ln328_2_fu_580_p2");
    sc_trace(mVcdFile, xor_ln328_fu_574_p2, "xor_ln328_fu_574_p2");
    sc_trace(mVcdFile, Tm_3_fu_592_p2, "Tm_3_fu_592_p2");
    sc_trace(mVcdFile, tmp_4_fu_604_p3, "tmp_4_fu_604_p3");
    sc_trace(mVcdFile, shl_ln311_3_fu_598_p2, "shl_ln311_3_fu_598_p2");
    sc_trace(mVcdFile, xor_ln331_1_fu_620_p2, "xor_ln331_1_fu_620_p2");
    sc_trace(mVcdFile, select_ln311_3_fu_612_p3, "select_ln311_3_fu_612_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete grp_AddRoundKey_fu_274;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_274_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(icmp_ln317_fu_366_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
            grp_AddRoundKey_fu_274_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_274_ap_ready.read())) {
            grp_AddRoundKey_fu_274_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln435_fu_360_p2.read()))) {
        i_0_i3_reg_263 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_0_i3_reg_263 = i_4_reg_765.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln275_fu_321_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_241 = i_reg_695.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_i_reg_241 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln274_fu_305_p2.read(), ap_const_lv1_0))) {
        j_0_i_reg_252 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_i_reg_252 = j_reg_708.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        reg_291 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        reg_291 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        reg_298 = state_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        reg_298 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            round_0_reg_229 = round_reg_786.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            round_0_reg_229 = ap_const_lv8_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_4_reg_765 = i_4_fu_372_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_695 = i_fu_311_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_708 = j_fu_327_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        reg_286 = state_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(icmp_ln317_fu_366_p2.read(), ap_const_lv1_1))) {
        round_reg_786 = round_fu_406_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln275_fu_321_p2.read()))) {
        state_addr_12_reg_713 =  (sc_lv<4>) (zext_ln276_1_fu_350_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_366_p2.read()))) {
        state_addr_13_reg_776 =  (sc_lv<4>) (zext_ln318_fu_386_p1.read());
        state_addr_14_reg_781 =  (sc_lv<4>) (tmp_7_fu_397_p3.read());
        tmp_6_reg_770 = tmp_6_fu_378_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_addr_15_reg_791 =  (sc_lv<4>) (tmp_8_fu_417_p3.read());
        state_addr_16_reg_796 =  (sc_lv<4>) (tmp_9_fu_431_p3.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        state_load_2_reg_724 = state_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        state_load_4_reg_734 = state_q1.read();
        temp_1_reg_729 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        state_load_6_reg_744 = state_q1.read();
        temp_2_reg_739 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        state_load_8_reg_754 = state_q1.read();
        temp_3_reg_749 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        xor_ln328_1_reg_801 = xor_ln328_1_fu_586_p2.read();
        xor_ln331_reg_806 = xor_ln331_fu_626_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln274_fu_305_p2.read(), ap_const_lv1_0))) {
        zext_ln275_reg_700 = zext_ln275_fu_317_p1.read();
    }
}

void Cipher::thread_RoundKey_address0() {
    RoundKey_address0 = grp_AddRoundKey_fu_274_RoundKey_address0.read();
}

void Cipher::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        RoundKey_ce0 = grp_AddRoundKey_fu_274_RoundKey_ce0.read();
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_Tm_1_fu_499_p2() {
    Tm_1_fu_499_p2 = (state_q0.read() ^ reg_291.read());
}

void Cipher::thread_Tm_2_fu_546_p2() {
    Tm_2_fu_546_p2 = (state_q1.read() ^ state_q0.read());
}

void Cipher::thread_Tm_3_fu_592_p2() {
    Tm_3_fu_592_p2 = (state_q1.read() ^ reg_286.read());
}

void Cipher::thread_Tm_fu_440_p2() {
    Tm_fu_440_p2 = (reg_291.read() ^ reg_286.read());
}

void Cipher::thread_Tmp_fu_452_p2() {
    Tmp_fu_452_p2 = (state_q1.read() ^ xor_ln319_1_fu_446_p2.read());
}

void Cipher::thread_add_ln276_fu_345_p2() {
    add_ln276_fu_345_p2 = (!zext_ln275_reg_700.read().is_01() || !zext_ln276_fu_341_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln275_reg_700.read()) + sc_biguint<6>(zext_ln276_fu_341_p1.read()));
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Cipher::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Cipher::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Cipher::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Cipher::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Cipher::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_grp_AddRoundKey_fu_274_ap_start() {
    grp_AddRoundKey_fu_274_ap_start = grp_AddRoundKey_fu_274_ap_start_reg.read();
}

void Cipher::thread_grp_AddRoundKey_fu_274_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        grp_AddRoundKey_fu_274_round = ap_const_lv8_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_AddRoundKey_fu_274_round = round_0_reg_229.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_AddRoundKey_fu_274_round = ap_const_lv8_0;
    } else {
        grp_AddRoundKey_fu_274_round = "XXXXXXXX";
    }
}

void Cipher::thread_i_4_fu_372_p2() {
    i_4_fu_372_p2 = (!i_0_i3_reg_263.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i3_reg_263.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_i_fu_311_p2() {
    i_fu_311_p2 = (!i_0_i_reg_241.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i_reg_241.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_icmp_ln274_fu_305_p2() {
    icmp_ln274_fu_305_p2 = (!i_0_i_reg_241.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_241.read() == ap_const_lv3_4);
}

void Cipher::thread_icmp_ln275_fu_321_p2() {
    icmp_ln275_fu_321_p2 = (!j_0_i_reg_252.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_reg_252.read() == ap_const_lv3_4);
}

void Cipher::thread_icmp_ln317_fu_366_p2() {
    icmp_ln317_fu_366_p2 = (!i_0_i3_reg_263.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i3_reg_263.read() == ap_const_lv3_4);
}

void Cipher::thread_icmp_ln435_fu_360_p2() {
    icmp_ln435_fu_360_p2 = (!round_0_reg_229.read().is_01() || !ap_const_lv8_A.is_01())? sc_lv<1>(): sc_lv<1>(round_0_reg_229.read() == ap_const_lv8_A);
}

void Cipher::thread_j_fu_327_p2() {
    j_fu_327_p2 = (!j_0_i_reg_252.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_i_reg_252.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_or_ln319_1_fu_412_p2() {
    or_ln319_1_fu_412_p2 = (tmp_6_reg_770.read() | ap_const_lv5_2);
}

void Cipher::thread_or_ln319_2_fu_426_p2() {
    or_ln319_2_fu_426_p2 = (tmp_6_reg_770.read() | ap_const_lv5_3);
}

void Cipher::thread_or_ln319_fu_391_p2() {
    or_ln319_fu_391_p2 = (tmp_6_fu_378_p3.read() | ap_const_lv5_1);
}

void Cipher::thread_round_fu_406_p2() {
    round_fu_406_p2 = (!round_0_reg_229.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(round_0_reg_229.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void Cipher::thread_sbox_address0() {
    sbox_address0 =  (sc_lv<8>) (zext_ln276_2_fu_355_p1.read());
}

void Cipher::thread_sbox_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_select_ln311_1_fu_519_p3() {
    select_ln311_1_fu_519_p3 = (!tmp_2_fu_511_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_2_fu_511_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln311_2_fu_566_p3() {
    select_ln311_2_fu_566_p3 = (!tmp_3_fu_558_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_3_fu_558_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln311_3_fu_612_p3() {
    select_ln311_3_fu_612_p3 = (!tmp_4_fu_604_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_4_fu_604_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_select_ln311_fu_472_p3() {
    select_ln311_fu_472_p3 = (!tmp_1_fu_464_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_1_fu_464_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_shl_ln311_1_fu_505_p2() {
    shl_ln311_1_fu_505_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_1_fu_499_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln311_2_fu_552_p2() {
    shl_ln311_2_fu_552_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_2_fu_546_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln311_3_fu_598_p2() {
    shl_ln311_3_fu_598_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_3_fu_592_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_shl_ln311_fu_458_p2() {
    shl_ln311_fu_458_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_fu_440_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_address0 = state_addr_15_reg_791.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address0 = state_addr_13_reg_776.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_address0 =  (sc_lv<4>) (tmp_8_fu_417_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_366_p2.read()))) {
        state_address0 =  (sc_lv<4>) (zext_ln318_fu_386_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_address0 =  (sc_lv<4>) (zext_ln276_1_fu_350_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address0 = grp_AddRoundKey_fu_274_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_address1 = state_addr_16_reg_796.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address1 = state_addr_14_reg_781.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        state_address1 =  (sc_lv<4>) (tmp_9_fu_431_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_366_p2.read()))) {
        state_address1 =  (sc_lv<4>) (tmp_7_fu_397_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_address1 = state_addr_12_reg_713.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_366_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_ce0 = grp_AddRoundKey_fu_274_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln317_fu_366_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_d0 = xor_ln328_1_reg_801.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_d0 = xor_ln322_1_fu_492_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d0 = reg_298.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_d0 = state_load_8_reg_754.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d0 = state_load_6_reg_744.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d0 = state_load_4_reg_734.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d0 = state_load_2_reg_724.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d0 = reg_291.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_d0 = grp_AddRoundKey_fu_274_state_d0.read();
    } else {
        state_d0 = "XXXXXXXX";
    }
}

void Cipher::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_d1 = xor_ln331_reg_806.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_d1 = xor_ln325_1_fu_539_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d1 = temp_3_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        state_d1 = reg_291.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d1 = temp_2_reg_739.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = temp_1_reg_729.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = reg_286.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        state_d1 = reg_298.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_d1 = sbox_q0.read();
    } else {
        state_d1 = "XXXXXXXX";
    }
}

void Cipher::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_we0 = grp_AddRoundKey_fu_274_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_tmp_1_fu_464_p3() {
    tmp_1_fu_464_p3 = Tm_fu_440_p2.read().range(7, 7);
}

void Cipher::thread_tmp_2_fu_511_p3() {
    tmp_2_fu_511_p3 = Tm_1_fu_499_p2.read().range(7, 7);
}

void Cipher::thread_tmp_3_fu_558_p3() {
    tmp_3_fu_558_p3 = Tm_2_fu_546_p2.read().range(7, 7);
}

void Cipher::thread_tmp_4_fu_604_p3() {
    tmp_4_fu_604_p3 = Tm_3_fu_592_p2.read().range(7, 7);
}

void Cipher::thread_tmp_6_fu_378_p3() {
    tmp_6_fu_378_p3 = esl_concat<3,2>(i_0_i3_reg_263.read(), ap_const_lv2_0);
}

void Cipher::thread_tmp_7_fu_397_p3() {
    tmp_7_fu_397_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln319_fu_391_p2.read());
}

void Cipher::thread_tmp_8_fu_417_p3() {
    tmp_8_fu_417_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln319_1_fu_412_p2.read());
}

void Cipher::thread_tmp_9_fu_431_p3() {
    tmp_9_fu_431_p3 = esl_concat<59,5>(ap_const_lv59_0, or_ln319_2_fu_426_p2.read());
}

void Cipher::thread_tmp_fu_333_p3() {
    tmp_fu_333_p3 = esl_concat<3,2>(j_0_i_reg_252.read(), ap_const_lv2_0);
}

void Cipher::thread_xor_ln319_1_fu_446_p2() {
    xor_ln319_1_fu_446_p2 = (state_q0.read() ^ Tm_fu_440_p2.read());
}

void Cipher::thread_xor_ln322_1_fu_492_p2() {
    xor_ln322_1_fu_492_p2 = (xor_ln322_2_fu_486_p2.read() ^ xor_ln322_fu_480_p2.read());
}

void Cipher::thread_xor_ln322_2_fu_486_p2() {
    xor_ln322_2_fu_486_p2 = (shl_ln311_fu_458_p2.read() ^ Tmp_fu_452_p2.read());
}

void Cipher::thread_xor_ln322_fu_480_p2() {
    xor_ln322_fu_480_p2 = (reg_286.read() ^ select_ln311_fu_472_p3.read());
}

void Cipher::thread_xor_ln325_1_fu_539_p2() {
    xor_ln325_1_fu_539_p2 = (xor_ln325_2_fu_533_p2.read() ^ xor_ln325_fu_527_p2.read());
}

void Cipher::thread_xor_ln325_2_fu_533_p2() {
    xor_ln325_2_fu_533_p2 = (shl_ln311_1_fu_505_p2.read() ^ Tmp_fu_452_p2.read());
}

void Cipher::thread_xor_ln325_fu_527_p2() {
    xor_ln325_fu_527_p2 = (reg_291.read() ^ select_ln311_1_fu_519_p3.read());
}

void Cipher::thread_xor_ln328_1_fu_586_p2() {
    xor_ln328_1_fu_586_p2 = (xor_ln328_2_fu_580_p2.read() ^ xor_ln328_fu_574_p2.read());
}

void Cipher::thread_xor_ln328_2_fu_580_p2() {
    xor_ln328_2_fu_580_p2 = (shl_ln311_2_fu_552_p2.read() ^ Tmp_fu_452_p2.read());
}

void Cipher::thread_xor_ln328_fu_574_p2() {
    xor_ln328_fu_574_p2 = (state_q0.read() ^ select_ln311_2_fu_566_p3.read());
}

void Cipher::thread_xor_ln331_1_fu_620_p2() {
    xor_ln331_1_fu_620_p2 = (shl_ln311_3_fu_598_p2.read() ^ xor_ln319_1_fu_446_p2.read());
}

void Cipher::thread_xor_ln331_fu_626_p2() {
    xor_ln331_fu_626_p2 = (xor_ln331_1_fu_620_p2.read() ^ select_ln311_3_fu_612_p3.read());
}

void Cipher::thread_zext_ln275_fu_317_p1() {
    zext_ln275_fu_317_p1 = esl_zext<6,3>(i_0_i_reg_241.read());
}

void Cipher::thread_zext_ln276_1_fu_350_p1() {
    zext_ln276_1_fu_350_p1 = esl_zext<64,6>(add_ln276_fu_345_p2.read());
}

void Cipher::thread_zext_ln276_2_fu_355_p1() {
    zext_ln276_2_fu_355_p1 = esl_zext<64,8>(state_q0.read());
}

void Cipher::thread_zext_ln276_fu_341_p1() {
    zext_ln276_fu_341_p1 = esl_zext<6,5>(tmp_fu_333_p3.read());
}

void Cipher::thread_zext_ln318_fu_386_p1() {
    zext_ln318_fu_386_p1 = esl_zext<64,5>(tmp_6_fu_378_p3.read());
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln274_fu_305_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln275_fu_321_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln435_fu_360_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(icmp_ln317_fu_366_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_274_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

