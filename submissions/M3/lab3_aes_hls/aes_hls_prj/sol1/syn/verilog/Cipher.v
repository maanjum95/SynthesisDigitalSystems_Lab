// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg RoundKey_ce0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] reg_286;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state20;
reg   [7:0] reg_291;
wire    ap_CS_fsm_state13;
reg   [7:0] reg_298;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state2;
wire    grp_AddRoundKey_fu_274_ap_ready;
wire    grp_AddRoundKey_fu_274_ap_done;
wire   [2:0] i_fu_311_p2;
reg   [2:0] i_reg_695;
wire    ap_CS_fsm_state4;
wire   [5:0] zext_ln275_fu_317_p1;
reg   [5:0] zext_ln275_reg_700;
wire   [0:0] icmp_ln274_fu_305_p2;
wire   [2:0] j_fu_327_p2;
reg   [2:0] j_reg_708;
wire    ap_CS_fsm_state5;
reg   [3:0] state_addr_12_reg_713;
wire   [0:0] icmp_ln275_fu_321_p2;
wire    ap_CS_fsm_state6;
reg   [7:0] state_load_2_reg_724;
reg   [7:0] temp_1_reg_729;
wire    ap_CS_fsm_state10;
reg   [7:0] state_load_4_reg_734;
reg   [7:0] temp_2_reg_739;
wire    ap_CS_fsm_state11;
reg   [7:0] state_load_6_reg_744;
reg   [7:0] temp_3_reg_749;
wire    ap_CS_fsm_state12;
reg   [7:0] state_load_8_reg_754;
wire   [2:0] i_4_fu_372_p2;
reg   [2:0] i_4_reg_765;
wire    ap_CS_fsm_state19;
wire   [4:0] tmp_6_fu_378_p3;
reg   [4:0] tmp_6_reg_770;
wire   [0:0] icmp_ln317_fu_366_p2;
reg   [3:0] state_addr_13_reg_776;
reg   [3:0] state_addr_14_reg_781;
wire   [7:0] round_fu_406_p2;
reg   [7:0] round_reg_786;
reg   [3:0] state_addr_15_reg_791;
reg   [3:0] state_addr_16_reg_796;
wire   [7:0] xor_ln328_1_fu_586_p2;
reg   [7:0] xor_ln328_1_reg_801;
wire    ap_CS_fsm_state21;
wire   [7:0] xor_ln331_fu_626_p2;
reg   [7:0] xor_ln331_reg_806;
wire    grp_AddRoundKey_fu_274_ap_start;
wire    grp_AddRoundKey_fu_274_ap_idle;
reg   [7:0] grp_AddRoundKey_fu_274_round;
wire   [3:0] grp_AddRoundKey_fu_274_state_address0;
wire    grp_AddRoundKey_fu_274_state_ce0;
wire    grp_AddRoundKey_fu_274_state_we0;
wire   [7:0] grp_AddRoundKey_fu_274_state_d0;
wire   [7:0] grp_AddRoundKey_fu_274_RoundKey_address0;
wire    grp_AddRoundKey_fu_274_RoundKey_ce0;
reg   [7:0] round_0_reg_229;
wire    ap_CS_fsm_state23;
reg   [2:0] i_0_i_reg_241;
wire    ap_CS_fsm_state3;
reg   [2:0] j_0_i_reg_252;
wire    ap_CS_fsm_state7;
reg   [2:0] i_0_i3_reg_263;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln435_fu_360_p2;
reg    grp_AddRoundKey_fu_274_ap_start_reg;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln276_1_fu_350_p1;
wire   [63:0] zext_ln276_2_fu_355_p1;
wire   [63:0] zext_ln318_fu_386_p1;
wire   [63:0] tmp_7_fu_397_p3;
wire   [63:0] tmp_8_fu_417_p3;
wire   [63:0] tmp_9_fu_431_p3;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [7:0] xor_ln322_1_fu_492_p2;
wire   [7:0] xor_ln325_1_fu_539_p2;
wire   [4:0] tmp_fu_333_p3;
wire   [5:0] zext_ln276_fu_341_p1;
wire   [5:0] add_ln276_fu_345_p2;
wire   [4:0] or_ln319_fu_391_p2;
wire   [4:0] or_ln319_1_fu_412_p2;
wire   [4:0] or_ln319_2_fu_426_p2;
wire   [7:0] Tm_fu_440_p2;
wire   [7:0] xor_ln319_1_fu_446_p2;
wire   [0:0] tmp_1_fu_464_p3;
wire   [7:0] select_ln311_fu_472_p3;
wire   [7:0] shl_ln311_fu_458_p2;
wire   [7:0] Tmp_fu_452_p2;
wire   [7:0] xor_ln322_2_fu_486_p2;
wire   [7:0] xor_ln322_fu_480_p2;
wire   [7:0] Tm_1_fu_499_p2;
wire   [0:0] tmp_2_fu_511_p3;
wire   [7:0] select_ln311_1_fu_519_p3;
wire   [7:0] shl_ln311_1_fu_505_p2;
wire   [7:0] xor_ln325_2_fu_533_p2;
wire   [7:0] xor_ln325_fu_527_p2;
wire   [7:0] Tm_2_fu_546_p2;
wire   [0:0] tmp_3_fu_558_p3;
wire   [7:0] select_ln311_2_fu_566_p3;
wire   [7:0] shl_ln311_2_fu_552_p2;
wire   [7:0] xor_ln328_2_fu_580_p2;
wire   [7:0] xor_ln328_fu_574_p2;
wire   [7:0] Tm_3_fu_592_p2;
wire   [0:0] tmp_4_fu_604_p3;
wire   [7:0] shl_ln311_3_fu_598_p2;
wire   [7:0] xor_ln331_1_fu_620_p2;
wire   [7:0] select_ln311_3_fu_612_p3;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 grp_AddRoundKey_fu_274_ap_start_reg = 1'b0;
end

Cipher_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

AddRoundKey grp_AddRoundKey_fu_274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_274_ap_start),
    .ap_done(grp_AddRoundKey_fu_274_ap_done),
    .ap_idle(grp_AddRoundKey_fu_274_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_274_ap_ready),
    .round(grp_AddRoundKey_fu_274_round),
    .state_address0(grp_AddRoundKey_fu_274_state_address0),
    .state_ce0(grp_AddRoundKey_fu_274_state_ce0),
    .state_we0(grp_AddRoundKey_fu_274_state_we0),
    .state_d0(grp_AddRoundKey_fu_274_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_274_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_274_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_274_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd1)))) begin
            grp_AddRoundKey_fu_274_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_274_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_274_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln435_fu_360_p2 == 1'd0))) begin
        i_0_i3_reg_263 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_0_i3_reg_263 <= i_4_reg_765;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln275_fu_321_p2 == 1'd1))) begin
        i_0_i_reg_241 <= i_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_241 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln274_fu_305_p2 == 1'd0))) begin
        j_0_i_reg_252 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_i_reg_252 <= j_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_291 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_291 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_298 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_298 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_274_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            round_0_reg_229 <= round_reg_786;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            round_0_reg_229 <= 8'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_4_reg_765 <= i_4_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_695 <= i_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_708 <= j_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_286 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd1))) begin
        round_reg_786 <= round_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln275_fu_321_p2 == 1'd0))) begin
        state_addr_12_reg_713 <= zext_ln276_1_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd0))) begin
        state_addr_13_reg_776[3 : 2] <= zext_ln318_fu_386_p1[3 : 2];
        state_addr_14_reg_781[3 : 2] <= tmp_7_fu_397_p3[3 : 2];
        tmp_6_reg_770[4 : 2] <= tmp_6_fu_378_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_addr_15_reg_791[3 : 2] <= tmp_8_fu_417_p3[3 : 2];
        state_addr_16_reg_796[3 : 2] <= tmp_9_fu_431_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_load_2_reg_724 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        state_load_4_reg_734 <= state_q1;
        temp_1_reg_729 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        state_load_6_reg_744 <= state_q1;
        temp_2_reg_739 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        state_load_8_reg_754 <= state_q1;
        temp_3_reg_749 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        xor_ln328_1_reg_801 <= xor_ln328_1_fu_586_p2;
        xor_ln331_reg_806 <= xor_ln331_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln274_fu_305_p2 == 1'd0))) begin
        zext_ln275_reg_700[2 : 0] <= zext_ln275_fu_317_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_274_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state25) & (grp_AddRoundKey_fu_274_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (grp_AddRoundKey_fu_274_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_AddRoundKey_fu_274_round = 8'd10;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_AddRoundKey_fu_274_round = round_0_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_AddRoundKey_fu_274_round = 8'd0;
    end else begin
        grp_AddRoundKey_fu_274_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address0 = state_addr_15_reg_791;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = state_addr_13_reg_776;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address0 = tmp_8_fu_417_p3;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd0))) begin
        state_address0 = zext_ln318_fu_386_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address0 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        state_address0 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = zext_ln276_1_fu_350_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address0 = grp_AddRoundKey_fu_274_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address1 = state_addr_16_reg_796;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = state_addr_14_reg_781;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address1 = tmp_9_fu_431_p3;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd0))) begin
        state_address1 = tmp_7_fu_397_p3;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        state_address1 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address1 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address1 = state_addr_12_reg_713;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address1 = 64'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd0)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        state_ce0 = grp_AddRoundKey_fu_274_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd0)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d0 = xor_ln328_1_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d0 = xor_ln322_1_fu_492_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d0 = reg_298;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d0 = state_load_8_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = state_load_6_reg_744;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = state_load_4_reg_734;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = state_load_2_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = reg_291;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        state_d0 = grp_AddRoundKey_fu_274_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d1 = xor_ln331_reg_806;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d1 = xor_ln325_1_fu_539_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = temp_3_reg_749;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        state_d1 = reg_291;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = temp_2_reg_739;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = temp_1_reg_729;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = reg_286;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = reg_298;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d1 = sbox_q0;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        state_we0 = grp_AddRoundKey_fu_274_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state21))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_AddRoundKey_fu_274_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln274_fu_305_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln275_fu_321_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln435_fu_360_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln317_fu_366_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (grp_AddRoundKey_fu_274_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (grp_AddRoundKey_fu_274_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RoundKey_address0 = grp_AddRoundKey_fu_274_RoundKey_address0;

assign Tm_1_fu_499_p2 = (state_q0 ^ reg_291);

assign Tm_2_fu_546_p2 = (state_q1 ^ state_q0);

assign Tm_3_fu_592_p2 = (state_q1 ^ reg_286);

assign Tm_fu_440_p2 = (reg_291 ^ reg_286);

assign Tmp_fu_452_p2 = (xor_ln319_1_fu_446_p2 ^ state_q1);

assign add_ln276_fu_345_p2 = (zext_ln275_reg_700 + zext_ln276_fu_341_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AddRoundKey_fu_274_ap_start = grp_AddRoundKey_fu_274_ap_start_reg;

assign i_4_fu_372_p2 = (i_0_i3_reg_263 + 3'd1);

assign i_fu_311_p2 = (i_0_i_reg_241 + 3'd1);

assign icmp_ln274_fu_305_p2 = ((i_0_i_reg_241 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln275_fu_321_p2 = ((j_0_i_reg_252 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_366_p2 = ((i_0_i3_reg_263 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln435_fu_360_p2 = ((round_0_reg_229 == 8'd10) ? 1'b1 : 1'b0);

assign j_fu_327_p2 = (j_0_i_reg_252 + 3'd1);

assign or_ln319_1_fu_412_p2 = (tmp_6_reg_770 | 5'd2);

assign or_ln319_2_fu_426_p2 = (tmp_6_reg_770 | 5'd3);

assign or_ln319_fu_391_p2 = (tmp_6_fu_378_p3 | 5'd1);

assign round_fu_406_p2 = (round_0_reg_229 + 8'd1);

assign sbox_address0 = zext_ln276_2_fu_355_p1;

assign select_ln311_1_fu_519_p3 = ((tmp_2_fu_511_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln311_2_fu_566_p3 = ((tmp_3_fu_558_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln311_3_fu_612_p3 = ((tmp_4_fu_604_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign select_ln311_fu_472_p3 = ((tmp_1_fu_464_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign shl_ln311_1_fu_505_p2 = Tm_1_fu_499_p2 << 8'd1;

assign shl_ln311_2_fu_552_p2 = Tm_2_fu_546_p2 << 8'd1;

assign shl_ln311_3_fu_598_p2 = Tm_3_fu_592_p2 << 8'd1;

assign shl_ln311_fu_458_p2 = Tm_fu_440_p2 << 8'd1;

assign tmp_1_fu_464_p3 = Tm_fu_440_p2[32'd7];

assign tmp_2_fu_511_p3 = Tm_1_fu_499_p2[32'd7];

assign tmp_3_fu_558_p3 = Tm_2_fu_546_p2[32'd7];

assign tmp_4_fu_604_p3 = Tm_3_fu_592_p2[32'd7];

assign tmp_6_fu_378_p3 = {{i_0_i3_reg_263}, {2'd0}};

assign tmp_7_fu_397_p3 = {{59'd0}, {or_ln319_fu_391_p2}};

assign tmp_8_fu_417_p3 = {{59'd0}, {or_ln319_1_fu_412_p2}};

assign tmp_9_fu_431_p3 = {{59'd0}, {or_ln319_2_fu_426_p2}};

assign tmp_fu_333_p3 = {{j_0_i_reg_252}, {2'd0}};

assign xor_ln319_1_fu_446_p2 = (state_q0 ^ Tm_fu_440_p2);

assign xor_ln322_1_fu_492_p2 = (xor_ln322_fu_480_p2 ^ xor_ln322_2_fu_486_p2);

assign xor_ln322_2_fu_486_p2 = (shl_ln311_fu_458_p2 ^ Tmp_fu_452_p2);

assign xor_ln322_fu_480_p2 = (select_ln311_fu_472_p3 ^ reg_286);

assign xor_ln325_1_fu_539_p2 = (xor_ln325_fu_527_p2 ^ xor_ln325_2_fu_533_p2);

assign xor_ln325_2_fu_533_p2 = (shl_ln311_1_fu_505_p2 ^ Tmp_fu_452_p2);

assign xor_ln325_fu_527_p2 = (select_ln311_1_fu_519_p3 ^ reg_291);

assign xor_ln328_1_fu_586_p2 = (xor_ln328_fu_574_p2 ^ xor_ln328_2_fu_580_p2);

assign xor_ln328_2_fu_580_p2 = (shl_ln311_2_fu_552_p2 ^ Tmp_fu_452_p2);

assign xor_ln328_fu_574_p2 = (state_q0 ^ select_ln311_2_fu_566_p3);

assign xor_ln331_1_fu_620_p2 = (xor_ln319_1_fu_446_p2 ^ shl_ln311_3_fu_598_p2);

assign xor_ln331_fu_626_p2 = (xor_ln331_1_fu_620_p2 ^ select_ln311_3_fu_612_p3);

assign zext_ln275_fu_317_p1 = i_0_i_reg_241;

assign zext_ln276_1_fu_350_p1 = add_ln276_fu_345_p2;

assign zext_ln276_2_fu_355_p1 = state_q0;

assign zext_ln276_fu_341_p1 = tmp_fu_333_p3;

assign zext_ln318_fu_386_p1 = tmp_6_fu_378_p3;

always @ (posedge ap_clk) begin
    zext_ln275_reg_700[5:3] <= 3'b000;
    tmp_6_reg_770[1:0] <= 2'b00;
    state_addr_13_reg_776[1:0] <= 2'b00;
    state_addr_14_reg_781[1:0] <= 2'b01;
    state_addr_15_reg_791[1:0] <= 2'b10;
    state_addr_16_reg_796[1:0] <= 2'b11;
end

endmodule //Cipher
