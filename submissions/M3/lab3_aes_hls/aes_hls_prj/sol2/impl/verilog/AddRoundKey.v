// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        round,
        state_0_0_read,
        state_0_1_read,
        state_0_2_read,
        state_0_3_read,
        state_1_0_read,
        state_1_1_read,
        state_1_2_read,
        state_1_3_read,
        state_2_0_read,
        state_2_1_read,
        state_2_2_read,
        state_2_3_read,
        state_3_0_read,
        state_3_1_read,
        state_3_2_read,
        state_3_3_read,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [4:0] round;
input  [7:0] state_0_0_read;
input  [7:0] state_0_1_read;
input  [7:0] state_0_2_read;
input  [7:0] state_0_3_read;
input  [7:0] state_1_0_read;
input  [7:0] state_1_1_read;
input  [7:0] state_1_2_read;
input  [7:0] state_1_3_read;
input  [7:0] state_2_0_read;
input  [7:0] state_2_1_read;
input  [7:0] state_2_2_read;
input  [7:0] state_2_3_read;
input  [7:0] state_3_0_read;
input  [7:0] state_3_1_read;
input  [7:0] state_3_2_read;
input  [7:0] state_3_3_read;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
input  [7:0] RoundKey_q1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [7:0] shl_ln_fu_321_p3;
reg   [7:0] shl_ln_reg_649;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] RoundKey_load_reg_677;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] RoundKey_load_1_reg_682;
reg   [7:0] RoundKey_load_2_reg_697;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] RoundKey_load_3_reg_702;
reg   [7:0] RoundKey_load_4_reg_717;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] RoundKey_load_5_reg_722;
reg   [7:0] RoundKey_load_6_reg_737;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] RoundKey_load_7_reg_742;
reg   [7:0] RoundKey_load_8_reg_757;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [7:0] RoundKey_load_9_reg_762;
reg   [7:0] RoundKey_load_10_reg_777;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [7:0] RoundKey_load_11_reg_782;
reg   [7:0] state_3_3_read_4_reg_797;
reg   [7:0] state_3_2_read_3_reg_802;
wire   [7:0] xor_ln265_fu_465_p2;
reg   [7:0] xor_ln265_reg_807;
wire   [7:0] xor_ln265_1_fu_470_p2;
reg   [7:0] xor_ln265_1_reg_812;
wire   [7:0] xor_ln265_2_fu_475_p2;
reg   [7:0] xor_ln265_2_reg_817;
wire   [7:0] xor_ln265_3_fu_480_p2;
reg   [7:0] xor_ln265_3_reg_822;
wire   [7:0] xor_ln265_4_fu_485_p2;
reg   [7:0] xor_ln265_4_reg_827;
wire   [7:0] xor_ln265_5_fu_490_p2;
reg   [7:0] xor_ln265_5_reg_832;
wire   [7:0] xor_ln265_6_fu_495_p2;
reg   [7:0] xor_ln265_6_reg_837;
wire   [7:0] xor_ln265_7_fu_500_p2;
reg   [7:0] xor_ln265_7_reg_842;
wire   [7:0] xor_ln265_8_fu_505_p2;
reg   [7:0] xor_ln265_8_reg_847;
wire   [7:0] xor_ln265_9_fu_510_p2;
reg   [7:0] xor_ln265_9_reg_852;
wire   [7:0] xor_ln265_10_fu_515_p2;
reg   [7:0] xor_ln265_10_reg_857;
wire   [7:0] xor_ln265_11_fu_520_p2;
reg   [7:0] xor_ln265_11_reg_862;
wire   [7:0] xor_ln265_12_fu_525_p2;
reg   [7:0] xor_ln265_12_reg_867;
wire   [7:0] xor_ln265_13_fu_531_p2;
reg   [7:0] xor_ln265_13_reg_872;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage7_subdone;
reg   [7:0] ap_port_reg_state_0_0_read;
reg   [7:0] ap_port_reg_state_0_1_read;
reg   [7:0] ap_port_reg_state_0_2_read;
reg   [7:0] ap_port_reg_state_0_3_read;
reg   [7:0] ap_port_reg_state_1_0_read;
reg   [7:0] ap_port_reg_state_1_1_read;
reg   [7:0] ap_port_reg_state_1_2_read;
reg   [7:0] ap_port_reg_state_1_3_read;
reg   [7:0] ap_port_reg_state_2_0_read;
reg   [7:0] ap_port_reg_state_2_1_read;
reg   [7:0] ap_port_reg_state_2_2_read;
reg   [7:0] ap_port_reg_state_2_3_read;
reg   [7:0] ap_port_reg_state_3_0_read;
reg   [7:0] ap_port_reg_state_3_1_read;
reg   [7:0] ap_port_reg_state_3_2_read;
reg   [7:0] ap_port_reg_state_3_3_read;
wire   [63:0] zext_ln265_fu_329_p1;
wire   [63:0] zext_ln265_1_fu_340_p1;
wire   [63:0] zext_ln265_2_fu_350_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln265_3_fu_360_p1;
wire   [63:0] zext_ln265_4_fu_370_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln265_5_fu_380_p1;
wire   [63:0] zext_ln265_6_fu_390_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln265_7_fu_400_p1;
wire   [63:0] zext_ln265_8_fu_410_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln265_9_fu_420_p1;
wire   [63:0] zext_ln265_10_fu_430_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln265_11_fu_440_p1;
wire   [63:0] zext_ln265_12_fu_450_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln265_13_fu_460_p1;
wire   [63:0] zext_ln265_14_fu_542_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln265_15_fu_552_p1;
wire   [3:0] trunc_ln265_fu_317_p1;
wire   [7:0] or_ln265_fu_334_p2;
wire   [7:0] or_ln265_1_fu_345_p2;
wire   [7:0] or_ln265_2_fu_355_p2;
wire   [7:0] or_ln265_3_fu_365_p2;
wire   [7:0] or_ln265_4_fu_375_p2;
wire   [7:0] or_ln265_5_fu_385_p2;
wire   [7:0] or_ln265_6_fu_395_p2;
wire   [7:0] or_ln265_7_fu_405_p2;
wire   [7:0] or_ln265_8_fu_415_p2;
wire   [7:0] or_ln265_9_fu_425_p2;
wire   [7:0] or_ln265_10_fu_435_p2;
wire   [7:0] or_ln265_11_fu_445_p2;
wire   [7:0] or_ln265_12_fu_455_p2;
wire   [7:0] or_ln265_13_fu_537_p2;
wire   [7:0] or_ln265_14_fu_547_p2;
wire   [7:0] xor_ln265_14_fu_557_p2;
wire   [7:0] xor_ln265_15_fu_562_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        RoundKey_load_10_reg_777 <= RoundKey_q0;
        RoundKey_load_11_reg_782 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        RoundKey_load_1_reg_682 <= RoundKey_q1;
        RoundKey_load_reg_677 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        RoundKey_load_2_reg_697 <= RoundKey_q0;
        RoundKey_load_3_reg_702 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        RoundKey_load_4_reg_717 <= RoundKey_q0;
        RoundKey_load_5_reg_722 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        RoundKey_load_6_reg_737 <= RoundKey_q0;
        RoundKey_load_7_reg_742 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        RoundKey_load_8_reg_757 <= RoundKey_q0;
        RoundKey_load_9_reg_762 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_port_reg_state_0_0_read <= state_0_0_read;
        ap_port_reg_state_0_1_read <= state_0_1_read;
        ap_port_reg_state_0_2_read <= state_0_2_read;
        ap_port_reg_state_0_3_read <= state_0_3_read;
        ap_port_reg_state_1_0_read <= state_1_0_read;
        ap_port_reg_state_1_1_read <= state_1_1_read;
        ap_port_reg_state_1_2_read <= state_1_2_read;
        ap_port_reg_state_1_3_read <= state_1_3_read;
        ap_port_reg_state_2_0_read <= state_2_0_read;
        ap_port_reg_state_2_1_read <= state_2_1_read;
        ap_port_reg_state_2_2_read <= state_2_2_read;
        ap_port_reg_state_2_3_read <= state_2_3_read;
        ap_port_reg_state_3_0_read <= state_3_0_read;
        ap_port_reg_state_3_1_read <= state_3_1_read;
        ap_port_reg_state_3_2_read <= state_3_2_read;
        ap_port_reg_state_3_3_read <= state_3_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shl_ln_reg_649[7 : 4] <= shl_ln_fu_321_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        state_3_2_read_3_reg_802 <= ap_port_reg_state_3_2_read;
        state_3_3_read_4_reg_797 <= ap_port_reg_state_3_3_read;
        xor_ln265_10_reg_857 <= xor_ln265_10_fu_515_p2;
        xor_ln265_11_reg_862 <= xor_ln265_11_fu_520_p2;
        xor_ln265_12_reg_867 <= xor_ln265_12_fu_525_p2;
        xor_ln265_13_reg_872 <= xor_ln265_13_fu_531_p2;
        xor_ln265_1_reg_812 <= xor_ln265_1_fu_470_p2;
        xor_ln265_2_reg_817 <= xor_ln265_2_fu_475_p2;
        xor_ln265_3_reg_822 <= xor_ln265_3_fu_480_p2;
        xor_ln265_4_reg_827 <= xor_ln265_4_fu_485_p2;
        xor_ln265_5_reg_832 <= xor_ln265_5_fu_490_p2;
        xor_ln265_6_reg_837 <= xor_ln265_6_fu_495_p2;
        xor_ln265_7_reg_842 <= xor_ln265_7_fu_500_p2;
        xor_ln265_8_reg_847 <= xor_ln265_8_fu_505_p2;
        xor_ln265_9_reg_852 <= xor_ln265_9_fu_510_p2;
        xor_ln265_reg_807 <= xor_ln265_fu_465_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            RoundKey_address0 = zext_ln265_14_fu_542_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            RoundKey_address0 = zext_ln265_12_fu_450_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            RoundKey_address0 = zext_ln265_10_fu_430_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            RoundKey_address0 = zext_ln265_8_fu_410_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            RoundKey_address0 = zext_ln265_6_fu_390_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            RoundKey_address0 = zext_ln265_4_fu_370_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            RoundKey_address0 = zext_ln265_2_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            RoundKey_address0 = zext_ln265_fu_329_p1;
        end else begin
            RoundKey_address0 = 'bx;
        end
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            RoundKey_address1 = zext_ln265_15_fu_552_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            RoundKey_address1 = zext_ln265_13_fu_460_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            RoundKey_address1 = zext_ln265_11_fu_440_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            RoundKey_address1 = zext_ln265_9_fu_420_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            RoundKey_address1 = zext_ln265_7_fu_400_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            RoundKey_address1 = zext_ln265_5_fu_380_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            RoundKey_address1 = zext_ln265_3_fu_360_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            RoundKey_address1 = zext_ln265_1_fu_340_p1;
        end else begin
            RoundKey_address1 = 'bx;
        end
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_start_pp0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_start_pp0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = xor_ln265_reg_807;

assign ap_return_1 = xor_ln265_1_reg_812;

assign ap_return_10 = xor_ln265_10_reg_857;

assign ap_return_11 = xor_ln265_11_reg_862;

assign ap_return_12 = xor_ln265_12_reg_867;

assign ap_return_13 = xor_ln265_13_reg_872;

assign ap_return_14 = xor_ln265_14_fu_557_p2;

assign ap_return_15 = xor_ln265_15_fu_562_p2;

assign ap_return_2 = xor_ln265_2_reg_817;

assign ap_return_3 = xor_ln265_3_reg_822;

assign ap_return_4 = xor_ln265_4_reg_827;

assign ap_return_5 = xor_ln265_5_reg_832;

assign ap_return_6 = xor_ln265_6_reg_837;

assign ap_return_7 = xor_ln265_7_reg_842;

assign ap_return_8 = xor_ln265_8_reg_847;

assign ap_return_9 = xor_ln265_9_reg_852;

assign or_ln265_10_fu_435_p2 = (shl_ln_reg_649 | 8'd11);

assign or_ln265_11_fu_445_p2 = (shl_ln_reg_649 | 8'd12);

assign or_ln265_12_fu_455_p2 = (shl_ln_reg_649 | 8'd13);

assign or_ln265_13_fu_537_p2 = (shl_ln_reg_649 | 8'd14);

assign or_ln265_14_fu_547_p2 = (shl_ln_reg_649 | 8'd15);

assign or_ln265_1_fu_345_p2 = (shl_ln_reg_649 | 8'd2);

assign or_ln265_2_fu_355_p2 = (shl_ln_reg_649 | 8'd3);

assign or_ln265_3_fu_365_p2 = (shl_ln_reg_649 | 8'd4);

assign or_ln265_4_fu_375_p2 = (shl_ln_reg_649 | 8'd5);

assign or_ln265_5_fu_385_p2 = (shl_ln_reg_649 | 8'd6);

assign or_ln265_6_fu_395_p2 = (shl_ln_reg_649 | 8'd7);

assign or_ln265_7_fu_405_p2 = (shl_ln_reg_649 | 8'd8);

assign or_ln265_8_fu_415_p2 = (shl_ln_reg_649 | 8'd9);

assign or_ln265_9_fu_425_p2 = (shl_ln_reg_649 | 8'd10);

assign or_ln265_fu_334_p2 = (shl_ln_fu_321_p3 | 8'd1);

assign shl_ln_fu_321_p3 = {{trunc_ln265_fu_317_p1}, {4'd0}};

assign trunc_ln265_fu_317_p1 = round[3:0];

assign xor_ln265_10_fu_515_p2 = (ap_port_reg_state_2_2_read ^ RoundKey_load_10_reg_777);

assign xor_ln265_11_fu_520_p2 = (ap_port_reg_state_2_3_read ^ RoundKey_load_11_reg_782);

assign xor_ln265_12_fu_525_p2 = (ap_port_reg_state_3_0_read ^ RoundKey_q0);

assign xor_ln265_13_fu_531_p2 = (ap_port_reg_state_3_1_read ^ RoundKey_q1);

assign xor_ln265_14_fu_557_p2 = (state_3_2_read_3_reg_802 ^ RoundKey_q0);

assign xor_ln265_15_fu_562_p2 = (state_3_3_read_4_reg_797 ^ RoundKey_q1);

assign xor_ln265_1_fu_470_p2 = (ap_port_reg_state_0_1_read ^ RoundKey_load_1_reg_682);

assign xor_ln265_2_fu_475_p2 = (ap_port_reg_state_0_2_read ^ RoundKey_load_2_reg_697);

assign xor_ln265_3_fu_480_p2 = (ap_port_reg_state_0_3_read ^ RoundKey_load_3_reg_702);

assign xor_ln265_4_fu_485_p2 = (ap_port_reg_state_1_0_read ^ RoundKey_load_4_reg_717);

assign xor_ln265_5_fu_490_p2 = (ap_port_reg_state_1_1_read ^ RoundKey_load_5_reg_722);

assign xor_ln265_6_fu_495_p2 = (ap_port_reg_state_1_2_read ^ RoundKey_load_6_reg_737);

assign xor_ln265_7_fu_500_p2 = (ap_port_reg_state_1_3_read ^ RoundKey_load_7_reg_742);

assign xor_ln265_8_fu_505_p2 = (ap_port_reg_state_2_0_read ^ RoundKey_load_8_reg_757);

assign xor_ln265_9_fu_510_p2 = (ap_port_reg_state_2_1_read ^ RoundKey_load_9_reg_762);

assign xor_ln265_fu_465_p2 = (ap_port_reg_state_0_0_read ^ RoundKey_load_reg_677);

assign zext_ln265_10_fu_430_p1 = or_ln265_9_fu_425_p2;

assign zext_ln265_11_fu_440_p1 = or_ln265_10_fu_435_p2;

assign zext_ln265_12_fu_450_p1 = or_ln265_11_fu_445_p2;

assign zext_ln265_13_fu_460_p1 = or_ln265_12_fu_455_p2;

assign zext_ln265_14_fu_542_p1 = or_ln265_13_fu_537_p2;

assign zext_ln265_15_fu_552_p1 = or_ln265_14_fu_547_p2;

assign zext_ln265_1_fu_340_p1 = or_ln265_fu_334_p2;

assign zext_ln265_2_fu_350_p1 = or_ln265_1_fu_345_p2;

assign zext_ln265_3_fu_360_p1 = or_ln265_2_fu_355_p2;

assign zext_ln265_4_fu_370_p1 = or_ln265_3_fu_365_p2;

assign zext_ln265_5_fu_380_p1 = or_ln265_4_fu_375_p2;

assign zext_ln265_6_fu_390_p1 = or_ln265_5_fu_385_p2;

assign zext_ln265_7_fu_400_p1 = or_ln265_6_fu_395_p2;

assign zext_ln265_8_fu_410_p1 = or_ln265_7_fu_405_p2;

assign zext_ln265_9_fu_420_p1 = or_ln265_8_fu_415_p2;

assign zext_ln265_fu_329_p1 = shl_ln_fu_321_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_649[3:0] <= 4'b0000;
end

endmodule //AddRoundKey
