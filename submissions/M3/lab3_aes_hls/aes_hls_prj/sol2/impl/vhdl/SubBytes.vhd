-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SubBytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    state_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of SubBytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce3 : STD_LOGIC;
    signal sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce4 : STD_LOGIC;
    signal sbox_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce5 : STD_LOGIC;
    signal sbox_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce6 : STD_LOGIC;
    signal sbox_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce7 : STD_LOGIC;
    signal sbox_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce8 : STD_LOGIC;
    signal sbox_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce9 : STD_LOGIC;
    signal sbox_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce10 : STD_LOGIC;
    signal sbox_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce11 : STD_LOGIC;
    signal sbox_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce12 : STD_LOGIC;
    signal sbox_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce13 : STD_LOGIC;
    signal sbox_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce14 : STD_LOGIC;
    signal sbox_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce15 : STD_LOGIC;
    signal sbox_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln276_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_1_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_2_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_3_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_4_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_5_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_6_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_7_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_8_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_9_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_10_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_11_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_12_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_13_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_14_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_15_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component SubBytes_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component SubBytes_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2,
        address3 => sbox_address3,
        ce3 => sbox_ce3,
        q3 => sbox_q3,
        address4 => sbox_address4,
        ce4 => sbox_ce4,
        q4 => sbox_q4,
        address5 => sbox_address5,
        ce5 => sbox_ce5,
        q5 => sbox_q5,
        address6 => sbox_address6,
        ce6 => sbox_ce6,
        q6 => sbox_q6,
        address7 => sbox_address7,
        ce7 => sbox_ce7,
        q7 => sbox_q7,
        address8 => sbox_address8,
        ce8 => sbox_ce8,
        q8 => sbox_q8,
        address9 => sbox_address9,
        ce9 => sbox_ce9,
        q9 => sbox_q9,
        address10 => sbox_address10,
        ce10 => sbox_ce10,
        q10 => sbox_q10,
        address11 => sbox_address11,
        ce11 => sbox_ce11,
        q11 => sbox_q11,
        address12 => sbox_address12,
        ce12 => sbox_ce12,
        q12 => sbox_q12,
        address13 => sbox_address13,
        ce13 => sbox_ce13,
        q13 => sbox_q13,
        address14 => sbox_address14,
        ce14 => sbox_ce14,
        q14 => sbox_q14,
        address15 => sbox_address15,
        ce15 => sbox_ce15,
        q15 => sbox_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sbox_q0;
    ap_return_1 <= sbox_q4;
    ap_return_10 <= sbox_q10;
    ap_return_11 <= sbox_q14;
    ap_return_12 <= sbox_q3;
    ap_return_13 <= sbox_q7;
    ap_return_14 <= sbox_q11;
    ap_return_15 <= sbox_q15;
    ap_return_2 <= sbox_q8;
    ap_return_3 <= sbox_q12;
    ap_return_4 <= sbox_q1;
    ap_return_5 <= sbox_q5;
    ap_return_6 <= sbox_q9;
    ap_return_7 <= sbox_q13;
    ap_return_8 <= sbox_q2;
    ap_return_9 <= sbox_q6;
    sbox_address0 <= zext_ln276_fu_329_p1(8 - 1 downto 0);
    sbox_address1 <= zext_ln276_1_fu_334_p1(8 - 1 downto 0);
    sbox_address10 <= zext_ln276_10_fu_379_p1(8 - 1 downto 0);
    sbox_address11 <= zext_ln276_11_fu_384_p1(8 - 1 downto 0);
    sbox_address12 <= zext_ln276_12_fu_389_p1(8 - 1 downto 0);
    sbox_address13 <= zext_ln276_13_fu_394_p1(8 - 1 downto 0);
    sbox_address14 <= zext_ln276_14_fu_399_p1(8 - 1 downto 0);
    sbox_address15 <= zext_ln276_15_fu_404_p1(8 - 1 downto 0);
    sbox_address2 <= zext_ln276_2_fu_339_p1(8 - 1 downto 0);
    sbox_address3 <= zext_ln276_3_fu_344_p1(8 - 1 downto 0);
    sbox_address4 <= zext_ln276_4_fu_349_p1(8 - 1 downto 0);
    sbox_address5 <= zext_ln276_5_fu_354_p1(8 - 1 downto 0);
    sbox_address6 <= zext_ln276_6_fu_359_p1(8 - 1 downto 0);
    sbox_address7 <= zext_ln276_7_fu_364_p1(8 - 1 downto 0);
    sbox_address8 <= zext_ln276_8_fu_369_p1(8 - 1 downto 0);
    sbox_address9 <= zext_ln276_9_fu_374_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce10_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce10 <= ap_const_logic_1;
        else 
            sbox_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce11_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce11 <= ap_const_logic_1;
        else 
            sbox_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce12_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce12 <= ap_const_logic_1;
        else 
            sbox_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce13_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce13 <= ap_const_logic_1;
        else 
            sbox_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce14_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce14 <= ap_const_logic_1;
        else 
            sbox_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce15_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce15 <= ap_const_logic_1;
        else 
            sbox_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce2 <= ap_const_logic_1;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce3 <= ap_const_logic_1;
        else 
            sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce4_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce4 <= ap_const_logic_1;
        else 
            sbox_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce5_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce5 <= ap_const_logic_1;
        else 
            sbox_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce6_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce6 <= ap_const_logic_1;
        else 
            sbox_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce7_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce7 <= ap_const_logic_1;
        else 
            sbox_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce8_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce8 <= ap_const_logic_1;
        else 
            sbox_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce9_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sbox_ce9 <= ap_const_logic_1;
        else 
            sbox_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln276_10_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_2_read),64));
    zext_ln276_11_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_2_read),64));
    zext_ln276_12_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_3_read),64));
    zext_ln276_13_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_3_read),64));
    zext_ln276_14_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_3_read),64));
    zext_ln276_15_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_3_read),64));
    zext_ln276_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_0_read),64));
    zext_ln276_2_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_0_read),64));
    zext_ln276_3_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_0_read),64));
    zext_ln276_4_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_1_read),64));
    zext_ln276_5_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_1_read),64));
    zext_ln276_6_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_1_read),64));
    zext_ln276_7_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_3_1_read),64));
    zext_ln276_8_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_2_read),64));
    zext_ln276_9_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_1_2_read),64));
    zext_ln276_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_0_0_read),64));
end behav;
