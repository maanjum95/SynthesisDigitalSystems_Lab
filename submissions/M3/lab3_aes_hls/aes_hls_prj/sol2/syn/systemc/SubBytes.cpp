// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "SubBytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic SubBytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic SubBytes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> SubBytes::ap_ST_fsm_pp0_stage0 = "1";
const bool SubBytes::ap_const_boolean_1 = true;
const sc_lv<32> SubBytes::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool SubBytes::ap_const_boolean_0 = false;

SubBytes::SubBytes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new SubBytes_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    sbox_U->address4(sbox_address4);
    sbox_U->ce4(sbox_ce4);
    sbox_U->q4(sbox_q4);
    sbox_U->address5(sbox_address5);
    sbox_U->ce5(sbox_ce5);
    sbox_U->q5(sbox_q5);
    sbox_U->address6(sbox_address6);
    sbox_U->ce6(sbox_ce6);
    sbox_U->q6(sbox_q6);
    sbox_U->address7(sbox_address7);
    sbox_U->ce7(sbox_ce7);
    sbox_U->q7(sbox_q7);
    sbox_U->address8(sbox_address8);
    sbox_U->ce8(sbox_ce8);
    sbox_U->q8(sbox_q8);
    sbox_U->address9(sbox_address9);
    sbox_U->ce9(sbox_ce9);
    sbox_U->q9(sbox_q9);
    sbox_U->address10(sbox_address10);
    sbox_U->ce10(sbox_ce10);
    sbox_U->q10(sbox_q10);
    sbox_U->address11(sbox_address11);
    sbox_U->ce11(sbox_ce11);
    sbox_U->q11(sbox_q11);
    sbox_U->address12(sbox_address12);
    sbox_U->ce12(sbox_ce12);
    sbox_U->q12(sbox_q12);
    sbox_U->address13(sbox_address13);
    sbox_U->ce13(sbox_ce13);
    sbox_U->q13(sbox_q13);
    sbox_U->address14(sbox_address14);
    sbox_U->ce14(sbox_ce14);
    sbox_U->q14(sbox_q14);
    sbox_U->address15(sbox_address15);
    sbox_U->ce15(sbox_ce15);
    sbox_U->q15(sbox_q15);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q0 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q4 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q10 );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q14 );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q3 );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q7 );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q11 );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q15 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q8 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q12 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q1 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q5 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q9 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q13 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q2 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( sbox_q6 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_fu_329_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_1_fu_334_p1 );

    SC_METHOD(thread_sbox_address10);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_10_fu_379_p1 );

    SC_METHOD(thread_sbox_address11);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_11_fu_384_p1 );

    SC_METHOD(thread_sbox_address12);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_12_fu_389_p1 );

    SC_METHOD(thread_sbox_address13);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_13_fu_394_p1 );

    SC_METHOD(thread_sbox_address14);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_14_fu_399_p1 );

    SC_METHOD(thread_sbox_address15);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_15_fu_404_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_2_fu_339_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_3_fu_344_p1 );

    SC_METHOD(thread_sbox_address4);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_4_fu_349_p1 );

    SC_METHOD(thread_sbox_address5);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_5_fu_354_p1 );

    SC_METHOD(thread_sbox_address6);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_6_fu_359_p1 );

    SC_METHOD(thread_sbox_address7);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_7_fu_364_p1 );

    SC_METHOD(thread_sbox_address8);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_8_fu_369_p1 );

    SC_METHOD(thread_sbox_address9);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln276_9_fu_374_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce10);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce11);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce12);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce13);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce14);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce15);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce4);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce5);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce6);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce7);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce8);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_sbox_ce9);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_zext_ln276_10_fu_379_p1);
    sensitive << ( state_2_2_read );

    SC_METHOD(thread_zext_ln276_11_fu_384_p1);
    sensitive << ( state_3_2_read );

    SC_METHOD(thread_zext_ln276_12_fu_389_p1);
    sensitive << ( state_0_3_read );

    SC_METHOD(thread_zext_ln276_13_fu_394_p1);
    sensitive << ( state_1_3_read );

    SC_METHOD(thread_zext_ln276_14_fu_399_p1);
    sensitive << ( state_2_3_read );

    SC_METHOD(thread_zext_ln276_15_fu_404_p1);
    sensitive << ( state_3_3_read );

    SC_METHOD(thread_zext_ln276_1_fu_334_p1);
    sensitive << ( state_1_0_read );

    SC_METHOD(thread_zext_ln276_2_fu_339_p1);
    sensitive << ( state_2_0_read );

    SC_METHOD(thread_zext_ln276_3_fu_344_p1);
    sensitive << ( state_3_0_read );

    SC_METHOD(thread_zext_ln276_4_fu_349_p1);
    sensitive << ( state_0_1_read );

    SC_METHOD(thread_zext_ln276_5_fu_354_p1);
    sensitive << ( state_1_1_read );

    SC_METHOD(thread_zext_ln276_6_fu_359_p1);
    sensitive << ( state_2_1_read );

    SC_METHOD(thread_zext_ln276_7_fu_364_p1);
    sensitive << ( state_3_1_read );

    SC_METHOD(thread_zext_ln276_8_fu_369_p1);
    sensitive << ( state_0_2_read );

    SC_METHOD(thread_zext_ln276_9_fu_374_p1);
    sensitive << ( state_1_2_read );

    SC_METHOD(thread_zext_ln276_fu_329_p1);
    sensitive << ( state_0_0_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "SubBytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, state_0_0_read, "(port)state_0_0_read");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_0_read, "(port)state_1_0_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_0_read, "(port)state_2_0_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_0_read, "(port)state_3_0_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, sbox_address4, "sbox_address4");
    sc_trace(mVcdFile, sbox_ce4, "sbox_ce4");
    sc_trace(mVcdFile, sbox_q4, "sbox_q4");
    sc_trace(mVcdFile, sbox_address5, "sbox_address5");
    sc_trace(mVcdFile, sbox_ce5, "sbox_ce5");
    sc_trace(mVcdFile, sbox_q5, "sbox_q5");
    sc_trace(mVcdFile, sbox_address6, "sbox_address6");
    sc_trace(mVcdFile, sbox_ce6, "sbox_ce6");
    sc_trace(mVcdFile, sbox_q6, "sbox_q6");
    sc_trace(mVcdFile, sbox_address7, "sbox_address7");
    sc_trace(mVcdFile, sbox_ce7, "sbox_ce7");
    sc_trace(mVcdFile, sbox_q7, "sbox_q7");
    sc_trace(mVcdFile, sbox_address8, "sbox_address8");
    sc_trace(mVcdFile, sbox_ce8, "sbox_ce8");
    sc_trace(mVcdFile, sbox_q8, "sbox_q8");
    sc_trace(mVcdFile, sbox_address9, "sbox_address9");
    sc_trace(mVcdFile, sbox_ce9, "sbox_ce9");
    sc_trace(mVcdFile, sbox_q9, "sbox_q9");
    sc_trace(mVcdFile, sbox_address10, "sbox_address10");
    sc_trace(mVcdFile, sbox_ce10, "sbox_ce10");
    sc_trace(mVcdFile, sbox_q10, "sbox_q10");
    sc_trace(mVcdFile, sbox_address11, "sbox_address11");
    sc_trace(mVcdFile, sbox_ce11, "sbox_ce11");
    sc_trace(mVcdFile, sbox_q11, "sbox_q11");
    sc_trace(mVcdFile, sbox_address12, "sbox_address12");
    sc_trace(mVcdFile, sbox_ce12, "sbox_ce12");
    sc_trace(mVcdFile, sbox_q12, "sbox_q12");
    sc_trace(mVcdFile, sbox_address13, "sbox_address13");
    sc_trace(mVcdFile, sbox_ce13, "sbox_ce13");
    sc_trace(mVcdFile, sbox_q13, "sbox_q13");
    sc_trace(mVcdFile, sbox_address14, "sbox_address14");
    sc_trace(mVcdFile, sbox_ce14, "sbox_ce14");
    sc_trace(mVcdFile, sbox_q14, "sbox_q14");
    sc_trace(mVcdFile, sbox_address15, "sbox_address15");
    sc_trace(mVcdFile, sbox_ce15, "sbox_ce15");
    sc_trace(mVcdFile, sbox_q15, "sbox_q15");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln276_fu_329_p1, "zext_ln276_fu_329_p1");
    sc_trace(mVcdFile, zext_ln276_1_fu_334_p1, "zext_ln276_1_fu_334_p1");
    sc_trace(mVcdFile, zext_ln276_2_fu_339_p1, "zext_ln276_2_fu_339_p1");
    sc_trace(mVcdFile, zext_ln276_3_fu_344_p1, "zext_ln276_3_fu_344_p1");
    sc_trace(mVcdFile, zext_ln276_4_fu_349_p1, "zext_ln276_4_fu_349_p1");
    sc_trace(mVcdFile, zext_ln276_5_fu_354_p1, "zext_ln276_5_fu_354_p1");
    sc_trace(mVcdFile, zext_ln276_6_fu_359_p1, "zext_ln276_6_fu_359_p1");
    sc_trace(mVcdFile, zext_ln276_7_fu_364_p1, "zext_ln276_7_fu_364_p1");
    sc_trace(mVcdFile, zext_ln276_8_fu_369_p1, "zext_ln276_8_fu_369_p1");
    sc_trace(mVcdFile, zext_ln276_9_fu_374_p1, "zext_ln276_9_fu_374_p1");
    sc_trace(mVcdFile, zext_ln276_10_fu_379_p1, "zext_ln276_10_fu_379_p1");
    sc_trace(mVcdFile, zext_ln276_11_fu_384_p1, "zext_ln276_11_fu_384_p1");
    sc_trace(mVcdFile, zext_ln276_12_fu_389_p1, "zext_ln276_12_fu_389_p1");
    sc_trace(mVcdFile, zext_ln276_13_fu_394_p1, "zext_ln276_13_fu_394_p1");
    sc_trace(mVcdFile, zext_ln276_14_fu_399_p1, "zext_ln276_14_fu_399_p1");
    sc_trace(mVcdFile, zext_ln276_15_fu_404_p1, "zext_ln276_15_fu_404_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

SubBytes::~SubBytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
}

void SubBytes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
}

void SubBytes::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void SubBytes::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void SubBytes::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void SubBytes::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void SubBytes::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void SubBytes::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void SubBytes::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void SubBytes::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void SubBytes::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void SubBytes::thread_ap_return_0() {
    ap_return_0 = sbox_q0.read();
}

void SubBytes::thread_ap_return_1() {
    ap_return_1 = sbox_q4.read();
}

void SubBytes::thread_ap_return_10() {
    ap_return_10 = sbox_q10.read();
}

void SubBytes::thread_ap_return_11() {
    ap_return_11 = sbox_q14.read();
}

void SubBytes::thread_ap_return_12() {
    ap_return_12 = sbox_q3.read();
}

void SubBytes::thread_ap_return_13() {
    ap_return_13 = sbox_q7.read();
}

void SubBytes::thread_ap_return_14() {
    ap_return_14 = sbox_q11.read();
}

void SubBytes::thread_ap_return_15() {
    ap_return_15 = sbox_q15.read();
}

void SubBytes::thread_ap_return_2() {
    ap_return_2 = sbox_q8.read();
}

void SubBytes::thread_ap_return_3() {
    ap_return_3 = sbox_q12.read();
}

void SubBytes::thread_ap_return_4() {
    ap_return_4 = sbox_q1.read();
}

void SubBytes::thread_ap_return_5() {
    ap_return_5 = sbox_q5.read();
}

void SubBytes::thread_ap_return_6() {
    ap_return_6 = sbox_q9.read();
}

void SubBytes::thread_ap_return_7() {
    ap_return_7 = sbox_q13.read();
}

void SubBytes::thread_ap_return_8() {
    ap_return_8 = sbox_q2.read();
}

void SubBytes::thread_ap_return_9() {
    ap_return_9 = sbox_q6.read();
}

void SubBytes::thread_sbox_address0() {
    sbox_address0 =  (sc_lv<8>) (zext_ln276_fu_329_p1.read());
}

void SubBytes::thread_sbox_address1() {
    sbox_address1 =  (sc_lv<8>) (zext_ln276_1_fu_334_p1.read());
}

void SubBytes::thread_sbox_address10() {
    sbox_address10 =  (sc_lv<8>) (zext_ln276_10_fu_379_p1.read());
}

void SubBytes::thread_sbox_address11() {
    sbox_address11 =  (sc_lv<8>) (zext_ln276_11_fu_384_p1.read());
}

void SubBytes::thread_sbox_address12() {
    sbox_address12 =  (sc_lv<8>) (zext_ln276_12_fu_389_p1.read());
}

void SubBytes::thread_sbox_address13() {
    sbox_address13 =  (sc_lv<8>) (zext_ln276_13_fu_394_p1.read());
}

void SubBytes::thread_sbox_address14() {
    sbox_address14 =  (sc_lv<8>) (zext_ln276_14_fu_399_p1.read());
}

void SubBytes::thread_sbox_address15() {
    sbox_address15 =  (sc_lv<8>) (zext_ln276_15_fu_404_p1.read());
}

void SubBytes::thread_sbox_address2() {
    sbox_address2 =  (sc_lv<8>) (zext_ln276_2_fu_339_p1.read());
}

void SubBytes::thread_sbox_address3() {
    sbox_address3 =  (sc_lv<8>) (zext_ln276_3_fu_344_p1.read());
}

void SubBytes::thread_sbox_address4() {
    sbox_address4 =  (sc_lv<8>) (zext_ln276_4_fu_349_p1.read());
}

void SubBytes::thread_sbox_address5() {
    sbox_address5 =  (sc_lv<8>) (zext_ln276_5_fu_354_p1.read());
}

void SubBytes::thread_sbox_address6() {
    sbox_address6 =  (sc_lv<8>) (zext_ln276_6_fu_359_p1.read());
}

void SubBytes::thread_sbox_address7() {
    sbox_address7 =  (sc_lv<8>) (zext_ln276_7_fu_364_p1.read());
}

void SubBytes::thread_sbox_address8() {
    sbox_address8 =  (sc_lv<8>) (zext_ln276_8_fu_369_p1.read());
}

void SubBytes::thread_sbox_address9() {
    sbox_address9 =  (sc_lv<8>) (zext_ln276_9_fu_374_p1.read());
}

void SubBytes::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce10() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce10 = ap_const_logic_1;
    } else {
        sbox_ce10 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce11() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce11 = ap_const_logic_1;
    } else {
        sbox_ce11 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce12() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce12 = ap_const_logic_1;
    } else {
        sbox_ce12 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce13() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce13 = ap_const_logic_1;
    } else {
        sbox_ce13 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce14() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce14 = ap_const_logic_1;
    } else {
        sbox_ce14 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce15() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce15 = ap_const_logic_1;
    } else {
        sbox_ce15 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce4 = ap_const_logic_1;
    } else {
        sbox_ce4 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce5 = ap_const_logic_1;
    } else {
        sbox_ce5 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce6 = ap_const_logic_1;
    } else {
        sbox_ce6 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce7() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce7 = ap_const_logic_1;
    } else {
        sbox_ce7 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce8 = ap_const_logic_1;
    } else {
        sbox_ce8 = ap_const_logic_0;
    }
}

void SubBytes::thread_sbox_ce9() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        sbox_ce9 = ap_const_logic_1;
    } else {
        sbox_ce9 = ap_const_logic_0;
    }
}

void SubBytes::thread_zext_ln276_10_fu_379_p1() {
    zext_ln276_10_fu_379_p1 = esl_zext<64,8>(state_2_2_read.read());
}

void SubBytes::thread_zext_ln276_11_fu_384_p1() {
    zext_ln276_11_fu_384_p1 = esl_zext<64,8>(state_3_2_read.read());
}

void SubBytes::thread_zext_ln276_12_fu_389_p1() {
    zext_ln276_12_fu_389_p1 = esl_zext<64,8>(state_0_3_read.read());
}

void SubBytes::thread_zext_ln276_13_fu_394_p1() {
    zext_ln276_13_fu_394_p1 = esl_zext<64,8>(state_1_3_read.read());
}

void SubBytes::thread_zext_ln276_14_fu_399_p1() {
    zext_ln276_14_fu_399_p1 = esl_zext<64,8>(state_2_3_read.read());
}

void SubBytes::thread_zext_ln276_15_fu_404_p1() {
    zext_ln276_15_fu_404_p1 = esl_zext<64,8>(state_3_3_read.read());
}

void SubBytes::thread_zext_ln276_1_fu_334_p1() {
    zext_ln276_1_fu_334_p1 = esl_zext<64,8>(state_1_0_read.read());
}

void SubBytes::thread_zext_ln276_2_fu_339_p1() {
    zext_ln276_2_fu_339_p1 = esl_zext<64,8>(state_2_0_read.read());
}

void SubBytes::thread_zext_ln276_3_fu_344_p1() {
    zext_ln276_3_fu_344_p1 = esl_zext<64,8>(state_3_0_read.read());
}

void SubBytes::thread_zext_ln276_4_fu_349_p1() {
    zext_ln276_4_fu_349_p1 = esl_zext<64,8>(state_0_1_read.read());
}

void SubBytes::thread_zext_ln276_5_fu_354_p1() {
    zext_ln276_5_fu_354_p1 = esl_zext<64,8>(state_1_1_read.read());
}

void SubBytes::thread_zext_ln276_6_fu_359_p1() {
    zext_ln276_6_fu_359_p1 = esl_zext<64,8>(state_2_1_read.read());
}

void SubBytes::thread_zext_ln276_7_fu_364_p1() {
    zext_ln276_7_fu_364_p1 = esl_zext<64,8>(state_3_1_read.read());
}

void SubBytes::thread_zext_ln276_8_fu_369_p1() {
    zext_ln276_8_fu_369_p1 = esl_zext<64,8>(state_0_2_read.read());
}

void SubBytes::thread_zext_ln276_9_fu_374_p1() {
    zext_ln276_9_fu_374_p1 = esl_zext<64,8>(state_1_2_read.read());
}

void SubBytes::thread_zext_ln276_fu_329_p1() {
    zext_ln276_fu_329_p1 = esl_zext<64,8>(state_0_0_read.read());
}

void SubBytes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

