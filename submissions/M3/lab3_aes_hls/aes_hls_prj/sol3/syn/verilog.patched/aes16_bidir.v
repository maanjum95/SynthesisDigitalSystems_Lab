// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes16_bidir,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.337000,HLS_SYN_LAT=967,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1959,HLS_SYN_LUT=7634,HLS_VERSION=2019_1}" *)

module aes16_bidir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_0,
        key_1,
        key_2,
        key_3,
        inout_0_i,
        inout_0_o,
        inout_0_o_ap_vld,
        inout_1_i,
        inout_1_o,
        inout_1_o_ap_vld,
        inout_2_i,
        inout_2_o,
        inout_2_o_ap_vld,
        inout_3_i,
        inout_3_o,
        inout_3_o_ap_vld,
        iv_0_i,
        iv_0_o,
        iv_0_o_ap_vld,
        iv_1_i,
        iv_1_o,
        iv_1_o_ap_vld,
        iv_2_i,
        iv_2_o,
        iv_2_o_ap_vld,
        iv_3_i,
        iv_3_o,
        iv_3_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] key_0;
input  [31:0] key_1;
input  [31:0] key_2;
input  [31:0] key_3;
input  [31:0] inout_0_i;
output  [31:0] inout_0_o;
output   inout_0_o_ap_vld;
input  [31:0] inout_1_i;
output  [31:0] inout_1_o;
output   inout_1_o_ap_vld;
input  [31:0] inout_2_i;
output  [31:0] inout_2_o;
output   inout_2_o_ap_vld;
input  [31:0] inout_3_i;
output  [31:0] inout_3_o;
output   inout_3_o_ap_vld;
input  [31:0] iv_0_i;
output  [31:0] iv_0_o;
output   iv_0_o_ap_vld;
input  [31:0] iv_1_i;
output  [31:0] iv_1_o;
output   iv_1_o_ap_vld;
input  [31:0] iv_2_i;
output  [31:0] iv_2_o;
output   iv_2_o_ap_vld;
input  [31:0] iv_3_i;
output  [31:0] iv_3_o;
output   iv_3_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] inout_0_o;
reg inout_0_o_ap_vld;
reg[31:0] inout_1_o;
reg inout_1_o_ap_vld;
reg[31:0] inout_2_o;
reg inout_2_o_ap_vld;
reg[31:0] inout_3_o;
reg inout_3_o_ap_vld;
reg[31:0] iv_0_o;
reg iv_0_o_ap_vld;
reg[31:0] iv_1_o;
reg iv_1_o_ap_vld;
reg[31:0] iv_2_o;
reg iv_2_o_ap_vld;
reg[31:0] iv_3_o;
reg iv_3_o_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_2_fu_417_p2;
reg   [2:0] i_2_reg_663;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_fu_427_p6;
reg   [31:0] tmp_reg_668;
wire   [0:0] icmp_ln23_fu_411_p2;
wire   [3:0] shl_ln25_1_fu_441_p3;
reg   [3:0] shl_ln25_1_reg_673;
wire   [31:0] tmp_1_fu_449_p6;
reg   [31:0] tmp_1_reg_678;
wire   [31:0] tmp_2_fu_463_p6;
reg   [31:0] tmp_2_reg_683;
wire   [2:0] k_1_fu_487_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] k_fu_557_p2;
reg   [4:0] k_reg_699;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln249_fu_563_p1;
reg   [63:0] zext_ln249_reg_704;
wire   [0:0] icmp_ln249_fu_551_p2;
wire   [2:0] i_fu_574_p2;
reg   [2:0] i_reg_717;
wire    ap_CS_fsm_state8;
wire   [1:0] trunc_ln55_fu_580_p1;
reg   [1:0] trunc_ln55_reg_722;
wire   [0:0] icmp_ln54_fu_568_p2;
wire   [3:0] shl_ln1_fu_584_p3;
reg   [3:0] shl_ln1_reg_726;
wire   [7:0] p_text_q0;
reg   [7:0] p_text_load_reg_752;
wire    ap_CS_fsm_state9;
wire   [7:0] p_text_q1;
reg   [7:0] p_text_load_1_reg_757;
wire   [7:0] ctx_Iv_q0;
reg   [7:0] ctx_Iv_load_reg_772;
wire   [7:0] ctx_Iv_q1;
reg   [7:0] ctx_Iv_load_1_reg_777;
reg   [3:0] p_key_address0;
reg    p_key_ce0;
reg    p_key_we0;
wire   [7:0] p_key_d0;
wire   [7:0] p_key_q0;
reg    p_key_ce1;
wire   [7:0] p_key_q1;
reg   [3:0] p_text_address0;
reg    p_text_ce0;
reg    p_text_we0;
reg   [7:0] p_text_d0;
reg   [3:0] p_text_address1;
reg    p_text_ce1;
reg    p_text_we1;
reg   [3:0] p_iv_address0;
reg    p_iv_ce0;
reg    p_iv_we0;
wire   [7:0] p_iv_d0;
wire   [7:0] p_iv_q0;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg   [7:0] ctx_RoundKey_address1;
reg    ctx_RoundKey_ce1;
reg    ctx_RoundKey_we1;
wire   [7:0] ctx_RoundKey_q1;
reg   [3:0] ctx_Iv_address0;
reg    ctx_Iv_ce0;
reg    ctx_Iv_we0;
reg   [7:0] ctx_Iv_d0;
reg   [3:0] ctx_Iv_address1;
reg    ctx_Iv_ce1;
wire    grp_KeyExpansion_fu_394_ap_start;
wire    grp_KeyExpansion_fu_394_ap_done;
wire    grp_KeyExpansion_fu_394_ap_idle;
wire    grp_KeyExpansion_fu_394_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_394_RoundKey_address0;
wire    grp_KeyExpansion_fu_394_RoundKey_ce0;
wire    grp_KeyExpansion_fu_394_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_394_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_394_RoundKey_address1;
wire    grp_KeyExpansion_fu_394_RoundKey_ce1;
wire    grp_KeyExpansion_fu_394_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_394_RoundKey_d1;
wire   [3:0] grp_KeyExpansion_fu_394_Key_address0;
wire    grp_KeyExpansion_fu_394_Key_ce0;
wire   [3:0] grp_KeyExpansion_fu_394_Key_address1;
wire    grp_KeyExpansion_fu_394_Key_ce1;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ap_start;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ap_done;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ap_idle;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ap_ready;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address1;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce1;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_d0;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d0;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address1;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce1;
wire    grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we1;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d1;
reg   [2:0] i_0_reg_350;
wire   [0:0] icmp_ln24_fu_481_p2;
reg   [2:0] k_0_reg_361;
reg   [4:0] k_0_i_reg_372;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [2:0] i_1_reg_383;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
reg    grp_KeyExpansion_fu_394_ap_start_reg;
reg    grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg;
wire   [63:0] zext_ln25_fu_524_p1;
wire   [63:0] zext_ln55_fu_598_p1;
wire   [63:0] zext_ln55_1_fu_610_p1;
wire   [63:0] zext_ln55_2_fu_621_p1;
wire   [63:0] zext_ln55_3_fu_627_p1;
wire   [31:0] or_ln55_5_fu_632_p5;
wire   [31:0] or_ln59_2_fu_646_p5;
wire   [7:0] trunc_ln26_fu_536_p1;
wire   [1:0] trunc_ln25_fu_423_p1;
wire   [1:0] trunc_ln25_1_fu_493_p1;
wire   [4:0] shl_ln_fu_497_p3;
wire   [31:0] zext_ln25_1_fu_505_p1;
wire   [31:0] lshr_ln25_fu_509_p2;
wire   [3:0] zext_ln24_fu_477_p1;
wire   [3:0] add_ln25_fu_519_p2;
wire   [31:0] lshr_ln26_fu_531_p2;
wire   [31:0] lshr_ln27_fu_541_p2;
wire   [3:0] or_ln55_fu_592_p2;
wire   [3:0] or_ln55_1_fu_604_p2;
wire   [3:0] or_ln55_2_fu_616_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_KeyExpansion_fu_394_ap_start_reg = 1'b0;
#0 grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg = 1'b0;
end

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_key_address0),
    .ce0(p_key_ce0),
    .we0(p_key_we0),
    .d0(p_key_d0),
    .q0(p_key_q0),
    .address1(grp_KeyExpansion_fu_394_Key_address1),
    .ce1(p_key_ce1),
    .q1(p_key_q1)
);

AES_CTR_xcrypt_buffe_x #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_text_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_text_address0),
    .ce0(p_text_ce0),
    .we0(p_text_we0),
    .d0(p_text_d0),
    .q0(p_text_q0),
    .address1(p_text_address1),
    .ce1(p_text_ce1),
    .we1(p_text_we1),
    .d1(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d1),
    .q1(p_text_q1)
);

aes16_bidir_p_iv #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
p_iv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_iv_address0),
    .ce0(p_iv_ce0),
    .we0(p_iv_we0),
    .d0(p_iv_d0),
    .q0(p_iv_q0)
);

aes16_bidir_ctx_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_394_RoundKey_d0),
    .q0(ctx_RoundKey_q0),
    .address1(ctx_RoundKey_address1),
    .ce1(ctx_RoundKey_ce1),
    .we1(ctx_RoundKey_we1),
    .d1(grp_KeyExpansion_fu_394_RoundKey_d1),
    .q1(ctx_RoundKey_q1)
);

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ctx_Iv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_Iv_address0),
    .ce0(ctx_Iv_ce0),
    .we0(ctx_Iv_we0),
    .d0(ctx_Iv_d0),
    .q0(ctx_Iv_q0),
    .address1(ctx_Iv_address1),
    .ce1(ctx_Iv_ce1),
    .q1(ctx_Iv_q1)
);

KeyExpansion grp_KeyExpansion_fu_394(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_394_ap_start),
    .ap_done(grp_KeyExpansion_fu_394_ap_done),
    .ap_idle(grp_KeyExpansion_fu_394_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_394_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_394_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_394_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_394_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_394_RoundKey_d0),
    .RoundKey_address1(grp_KeyExpansion_fu_394_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_394_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_394_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_394_RoundKey_d1),
    .Key_address0(grp_KeyExpansion_fu_394_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_394_Key_ce0),
    .Key_q0(p_key_q0),
    .Key_address1(grp_KeyExpansion_fu_394_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_394_Key_ce1),
    .Key_q1(p_key_q1)
);

AES_CTR_xcrypt_buffe grp_AES_CTR_xcrypt_buffe_fu_402(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES_CTR_xcrypt_buffe_fu_402_ap_start),
    .ap_done(grp_AES_CTR_xcrypt_buffe_fu_402_ap_done),
    .ap_idle(grp_AES_CTR_xcrypt_buffe_fu_402_ap_idle),
    .ap_ready(grp_AES_CTR_xcrypt_buffe_fu_402_ap_ready),
    .ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address0),
    .ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce0),
    .ctx_RoundKey_q0(ctx_RoundKey_q0),
    .ctx_RoundKey_address1(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address1),
    .ctx_RoundKey_ce1(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce1),
    .ctx_RoundKey_q1(ctx_RoundKey_q1),
    .ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_address0),
    .ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_ce0),
    .ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_we0),
    .ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_d0),
    .ctx_Iv_q0(ctx_Iv_q0),
    .buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address0),
    .buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce0),
    .buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we0),
    .buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d0),
    .buf_r_q0(p_text_q0),
    .buf_r_address1(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address1),
    .buf_r_ce1(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce1),
    .buf_r_we1(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we1),
    .buf_r_d1(grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d1),
    .buf_r_q1(p_text_q1)
);

aes16_bidir_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
aes16_bidir_mux_42_32_1_1_U15(
    .din0(key_0),
    .din1(key_1),
    .din2(key_2),
    .din3(key_3),
    .din4(trunc_ln25_fu_423_p1),
    .dout(tmp_fu_427_p6)
);

aes16_bidir_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
aes16_bidir_mux_42_32_1_1_U16(
    .din0(inout_0_i),
    .din1(inout_1_i),
    .din2(inout_2_i),
    .din3(inout_3_i),
    .din4(trunc_ln25_fu_423_p1),
    .dout(tmp_1_fu_449_p6)
);

aes16_bidir_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
aes16_bidir_mux_42_32_1_1_U17(
    .din0(iv_0_i),
    .din1(iv_1_i),
    .din2(iv_2_i),
    .din3(iv_3_i),
    .din4(trunc_ln25_fu_423_p1),
    .dout(tmp_2_fu_463_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln249_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg <= 1'b1;
        end else if ((grp_AES_CTR_xcrypt_buffe_fu_402_ap_ready == 1'b1)) begin
            grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeyExpansion_fu_394_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln23_fu_411_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_KeyExpansion_fu_394_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_394_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_394_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_350 <= i_2_reg_663;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_350 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_383 <= i_reg_717;
    end else if (((grp_AES_CTR_xcrypt_buffe_fu_402_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_383 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_i_reg_372 <= k_reg_699;
    end else if (((grp_KeyExpansion_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_i_reg_372 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_361 <= 3'd0;
    end else if (((icmp_ln24_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_361 <= k_1_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_Iv_load_1_reg_777 <= ctx_Iv_q1;
        ctx_Iv_load_reg_772 <= ctx_Iv_q0;
        p_text_load_1_reg_757 <= p_text_q1;
        p_text_load_reg_752 <= p_text_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_663 <= i_2_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_717 <= i_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_699 <= k_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_568_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        shl_ln1_reg_726[3 : 2] <= shl_ln1_fu_584_p3[3 : 2];
        trunc_ln55_reg_722 <= trunc_ln55_fu_580_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln25_1_reg_673[3 : 2] <= shl_ln25_1_fu_441_p3[3 : 2];
        tmp_1_reg_678 <= tmp_1_fu_449_p6;
        tmp_2_reg_683 <= tmp_2_fu_463_p6;
        tmp_reg_668 <= tmp_fu_427_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln249_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln249_reg_704[4 : 0] <= zext_ln249_fu_563_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_568_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_568_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_Iv_address0 = zext_ln55_3_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_Iv_address0 = zext_ln55_fu_598_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_Iv_address0 = zext_ln249_reg_704;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_address0;
    end else begin
        ctx_Iv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ctx_Iv_address1 = zext_ln55_2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_Iv_address1 = zext_ln55_1_fu_610_p1;
    end else begin
        ctx_Iv_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_Iv_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_ce0;
    end else begin
        ctx_Iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        ctx_Iv_ce1 = 1'b1;
    end else begin
        ctx_Iv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_Iv_d0 = p_iv_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_d0;
    end else begin
        ctx_Iv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_Iv_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_Iv_we0;
    end else begin
        ctx_Iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_394_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_address1 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_address1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_address1 = grp_KeyExpansion_fu_394_RoundKey_address1;
    end else begin
        ctx_RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_394_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_ce1 = grp_AES_CTR_xcrypt_buffe_fu_402_ctx_RoundKey_ce1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_394_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_394_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_394_RoundKey_we1;
    end else begin
        ctx_RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd0))) begin
        inout_0_o = or_ln55_5_fu_632_p5;
    end else begin
        inout_0_o = inout_0_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd0))) begin
        inout_0_o_ap_vld = 1'b1;
    end else begin
        inout_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd1))) begin
        inout_1_o = or_ln55_5_fu_632_p5;
    end else begin
        inout_1_o = inout_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd1))) begin
        inout_1_o_ap_vld = 1'b1;
    end else begin
        inout_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd2))) begin
        inout_2_o = or_ln55_5_fu_632_p5;
    end else begin
        inout_2_o = inout_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd2))) begin
        inout_2_o_ap_vld = 1'b1;
    end else begin
        inout_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd3))) begin
        inout_3_o = or_ln55_5_fu_632_p5;
    end else begin
        inout_3_o = inout_3_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd3))) begin
        inout_3_o_ap_vld = 1'b1;
    end else begin
        inout_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd0))) begin
        iv_0_o = or_ln59_2_fu_646_p5;
    end else begin
        iv_0_o = iv_0_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd0))) begin
        iv_0_o_ap_vld = 1'b1;
    end else begin
        iv_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd1))) begin
        iv_1_o = or_ln59_2_fu_646_p5;
    end else begin
        iv_1_o = iv_1_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd1))) begin
        iv_1_o_ap_vld = 1'b1;
    end else begin
        iv_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd2))) begin
        iv_2_o = or_ln59_2_fu_646_p5;
    end else begin
        iv_2_o = iv_2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd2))) begin
        iv_2_o_ap_vld = 1'b1;
    end else begin
        iv_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd3))) begin
        iv_3_o = or_ln59_2_fu_646_p5;
    end else begin
        iv_3_o = iv_3_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (trunc_ln55_reg_722 == 2'd3))) begin
        iv_3_o_ap_vld = 1'b1;
    end else begin
        iv_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_iv_address0 = zext_ln249_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_iv_address0 = zext_ln25_fu_524_p1;
    end else begin
        p_iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        p_iv_ce0 = 1'b1;
    end else begin
        p_iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_iv_we0 = 1'b1;
    end else begin
        p_iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_key_address0 = zext_ln25_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_key_address0 = grp_KeyExpansion_fu_394_Key_address0;
    end else begin
        p_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_key_ce0 = grp_KeyExpansion_fu_394_Key_ce0;
    end else begin
        p_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_key_ce1 = grp_KeyExpansion_fu_394_Key_ce1;
    end else begin
        p_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_key_we0 = 1'b1;
    end else begin
        p_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_text_address0 = zext_ln55_3_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_text_address0 = zext_ln55_fu_598_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_text_address0 = zext_ln25_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_address0 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address0;
    end else begin
        p_text_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_text_address1 = zext_ln55_2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_text_address1 = zext_ln55_1_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_address1 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_address1;
    end else begin
        p_text_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        p_text_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce0;
    end else begin
        p_text_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        p_text_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_ce1 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_ce1;
    end else begin
        p_text_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_text_d0 = trunc_ln26_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_d0 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_d0;
    end else begin
        p_text_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_text_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_we0 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we0;
    end else begin
        p_text_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_text_we1 = grp_AES_CTR_xcrypt_buffe_fu_402_buf_r_we1;
    end else begin
        p_text_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln23_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_KeyExpansion_fu_394_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln249_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_AES_CTR_xcrypt_buffe_fu_402_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_568_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_519_p2 = (zext_ln24_fu_477_p1 + shl_ln25_1_reg_673);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_AES_CTR_xcrypt_buffe_fu_402_ap_start = grp_AES_CTR_xcrypt_buffe_fu_402_ap_start_reg;

assign grp_KeyExpansion_fu_394_ap_start = grp_KeyExpansion_fu_394_ap_start_reg;

assign i_2_fu_417_p2 = (i_0_reg_350 + 3'd1);

assign i_fu_574_p2 = (i_1_reg_383 + 3'd1);

assign icmp_ln23_fu_411_p2 = ((i_0_reg_350 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln249_fu_551_p2 = ((k_0_i_reg_372 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_481_p2 = ((k_0_reg_361 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_568_p2 = ((i_1_reg_383 == 3'd4) ? 1'b1 : 1'b0);

assign k_1_fu_487_p2 = (k_0_reg_361 + 3'd1);

assign k_fu_557_p2 = (k_0_i_reg_372 + 5'd1);

assign lshr_ln25_fu_509_p2 = tmp_reg_668 >> zext_ln25_1_fu_505_p1;

assign lshr_ln26_fu_531_p2 = tmp_1_reg_678 >> zext_ln25_1_fu_505_p1;

assign lshr_ln27_fu_541_p2 = tmp_2_reg_683 >> zext_ln25_1_fu_505_p1;

assign or_ln55_1_fu_604_p2 = (shl_ln1_fu_584_p3 | 4'd2);

assign or_ln55_2_fu_616_p2 = (shl_ln1_reg_726 | 4'd1);

assign or_ln55_5_fu_632_p5 = {{{{p_text_load_reg_752}, {p_text_load_1_reg_757}}, {p_text_q1}}, {p_text_q0}};

assign or_ln55_fu_592_p2 = (shl_ln1_fu_584_p3 | 4'd3);

assign or_ln59_2_fu_646_p5 = {{{{ctx_Iv_load_reg_772}, {ctx_Iv_load_1_reg_777}}, {ctx_Iv_q1}}, {ctx_Iv_q0}};

assign p_iv_d0 = lshr_ln27_fu_541_p2[7:0];

assign p_key_d0 = lshr_ln25_fu_509_p2[7:0];

assign shl_ln1_fu_584_p3 = {{trunc_ln55_fu_580_p1}, {2'd0}};

assign shl_ln25_1_fu_441_p3 = {{trunc_ln25_fu_423_p1}, {2'd0}};

assign shl_ln_fu_497_p3 = {{trunc_ln25_1_fu_493_p1}, {3'd0}};

assign trunc_ln25_1_fu_493_p1 = k_0_reg_361[1:0];

assign trunc_ln25_fu_423_p1 = i_0_reg_350[1:0];

assign trunc_ln26_fu_536_p1 = lshr_ln26_fu_531_p2[7:0];

assign trunc_ln55_fu_580_p1 = i_1_reg_383[1:0];

assign zext_ln249_fu_563_p1 = k_0_i_reg_372;

assign zext_ln24_fu_477_p1 = k_0_reg_361;

assign zext_ln25_1_fu_505_p1 = shl_ln_fu_497_p3;

assign zext_ln25_fu_524_p1 = add_ln25_fu_519_p2;

assign zext_ln55_1_fu_610_p1 = or_ln55_1_fu_604_p2;

assign zext_ln55_2_fu_621_p1 = or_ln55_2_fu_616_p2;

assign zext_ln55_3_fu_627_p1 = shl_ln1_reg_726;

assign zext_ln55_fu_598_p1 = or_ln55_fu_592_p2;

always @ (posedge ap_clk) begin
    shl_ln25_1_reg_673[1:0] <= 2'b00;
    zext_ln249_reg_704[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln1_reg_726[1:0] <= 2'b00;
end

endmodule //aes16_bidir
